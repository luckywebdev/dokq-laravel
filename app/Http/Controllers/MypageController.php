<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Collection;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Redirect;
use Auth;
use View;
use App\User;
use App\Model\Advertise;
use App\Model\Categories;
use App\Model\Classes;
use App\Model\Demand;
use App\Model\Messages;
use App\Model\Books;
use App\Model\WishLists;
use App\Model\Quizes;
use App\Model\UserQuiz;
use App\Model\UserQuizesHistory;
use App\Model\PupilHistory;
use App\Model\PersonadminHistory;
use App\Model\PersoncontributionHistory;
use App\Model\PersontestoverseeHistory;
use App\Model\PersonbooksearchHistory;
use App\Model\PersonoverseerHistory;
use App\Model\PersonquizHistory;
use App\Model\PersontestHistory;
use App\Model\PersonworkHistory;
use App\Model\OrgworkHistory;
use App\Model\ReportBackup;
use App\Model\ReportGraphBackup;
use App\Model\Vote;
use App\Model\CertiBackup;
use App\Mail\Userinfochange;
use Carbon\Carbon;
use DB;
use App\Mail\Restore;
use Illuminate\Support\Facades\Mail;
use Swift_TransportException;


class MypageController extends Controller{

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        date_default_timezone_set('Asia/Tokyo');
    }

    public $page_info = [
        'side' =>'mypage',
        'subside' =>'top',
        'top' =>'mypage',
        'subtop' =>'mypage',
    ];


    public function get_device(){
        $device_data = $_SERVER['HTTP_USER_AGENT'];
        $device = '';
        if(strpos($device_data, 'Android') > 0){
            $device = 'Android';
        }
        else if(strpos($device_data, 'iPhone') > 0){
            $device = 'iPhone';
        }
        else if(strpos($device_data, 'Windows') > 0){
            $device = 'Windows Desktop';
        }
        else if(strpos($device_data, 'iPhone') !== false && strpos($device_data, 'Mac OS') > 0){
            $device = 'Mac OS Desktop';
        }
        else{
            $device = "Tablet";
        }
        return $device;
    }
    public function Get_AvgPoint($sql){

        $var_return = DB::table(DB::raw($sql))
            ->select('sum','flag')
                                        
            ->get();
                    
        return $var_return;
    }
    static function Get_AvgPoint1($sql){

        $var_return = DB::table(DB::raw($sql))
            ->select('sum','flag')
                                        
            ->get();
                    
        return $var_return;
    }
    static function Get_RankPoint($sql){

        $var_rank = DB::table(DB::raw($sql))
            ->select(DB::raw('count(table1.id) as pupil_numbers'),'table1.sum',DB::raw('sum(table1.flag) as flag'))
            ->groupby('table1.sum')
            ->orderby('table1.sum','desc')
            ->get();
          
        return $var_rank;
    }
    static function Get_RankPoint_for_child($sql){

        $var_rank = DB::table(DB::raw($sql))
            ->select(DB::raw('table1.id as pupil_numbers'),'table1.sum',DB::raw('sum(table1.flag) as flag'))
            ->groupby('table1.id')
            ->orderby('table1.sum','desc')
            ->get();
          
        return $var_rank;
    }
    static function Get_RankPoint1($sql){

        $var_rank = DB::table(DB::raw($sql))
            ->select(DB::raw('count(table1.id) as pupil_numbers'),'table1.sum',DB::raw('sum(table1.flag) as flag'))
            ->groupby('table1.sum')
            ->orderby('table1.sum','desc')
            ->get();
          
        return $var_rank;
    }
    public function index(Request $request)
    {
        $user = Auth::user();
        $bottom = $request->input("bottom");   
        $userId = $request->input("user_id");

        if(isset($userId) && $userId) {
            $user = User::find($request->input("user_id"));
        }
        $role = $user->role;
        $birthday = $user->birthday;
        if($user->pay_content !== null && $user->pay_content !== ''){
            $pay_content = config('consts')['PAY_LIST'][$user->pay_content].$user->pay_amount.'円';
        }
        else{
            $pay_content = '月額支払い（または年額支払い)';
        }
        $pay_period = $user->period;
        if($pay_period !== null && $pay_period !== ""){
            $pay_date_arr = explode("-", $pay_period);
            $pay_year = $pay_date_arr[0];
            $pay_month = $pay_date_arr[1];
            $pay_date = $pay_date_arr[2];
        }
        else{
            $pay_year = '〇〇〇〇';
            $pay_month = '〇';
            $pay_date = '〇';
        }
        $work_auth = "";
        $overseer_chk = PersonoverseerHistory::where('user_id', Auth::user()->id)->count();
        if($overseer_chk > 0){
            $work_auth .= " 監修者, ";
        }
        $testoversee_chk = PersontestoverseeHistory::where('user_id', Auth::user()->id)->count();
        if($testoversee_chk > 0){
            $work_auth .= " 試験監督,";
        }
        $bookreg_chk = Books::where('register_id', Auth::user()->id)->where('active', '>', 2)->count();
        if($bookreg_chk > 0){
            $work_auth .= " 本の登録者,";
        }
        $quizreg_chk = Quizes::where('register_id', Auth::user()->id)->where('active', '>=', 2)->count();
        if($quizreg_chk > 0){
            $work_auth .= " クイズ作成者,";
        }

        $messages = Messages::MyMessages()->get();
        $messages = $messages->where('type','<>',1)->where('del_flag', 0)->take(3);
        $waitOverseerBooks = Books::where("active", 3)->orderby('replied_date1', 'desc')->get();
        
        if($user->isAuthor())
            $overseerBooks = Books::where("active", '<>', 7)->where('overseer_id', Auth::id())
                                    ->orWhere( function ($query) use ($user) {
                                        $query->where('author_overseer_flag', 1)
                                           ->where('writer_id', $user->id);
                                     })
                                    ->get()->take(3);
        else
            $overseerBooks = Books::where("active", '<>', 7)->where('overseer_id', Auth::id())->orderby('replied_date3', 'desc')->get()->take(3);

        $demandBooks = Demand::where("overseer_demand.overseer_id", Auth::id())
                               ->join('books', 'overseer_demand.book_id', DB::raw('books.id and books.active <> 7'))
                               ->orderBy("overseer_demand.updated_at",'desc')->get()->take(3);
        
        //get My books
        $wishBooks = WishLists::wishBooks(Auth::id())->take(3);
        $wishlists_is_public = $user->wishlists_is_public;

        $today = now();
        $rankingage = 1;
        $advertise = Advertise::first();
        if($user->isPupil() && $user->active == 1){
            $groupbyuser = $user->ClassOfPupil->School()->first();
            if(is_object($groupbyuser)){
                if($groupbyuser->group_type == 0)
                    $rankingage = 1; //小学生
                elseif($groupbyuser->group_type == 1)
                    $rankingage = 2; //中学生
                elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                    $rankingage = 3; //高校生
                else
                    $rankingage = 4; //大学生
            }
        }else{
            $curage = $user->age();
            
            if($curage <= 11){
                $rankingage = 1;
            }
            elseif($curage > 11 && $curage <= 14){
                $rankingage = 2;
            }
            else{
                $rankingage = floor($curage / 10);
                $rankingage = $rankingage + 4; 
            }
        }
        $search_birthday = []; 
        $search_birthday = MypageController::search_birthday($rankingage); 


        $mybookcase_is_public = Auth::user()->mybookcase_is_public;
        $profile_is_public = Auth::user()->profile_is_public;
        $targetpercent_is_public = Auth::user()->targetpercent_is_public;
        $ranking_order_is_public = Auth::user()->ranking_order_is_public;

        $myBooks = Books::MyBooks(-1)->orderby('created_at', 'desc')->get()->take(6);
        $total_point = UserQuiz::TotalPoint();
        $my_rank = 10;
        $my_addpoint = 0;

        $ranks = [29070, 14070, 6070, 2070, 870, 370, 220, 120, 60, 20, 0];

        for ($i = 0; $i < 11; $i++) {
            if ($total_point >= $ranks[$i] && $total_point < $ranks[$i - 1]) {
                $my_rank = $i;
                $my_addpoint = $ranks[$i - 1] - $total_point;
            }
        }
        //mypage bottom
        $passed_records_is_public = Auth::user()->passed_records_is_public;
        $register_point_ranking_is_public = Auth::user()->register_point_ranking_is_public;
        $register_record_is_public = Auth::user()->register_record_is_public;
        $point_ranking_is_public = Auth::user()->point_ranking_is_public;
        $book_allowed_record_is_public = Auth::user()->book_allowed_record_is_public;
        $quiz_allowed_record_is_public = Auth::user()->quiz_allowed_record_is_public;
        $overseerbook_is_public = Auth::user()->overseerbook_is_public;

        if (Auth::user()->isAdmin()) {
            $type = 1;$tagrgetpoint = 1;$school_rank_city = 0;$group_id=0;
            
            //get messages
            //get books
            $books = Books::get();

            $mybookcase_is_public = Auth::user()->mybookcase_is_public;
            
            $profile_is_public = Auth::user()->profile_is_public;
            $targetpercent_is_public = Auth::user()->targetpercent_is_public;
            $ranking_order_is_public = Auth::user()->ranking_order_is_public;

            ///////////////////
            $array_season = [];
            
            for ($i = 0; $i < 4; $i++) {
                $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
                $array_season_obj[$i] = MypageController::CurrentSeaon($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon($date);
            }

            /////////////////////

            $current_season = MypageController::CurrentSeaon(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'],$current_season, 1)->where('u.id', Auth::id())->first();
                     
           
            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
            $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".Auth::id()."' or ( users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 

            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
            }
           
            for($i=0;$i<8;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $myavgPoints[$i][1]=$avg->sum;                        
                        }
                 }

                $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
            }
           
            $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
            $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";                
                       
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
           
            $sql[4]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";;
            $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
          
            $sql[5]=$sql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                           
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
            $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
            $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
            $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]);

            //読書推進活動ランキング
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$current_season['begin_season']."' and '".$current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql[2]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
           
            $myquizPoints2 = MypageController::Get_RankPoint($sql[2]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql[4]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$array_season_obj[1]['begin_season']."' and '".$array_season_obj[1]['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_before[2]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_before[3]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql_before[4]=$sql_temp1." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_before[2]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_before[3]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_before[4]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_id','=',Auth::id())
                ->get();

            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_this[2]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_this[3]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_this[4]=$sql_temp2." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_this[2]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_this[3]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_this[4]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '".Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_last[2]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_last[3]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_last[4]=$sql_temp3." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_last[2]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_last[3]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_last[4]);
            
            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                     group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_all[2]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_all[3]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_all[4]=$sql_temp4." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_all[2]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_all[3]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_all[4]);

            return view('mypage.overseer.mypage_overseer')
                ->with('page_info', $this->page_info)
                ->with('messages', $messages)
                ->with('array_season_obj', $array_season_obj)
                ->with('total_point', $total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('my_rank', $my_rank)
                ->with('waitOverseerBooks', $waitOverseerBooks)
                ->with('overseerBooks', $overseerBooks)
                ->with('demandBooks', $demandBooks)
                ->with('myBooks', $myBooks)
                ->with('age', $curage)
                ->with('type', $type)
                ->with('user', $user)
                ->with('targetpercent_is_public', $targetpercent_is_public)
                ->with('ranking_order_is_public', $ranking_order_is_public)
                ->with('profile_is_public', $profile_is_public)
                ->with('mybookcase_is_public', $mybookcase_is_public)
                ->with('wishBooks', $wishBooks)
                ->with('wishlists_is_public', $wishlists_is_public)
                ->with('passed_records_is_public', $passed_records_is_public)
                ->with('point_ranking_is_public', $point_ranking_is_public)
                ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
                ->with('register_record_is_public', $register_record_is_public)
                ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
                ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
                ->with('overseerbook_is_public', $overseerbook_is_public)
                ->with('tagrgetpoint',$tagrgetpoint)
                ->with('my_rank', $my_rank)
                ->with('total_point',$total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('cur_season', $cur_season)
                ->with('current_season', $current_season)
                ->with('current_user', $current_user)
                ->with('array_season', $array_season)
                ->with('myrankPoints3', $myrankPoints3)
                ->with('myrankPoints4', $myrankPoints4)
                ->with('myrankPoints5', $myrankPoints5)
                ->with('threemonthrankPoints3', $threemonthrankPoints3)
                ->with('threemonthrankPoints4', $threemonthrankPoints4)
                ->with('threemonthrankPoints5', $threemonthrankPoints5)
                ->with('allrankPoints3', $allrankPoints3)
                ->with('allrankPoints4', $allrankPoints4)
                ->with('allrankPoints5', $allrankPoints5)
                ->with('bottom',$bottom)
                ->with('myavgPoints',$myavgPoints)
                ->with('myquizPoints1', $myquizPoints1)
                ->with('myquizPoints2', $myquizPoints2)
                ->with('myquizPoints3', $myquizPoints3)
                ->with('myquizPoints4', $myquizPoints4)
                ->with('myquizPoints_before1', $myquizPoints_before1)
                ->with('myquizPoints_before2', $myquizPoints_before2)
                ->with('myquizPoints_before3', $myquizPoints_before3)
                ->with('myquizPoints_before4', $myquizPoints_before4)
                ->with('myquizPoints_this1', $myquizPoints_this1)
                ->with('myquizPoints_this2', $myquizPoints_this2)
                ->with('myquizPoints_this3', $myquizPoints_this3)
                ->with('myquizPoints_this4', $myquizPoints_this4)
                ->with('myquizPoints_last1', $myquizPoints_last1)
                ->with('myquizPoints_last2', $myquizPoints_last2)
                ->with('myquizPoints_last3', $myquizPoints_last3)
                ->with('myquizPoints_last4', $myquizPoints_last4)
                ->with('myquizPoints_all1', $myquizPoints_all1)
                ->with('myquizPoints_all2', $myquizPoints_all2)
                ->with('myquizPoints_all3', $myquizPoints_all3)
                ->with('myquizPoints_all4', $myquizPoints_all4)
                ->with('pay_year', $pay_year)
                ->with('pay_month', $pay_month)
                ->with('pay_date', $pay_date)
                ->with('pay_content', $pay_content)
                ->with('work_auth', $work_auth)
                ->with('advertise', $advertise);
        } else if (Auth::user()->isGroup()) {
            return view('mypage.group.mypage_group')
                //                ->withNosidebar(true)
                ->with('page_info', $this->page_info)
                ->with('pay_year', $pay_year)
                ->with('pay_month', $pay_month)
                ->with('pay_date', $pay_date)
                ->with('pay_content', $pay_content)
                ->with('work_auth', $work_auth)
                ->with('advertise', $advertise);
        } else if (Auth::user()->isSchoolMember()) {
            $type = 1;$tagrgetpoint = 1;$school_rank_city = 0;$group_id=0;
            
            //get messages
            //get books
            $books = Books::get();

            $mybookcase_is_public = Auth::user()->mybookcase_is_public;
            
            $profile_is_public = Auth::user()->profile_is_public;
            $targetpercent_is_public = Auth::user()->targetpercent_is_public;
            $ranking_order_is_public = Auth::user()->ranking_order_is_public;

            ///////////////////
            $array_season = [];

            for ($i = 0; $i < 4; $i++) {
                $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
                $array_season_obj[$i] = MypageController::CurrentSeaon($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon($date);
            }

            /////////////////////

            $current_season = MypageController::CurrentSeaon(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'],$current_season, 1)->where('u.id', Auth::id())->first();
                     
           
            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
           $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".Auth::id()."' or (users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 

            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
            }
           
            for($i=0;$i<8;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $myavgPoints[$i][1]=$avg->sum;                        
                        }
                 }

                $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
            }
           

            $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
            $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";                
                       
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
          
            $sql[5]=$sql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                                
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
            $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
            $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
            $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]);
            //読書推進活動ランキング
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            
            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$current_season['begin_season']."' and '".$current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql[2]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints2 = MypageController::Get_RankPoint($sql[2]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql[4]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('type', '=', 0)->where('status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('type', '=', 1)->where('status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->get();

            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$array_season_obj[1]['begin_season']."' and '".$array_season_obj[1]['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_before[2]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_before[3]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_before[4]=$sql_temp1." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_before[2]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_before[3]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_before[4]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_this[2]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_this[3]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_this[4]=$sql_temp2." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_this[2]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_this[3]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_this[4]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '".Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_last[2]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_last[3]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_last[4]=$sql_temp3." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_last[2]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_last[3]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_last[4]);
            
            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('type', '=', 0)->where('status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('type', '=', 1)->where('status', '=', 1);
                    });
                })
                ->where('user_id','=',Auth::id())
                ->get();

            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                     group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_all[2]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_all[3]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_all[4]=$sql_temp4." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_all[2]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_all[3]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_all[4]);  

            return view('mypage.group.mypage_teacher')
                ->with('page_info', $this->page_info)
                ->with('age',$curage)
                ->with('array_season_obj', $array_season_obj)
                ->with('wishlists_is_public', $wishlists_is_public)
                ->with('profile_is_public', $profile_is_public)
                ->with('mybookcase_is_public', $mybookcase_is_public)
                ->with('messages', $messages)
                ->with('waitOverseerBooks', $waitOverseerBooks)
                ->with('overseerBooks', $overseerBooks)
                ->with('demandBooks', $demandBooks)
                ->with('confirm', $request->input('confirm'))
                ->with('wishBooks', $wishBooks)
                ->with('type', $type)
                ->with('user', $user)
                ->with('wishlists_is_public', $wishlists_is_public)
                ->with('targetpercent_is_public', $targetpercent_is_public)
                ->with('ranking_order_is_public', $ranking_order_is_public)
                ->with('passed_records_is_public', $passed_records_is_public)
                ->with('point_ranking_is_public', $point_ranking_is_public)
                ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
                ->with('register_record_is_public', $register_record_is_public)
                ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
                ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
                ->with('overseerbook_is_public', $overseerbook_is_public)
                ->with('tagrgetpoint',$tagrgetpoint)
                ->with('my_rank', $my_rank)
                ->with('total_point',$total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('cur_season', $cur_season)
                ->with('current_season', $current_season)
                ->with('current_user', $current_user)
                ->with('array_season', $array_season)
                ->with('myrankPoints3', $myrankPoints3)
                ->with('myrankPoints4', $myrankPoints4)
                ->with('myrankPoints5', $myrankPoints5)
                ->with('threemonthrankPoints3', $threemonthrankPoints3)
                ->with('threemonthrankPoints4', $threemonthrankPoints4)
                ->with('threemonthrankPoints5', $threemonthrankPoints5)
                ->with('allrankPoints3', $allrankPoints3)
                ->with('allrankPoints4', $allrankPoints4)
                ->with('allrankPoints5', $allrankPoints5)
                ->with('bottom',$bottom)
                ->with('myavgPoints',$myavgPoints)
                ->with('myquizPoints1', $myquizPoints1)
                ->with('myquizPoints2', $myquizPoints2)
                ->with('myquizPoints3', $myquizPoints3)
                ->with('myquizPoints4', $myquizPoints4)
                ->with('myquizPoints_before1', $myquizPoints_before1)
                ->with('myquizPoints_before2', $myquizPoints_before2)
                ->with('myquizPoints_before3', $myquizPoints_before3)
                ->with('myquizPoints_before4', $myquizPoints_before4)
                ->with('myquizPoints_this1', $myquizPoints_this1)
                ->with('myquizPoints_this2', $myquizPoints_this2)
                ->with('myquizPoints_this3', $myquizPoints_this3)
                ->with('myquizPoints_this4', $myquizPoints_this4)
                ->with('myquizPoints_last1', $myquizPoints_last1)
                ->with('myquizPoints_last2', $myquizPoints_last2)
                ->with('myquizPoints_last3', $myquizPoints_last3)
                ->with('myquizPoints_last4', $myquizPoints_last4)
                ->with('myquizPoints_all1', $myquizPoints_all1)
                ->with('myquizPoints_all2', $myquizPoints_all2)
                ->with('myquizPoints_all3', $myquizPoints_all3)
                ->with('myquizPoints_all4', $myquizPoints_all4)
                ->with('pay_year', $pay_year)
                ->with('pay_month', $pay_month)
                ->with('pay_date', $pay_date)
                ->with('pay_content', $pay_content)
                ->with('work_auth', $work_auth)
                ->with('advertise', $advertise);
        } else if (Auth::user()->isOverseer()) {
            $type = 1;$tagrgetpoint = 1;$school_rank_city = 0;$group_id=0;
            
            //get messages
            //get books
            $books = Books::get();

            $mybookcase_is_public = Auth::user()->mybookcase_is_public;
            
            $profile_is_public = Auth::user()->profile_is_public;
            $targetpercent_is_public = Auth::user()->targetpercent_is_public;
            $ranking_order_is_public = Auth::user()->ranking_order_is_public;

            ///////////////////
            $array_season = [];
           
            for ($i = 0; $i < 4; $i++) {
                $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
                $array_season_obj[$i] = MypageController::CurrentSeaon($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon($date);
            }

            /////////////////////

            $current_season = MypageController::CurrentSeaon(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'],$current_season, 1)->where('u.id', Auth::id())->first();
                     
           
            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
           $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".Auth::id()."' or ( users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1))) order by flag desc) as table1"; 

            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
            }
           
            for($i=0;$i<8;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $myavgPoints[$i][1]=$avg->sum;                        
                        }
                 }

                $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
            }
           
            $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
            $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";                
                       
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
          
            $sql[5]=$sql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                                
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
            $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
            $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
            $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]);
 
            //読書推進活動ランキング
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$current_season['begin_season']."' and '".$current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql[2]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints2 = MypageController::Get_RankPoint($sql[2]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql[4]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$array_season_obj[1]['begin_season']."' and '".$array_season_obj[1]['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_before[2]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_before[3]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_before[4]=$sql_temp1." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_before[2]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_before[3]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_before[4]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_this[2]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_this[3]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_this[4]=$sql_temp2." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_this[2]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_this[3]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_this[4]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '".Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_last[2]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_last[3]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_last[4]=$sql_temp3." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_last[2]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_last[3]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_last[4]);
            
            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                     group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_all[2]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_all[3]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_all[4]=$sql_temp4." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_all[2]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_all[3]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_all[4]);

            return view('mypage.overseer.mypage_overseer')
                ->with('page_info', $this->page_info)
                ->with('messages', $messages)
                ->with('array_season_obj', $array_season_obj)
                ->with('total_point', $total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('my_rank', $my_rank)
                ->with('waitOverseerBooks', $waitOverseerBooks)
                ->with('overseerBooks', $overseerBooks)
                ->with('demandBooks', $demandBooks)
                ->with('myBooks', $myBooks)
                ->with('age', $curage)
                ->with('type', $type)
                ->with('user', $user)
                ->with('targetpercent_is_public', $targetpercent_is_public)
                ->with('ranking_order_is_public', $ranking_order_is_public)
                ->with('profile_is_public', $profile_is_public)
                ->with('mybookcase_is_public', $mybookcase_is_public)
                ->with('wishBooks', $wishBooks)
                ->with('wishlists_is_public', $wishlists_is_public)
                ->with('passed_records_is_public', $passed_records_is_public)
                ->with('point_ranking_is_public', $point_ranking_is_public)
                ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
                ->with('register_record_is_public', $register_record_is_public)
                ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
                ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
                ->with('overseerbook_is_public', $overseerbook_is_public)
                ->with('tagrgetpoint',$tagrgetpoint)
                ->with('my_rank', $my_rank)
                ->with('total_point',$total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('cur_season', $cur_season)
                ->with('current_season', $current_season)
                ->with('current_user', $current_user)
                ->with('array_season', $array_season)
                ->with('myrankPoints3', $myrankPoints3)
                ->with('myrankPoints4', $myrankPoints4)
                ->with('myrankPoints5', $myrankPoints5)
                ->with('threemonthrankPoints3', $threemonthrankPoints3)
                ->with('threemonthrankPoints4', $threemonthrankPoints4)
                ->with('threemonthrankPoints5', $threemonthrankPoints5)
                ->with('allrankPoints3', $allrankPoints3)
                ->with('allrankPoints4', $allrankPoints4)
                ->with('allrankPoints5', $allrankPoints5)
                ->with('bottom',$bottom)
                ->with('myavgPoints',$myavgPoints)
                ->with('myquizPoints1', $myquizPoints1)
                ->with('myquizPoints2', $myquizPoints2)
                ->with('myquizPoints3', $myquizPoints3)
                ->with('myquizPoints4', $myquizPoints4)
                ->with('myquizPoints_before1', $myquizPoints_before1)
                ->with('myquizPoints_before2', $myquizPoints_before2)
                ->with('myquizPoints_before3', $myquizPoints_before3)
                ->with('myquizPoints_before4', $myquizPoints_before4)
                ->with('myquizPoints_this1', $myquizPoints_this1)
                ->with('myquizPoints_this2', $myquizPoints_this2)
                ->with('myquizPoints_this3', $myquizPoints_this3)
                ->with('myquizPoints_this4', $myquizPoints_this4)
                ->with('myquizPoints_last1', $myquizPoints_last1)
                ->with('myquizPoints_last2', $myquizPoints_last2)
                ->with('myquizPoints_last3', $myquizPoints_last3)
                ->with('myquizPoints_last4', $myquizPoints_last4)
                ->with('myquizPoints_all1', $myquizPoints_all1)
                ->with('myquizPoints_all2', $myquizPoints_all2)
                ->with('myquizPoints_all3', $myquizPoints_all3)
                ->with('myquizPoints_all4', $myquizPoints_all4)
                ->with('pay_year', $pay_year)
                ->with('pay_month', $pay_month)
                ->with('pay_date', $pay_date)
                ->with('pay_content', $pay_content)
                ->with('work_auth', $work_auth)
                ->with('advertise', $advertise);
        } else if (Auth::user()->isAuthor()) {
            $work_auth = "著者, ".$work_auth;
            $mywriteBooks = Books::where("firstname_nick", Auth::user()->firstname_nick)->where("lastname_nick", Auth::user()->lastname_nick)->get()->take(3);
            $mywriteChartBooks = Books::where("firstname_nick", Auth::user()->firstname_nick)->where("lastname_nick", Auth::user()->lastname_nick)->get();
            

            $type = 1;$tagrgetpoint = 1;$school_rank_city = 0;$group_id=0;
            
            //get messages
            //get books
            $books = Books::get();

            $mybookcase_is_public = Auth::user()->mybookcase_is_public;
            
            $profile_is_public = Auth::user()->profile_is_public;
            $targetpercent_is_public = Auth::user()->targetpercent_is_public;
            $ranking_order_is_public = Auth::user()->ranking_order_is_public;
            $author_readers_is_public = Auth::user()->author_readers_is_public;

            ///////////////////
            $array_season = [];

            for ($i = 0; $i < 4; $i++) {
                $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
                $array_season_obj[$i] = MypageController::CurrentSeaon($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon($date);
            }

            /////////////////////
            $current_season = MypageController::CurrentSeaon(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'], $current_season, 1)->where('u.id', Auth::id())->first();
                     
           
            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
           $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".Auth::id()."' or ( users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 

            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
            }
           
            for($i=0;$i<8;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $myavgPoints[$i][1]=$avg->sum;                        
                        }
                 }

                $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
            }

            $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
            $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";                
                       
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
          
            $sql[5]=$sql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                                
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
            $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
            $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
            $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]);

            //読書推進活動ランキング
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$current_season['begin_season']."' and '".$current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql[2]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints2 = MypageController::Get_RankPoint($sql[2]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql[4]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$array_season_obj[1]['begin_season']."' and '".$array_season_obj[1]['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_before[2]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_before[3]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_before[4]=$sql_temp1." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_before[2]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_before[3]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_before[4]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_this[2]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_this[3]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_this[4]=$sql_temp2." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_this[2]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_this[3]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_this[4]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '".Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_last[2]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_last[3]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_last[4]=$sql_temp3." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_last[2]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_last[3]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_last[4]);
            
            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                     group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_all[2]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_all[3]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_all[4]=$sql_temp4." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_all[2]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_all[3]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_all[4]);

            return view('mypage.author.mypage_author')
                ->with('page_info', $this->page_info)
                ->with('my_rank', $my_rank)
                ->with('array_season_obj', $array_season_obj)
                ->with('total_point', $total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('messages', $messages)
                ->with('waitOverseerBooks', $waitOverseerBooks)
                ->with('mywriteBooks', $mywriteBooks)
                ->with('mywriteChartBooks', $mywriteChartBooks)
                ->with('overseerBooks', $overseerBooks)
                ->with('myBooks', $myBooks)
                ->with('age', $curage)
                ->with('mybookcase_is_public', $mybookcase_is_public)
                ->with('demandBooks', $demandBooks)
                ->with('wishBooks', $wishBooks)
                ->with('wishlists_is_public', $wishlists_is_public)
                ->with('passed_records_is_public', $passed_records_is_public)
                ->with('point_ranking_is_public', $point_ranking_is_public)
                ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
                ->with('register_record_is_public', $register_record_is_public)
                ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
                ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
                ->with('overseerbook_is_public', $overseerbook_is_public)
                ->with('author_readers_is_public', $author_readers_is_public)
                ->with('type', $type)
                ->with('user', $user)
                ->with('targetpercent_is_public', $targetpercent_is_public)
                ->with('ranking_order_is_public', $ranking_order_is_public)
                ->with('profile_is_public', $profile_is_public)
                ->with('tagrgetpoint',$tagrgetpoint)
                ->with('my_rank', $my_rank)
                ->with('total_point',$total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('cur_season', $cur_season)
                ->with('current_season', $current_season)
                ->with('current_user', $current_user)
                ->with('array_season', $array_season)
                ->with('myrankPoints3', $myrankPoints3)
                ->with('myrankPoints4', $myrankPoints4)
                ->with('myrankPoints5', $myrankPoints5)
                ->with('threemonthrankPoints3', $threemonthrankPoints3)
                ->with('threemonthrankPoints4', $threemonthrankPoints4)
                ->with('threemonthrankPoints5', $threemonthrankPoints5)
                ->with('allrankPoints3', $allrankPoints3)
                ->with('allrankPoints4', $allrankPoints4)
                ->with('allrankPoints5', $allrankPoints5)
                ->with('bottom',$bottom)
                ->with('myavgPoints',$myavgPoints)
                ->with('myquizPoints1', $myquizPoints1)
                ->with('myquizPoints2', $myquizPoints2)
                ->with('myquizPoints3', $myquizPoints3)
                ->with('myquizPoints4', $myquizPoints4)
                ->with('myquizPoints_before1', $myquizPoints_before1)
                ->with('myquizPoints_before2', $myquizPoints_before2)
                ->with('myquizPoints_before3', $myquizPoints_before3)
                ->with('myquizPoints_before4', $myquizPoints_before4)
                ->with('myquizPoints_this1', $myquizPoints_this1)
                ->with('myquizPoints_this2', $myquizPoints_this2)
                ->with('myquizPoints_this3', $myquizPoints_this3)
                ->with('myquizPoints_this4', $myquizPoints_this4)
                ->with('myquizPoints_last1', $myquizPoints_last1)
                ->with('myquizPoints_last2', $myquizPoints_last2)
                ->with('myquizPoints_last3', $myquizPoints_last3)
                ->with('myquizPoints_last4', $myquizPoints_last4)
                ->with('myquizPoints_all1', $myquizPoints_all1)
                ->with('myquizPoints_all2', $myquizPoints_all2)
                ->with('myquizPoints_all3', $myquizPoints_all3)
                ->with('myquizPoints_all4', $myquizPoints_all4)
                ->with('pay_year', $pay_year)
                ->with('pay_month', $pay_month)
                ->with('pay_date', $pay_date)
                ->with('pay_content', $pay_content)
                ->with('work_auth', $work_auth)
                ->with('advertise', $advertise);
        } else if (Auth::user()->isPupil()) {
            $type = 0;$tagrgetpoint = 1;$school_rank_city = 0;$group_id=0;$grade =0;
            $curage = Auth::User()->age();
            $class = DB::table("users")
            ->select('org.group_type', 'classes.grade')
            ->join('classes','classes.id','=','users.org_id')
            ->join('users as org', 'classes.group_id',DB::raw('org.id'))
            ->where('users.role','=', config('consts')['USER']['ROLE']["PUPIL"]) 
            ->where('users.id','=',Auth::id())
            ->first();
            if(Auth::user()->active == 1 && isset($class) && $class !== null){

                $type = $class->group_type;
                $grade = $class->grade;

                if($type ==0){  //小学生
                    if($grade == 1) $tagrgetpoint = 7;
                    elseif($grade == 2) $tagrgetpoint = 13;
                    elseif($grade == 3) $tagrgetpoint = 20;
                    elseif($grade == 4) $tagrgetpoint = 35;   
                    elseif($grade == 5) $tagrgetpoint = 50;
                    elseif($grade == 6) $tagrgetpoint = 70;
                    else $tagrgetpoint = 7; 
                }

                $group_id = Auth::user()->PupilsClass->group_id;
                $groups = User::where('role', config('consts')['USER']['ROLE']['GROUP'])
                    ->where('address1', DB::raw('(SELECT address1 FROM users WHERE users.id = "'.$group_id.'")'))
                    ->where('address2', DB::raw('(SELECT address2 FROM users WHERE users.id = "'.$group_id.'")'))
                    ->where('group_type', DB::raw('(SELECT group_type FROM users WHERE users.id = "'.$group_id.'")'))
                    ->where('active', 1)
                    ->get();
                $current_sum = MypageController::Calc_school_avg($group_id, 'all');
                $rank = 0;
                for ($i = 0; $i < count($groups); $i ++){
                    if ($groups[$i]->id == $group_id) continue;
                    if ($current_sum >= MypageController::Calc_school_avg($groups[$i]->id, 'all')) $rank ++;
                }
               
                //$school_rank_city = (count($groups) - $rank) . "/" . count($groups);
                $school_rank_city = (count($groups) - $rank) ;

            }
            
            //get messages
            //get books
            $books = Books::get();

            $mybookcase_is_public = Auth::user()->mybookcase_is_public;
            
            $profile_is_public = Auth::user()->profile_is_public;
            $targetpercent_is_public = Auth::user()->targetpercent_is_public;
            $ranking_order_is_public = Auth::user()->ranking_order_is_public;

            ///////////////////
            $array_season = [];

            for ($i = 0; $i < 4; $i++) {
                $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
                $array_season_obj[$i] = MypageController::CurrentSeaon_Pupil($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon_Pupil($date);
            }

            /////////////////////
            $current_season = MypageController::CurrentSeaon_Pupil(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'], $current_season, Auth::user()->role)->where('u.id', Auth::id())->first();
            if(Auth::user()->active == 1){ //学生
                $myquizPoints1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',$current_season['begin_season'])
                    ->where('created_date','<=',$current_season['end_season'])
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();
               
                $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                    "created_date between '".$current_season['begin_season']."' and '". $current_season['end_season'].
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ";
                $sql[3]=  "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";

                            // "(select classes.id
                            // from classes  inner join
                            //     (select users.id,table2.*
                            //      from users,
                            //         (select users.address1,users.address2,users.group_type,table1.*
                            //             from users,(select classes.grade,classes.group_id,classes.year from classes 
                            //                                     where classes.id=(select users.org_id from users where users.id='".
                            //                                         Auth::id()."')) as table1
                            //             where users.id=table1.group_id) as table2
                            //      where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                            //      "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                            // ") as table1";
                   
                $sql[4]=  "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";

                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //          from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.grade,classes.group_id,classes.year from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             Auth::id()."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //          where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                        //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                        // ") as table1";
                    
                $sql[5]= "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";

                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //          from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             Auth::id()."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //          where  users.group_type=table2.group_type and ".
                        //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                        // ") as table1";

                $myquizPoints2 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
                $myquizPoints3 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
                $myquizPoints4 = MypageController::Get_RankPoint($sql_temp.$sql[5]);

                $myquizPoints_before1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                    ->where('created_date','<=',$array_season_obj[1]['end_season'])
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();
               
                $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                    "created_date between '".$array_season_obj[1]['begin_season']."' and '". $array_season_obj[1]['end_season'].
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ";

                $myquizPoints_before2 = MypageController::Get_RankPoint($sql_temp1." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
                $myquizPoints_before3 = MypageController::Get_RankPoint($sql_temp1." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
                $myquizPoints_before4 = MypageController::Get_RankPoint($sql_temp1.$sql[5]);

                $myquizPoints_this1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                    ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();
               
                $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ";

                $myquizPoints_this2 = MypageController::Get_RankPoint($sql_temp2." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
                $myquizPoints_this3 = MypageController::Get_RankPoint($sql_temp2." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
                $myquizPoints_this4 = MypageController::Get_RankPoint($sql_temp2.$sql[5]);

                $myquizPoints_last1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                    ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();
               
                $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ";

                $myquizPoints_last2 = MypageController::Get_RankPoint($sql_temp3." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
                $myquizPoints_last3 = MypageController::Get_RankPoint($sql_temp3." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
                $myquizPoints_last4 = MypageController::Get_RankPoint($sql_temp3.$sql[5]);

                $myquizPoints_all1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();
               
                $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) ".
                    " group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ";

                $myquizPoints_all2 = MypageController::Get_RankPoint($sql_temp4." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
                $myquizPoints_all3 = MypageController::Get_RankPoint($sql_temp4." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
                $myquizPoints_all4 = MypageController::Get_RankPoint($sql_temp4.$sql[5]);
            }else{
                $myquizPoints1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',$current_season['begin_season'])
                    ->where('created_date','<=',$current_season['end_season'])
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();


                $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                        and created_date between '".$current_season['begin_season']."' and '".$current_season['end_season']."' group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".Auth::id()."' or (";

                $sql[2]=$sql_temp." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                        
                $sql[3]=$sql_temp." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $sql[4]=$sql_temp." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $myquizPoints2 = MypageController::Get_RankPoint($sql[2]);
                $myquizPoints3 = MypageController::Get_RankPoint($sql[3]);
                $myquizPoints4 = MypageController::Get_RankPoint($sql[4]);

                $myquizPoints_before1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                    ->where('created_date','<=',$array_season_obj[1]['end_season'])
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();

                $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                        and created_date between '".$array_season_obj[1]['begin_season']."' and '".$array_season_obj[1]['end_season']."' group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".Auth::id()."' or (";

                $sql_before[2]=$sql_temp1." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                        
                $sql_before[3]=$sql_temp1." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $sql_before[4]=$sql_temp1." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $myquizPoints_before2 = MypageController::Get_RankPoint($sql_before[2]);
                $myquizPoints_before3 = MypageController::Get_RankPoint($sql_before[3]);
                $myquizPoints_before4 = MypageController::Get_RankPoint($sql_before[4]);

                $myquizPoints_this1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                    ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();

                $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                        and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".Auth::id()."' or (";

                $sql_this[2]=$sql_temp2." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                        
                $sql_this[3]=$sql_temp2." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $sql_this[4]=$sql_temp2." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $myquizPoints_this2 = MypageController::Get_RankPoint($sql_this[2]);
                $myquizPoints_this3 = MypageController::Get_RankPoint($sql_this[3]);
                $myquizPoints_this4 = MypageController::Get_RankPoint($sql_this[4]);

                $myquizPoints_last1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                    ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();

                $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                        and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '".Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".Auth::id()."' or (";

                $sql_last[2]=$sql_temp3." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                        
                $sql_last[3]=$sql_temp3." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $sql_last[4]=$sql_temp3." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $myquizPoints_last2 = MypageController::Get_RankPoint($sql_last[2]);
                $myquizPoints_last3 = MypageController::Get_RankPoint($sql_last[3]);
                $myquizPoints_last4 = MypageController::Get_RankPoint($sql_last[4]);
                
                $myquizPoints_all1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();

                $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                         group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".Auth::id()."' or (";

                $sql_all[2]=$sql_temp4." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                        
                $sql_all[3]=$sql_temp4." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $sql_all[4]=$sql_temp4." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $myquizPoints_all2 = MypageController::Get_RankPoint($sql_all[2]);
                $myquizPoints_all3 = MypageController::Get_RankPoint($sql_all[3]);
                $myquizPoints_all4 = MypageController::Get_RankPoint($sql_all[4]);
            }
            if(Auth::user()->active == 1){ //学生
                $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
                    
                 $sql_average_end="'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                    ") as table1";
                
                for ($k = 0; $k < 8; $k++) {
                    $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                    $cur_season[7-$k] = MypageController::CurrentSeaon_Pupil($date);
                    $sql_term1[7-$k]=$sql_average_front."created_date between '".$cur_season[7-$k]['begin_season']."' and '". $cur_season[7-$k]['end_season'].$sql_average_end;
                }
                
                for($i=0;$i<8;$i++){
                   $sum=0; 
                   $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
                   $myavgPoints[$i][1] = 0;
                     foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $mypercent  = floor($avg->sum * 100 / $tagrgetpoint * 100) / 100;
                            $myavgPoints[$i][1] = $mypercent;                        
                        }
                     }
                     $schoolpercent = 0;
                     if(sizeof($temp_avg) != 0){
                        $schoolpercent = floor($sum/sizeof($temp_avg) * 100 / $tagrgetpoint * 100) / 100;
                    }
                    $myavgPoints[$i][0] = $schoolpercent;

                }
       
                $sql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";
                $myrankPoints1 = MypageController::Get_RankPoint($sql[1]);

                $threemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";
                $threemonthrankPoints1 = MypageController::Get_RankPoint($threemonthsql[1]);

                $allpointsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    " group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";
                $allrankPoints1 = MypageController::Get_RankPoint($allpointsql[1]);

                $sql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in (select classes.id as org_id
                            from classes
                            inner join
                            (select classes.year,classes.grade,classes.group_id
                            from classes
                            where classes.id=(select users.org_id
                            from users
                            where users.id='".
                            Auth::id()."')) as table2
                            on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                $myrankPoints2 = MypageController::Get_RankPoint($sql[2]);

                $threemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in (select classes.id as org_id
                            from classes
                            inner join
                            (select classes.year,classes.grade,classes.group_id
                            from classes
                            where classes.id=(select users.org_id
                            from users
                            where users.id='".
                            Auth::id()."')) as table2
                            on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                $threemonthrankPoints2 = MypageController::Get_RankPoint($threemonthsql[2]);

                $allpointsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in (select classes.id as org_id
                            from classes
                            inner join
                            (select classes.year,classes.grade,classes.group_id
                            from classes
                            where classes.id=(select users.org_id
                            from users
                            where users.id='".
                            Auth::id()."')) as table2
                            on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                $allrankPoints2 = MypageController::Get_RankPoint($allpointsql[2]);

                $grade = Auth::user()->ClassOfPupil->grade;
                $grade_odds = $grade % 2;
               
                //if($grade == 0){ //学年 0
                    $sql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //          from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             Auth::id()."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //          where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                        //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $threemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //          from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             Auth::id()."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //          where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                        //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $allpointsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                        "group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //          from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             Auth::id()."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //          where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                        //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                
                $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
                $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonthsql[3]);
                $allrankPoints3 = MypageController::Get_RankPoint($allpointsql[3]);
                
                //if($grade == 0){ //学年 0       
                $sql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and ".
                    "users.org_id in ".
                    "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                    //     "(select classes.id
                    //     from classes  inner join
                    //         (select users.id,table2.*
                    //          from users,
                    //             (select users.address1,users.address2,users.group_type,table1.*
                    //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                    //                                         where classes.id=(select users.org_id from users where users.id='".
                    //                                             Auth::id()."')) as table1
                    //                 where users.id=table1.group_id) as table2
                    //          where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                    //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    // ") as table1";
                    $threemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and ".
                    "users.org_id in ".
                    "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                    //     "(select classes.id
                    //     from classes  inner join
                    //         (select users.id,table2.*
                    //          from users,
                    //             (select users.address1,users.address2,users.group_type,table1.*
                    //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                    //                                         where classes.id=(select users.org_id from users where users.id='".
                    //                                             Auth::id()."')) as table1
                    //                 where users.id=table1.group_id) as table2
                    //          where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                    //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    // ") as table1";
                    $allpointsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and ".
                    "users.org_id in ".
                    "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                    //     "(select classes.id
                    //     from classes  inner join
                    //         (select users.id,table2.*
                    //          from users,
                    //             (select users.address1,users.address2,users.group_type,table1.*
                    //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                    //                                         where classes.id=(select users.org_id from users where users.id='".
                    //                                             Auth::id()."')) as table1
                    //                 where users.id=table1.group_id) as table2
                    //          where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                    //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    // ") as table1";
                
                $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
                $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonthsql[4]);
                $allrankPoints4 = MypageController::Get_RankPoint($allpointsql[4]);

                //if($grade == 0){ //学年 0  
                    $sql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";

                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //          from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             Auth::id()."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //          where  users.group_type=table2.group_type and ".
                        //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $threemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";

                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //          from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             Auth::id()."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //          where  users.group_type=table2.group_type and ".
                        //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $allpointsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                        "group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //          from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             Auth::id()."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //          where  users.group_type=table2.group_type and ".
                        //          "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                
                $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);
                $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonthsql[5]);
                $allrankPoints5 = MypageController::Get_RankPoint($allpointsql[5]);
               

                return view('mypage.pupil.mypage_pupil')
                    ->with('page_info', $this->page_info)
                    ->with('messages', $messages)
                    ->with('array_season_obj', $array_season_obj)
                    ->with('books', $books)
                    ->with('type',$type)
                    ->with('grade',$grade)
                    ->with('tagrgetpoint',$tagrgetpoint)
                    ->with('age', $curage)
                    ->with('my_rank', $my_rank)
                    ->with('total_point',$total_point)
                    ->with('my_addpoint', $my_addpoint)
                    ->with('school_rank_city', $school_rank_city)
                    ->with('cur_season', $cur_season)
                    ->with('current_season', $current_season)
                    ->with('current_user', $current_user)
                    ->with('array_season', $array_season)
                    ->with('mybookcase_is_public', $mybookcase_is_public)
                    ->with('myBooks', $myBooks)
                    ->with('wishlists_is_public', $wishlists_is_public)
                    ->with('wishBooks', $wishBooks)
                    ->with('user', $user)
                    ->with('group_id', $group_id)
                    ->with('myavgPoints',$myavgPoints)
                    ->with('myrankPoints1', $myrankPoints1)
                    ->with('myrankPoints2', $myrankPoints2)
                    ->with('myrankPoints3', $myrankPoints3)
                    ->with('myrankPoints4', $myrankPoints4)
                    ->with('myrankPoints5', $myrankPoints5)
                    ->with('threemonthrankPoints1', $threemonthrankPoints1)
                    ->with('threemonthrankPoints2', $threemonthrankPoints2)
                    ->with('threemonthrankPoints3', $threemonthrankPoints3)
                    ->with('threemonthrankPoints4', $threemonthrankPoints4)
                    ->with('threemonthrankPoints5', $threemonthrankPoints5)
                    ->with('allrankPoints1', $allrankPoints1)
                    ->with('allrankPoints2', $allrankPoints2)
                    ->with('allrankPoints3', $allrankPoints3)
                    ->with('allrankPoints4', $allrankPoints4)
                    ->with('allrankPoints5', $allrankPoints5)
                    ->with('profile_is_public', $profile_is_public)
                    ->with('targetpercent_is_public', $targetpercent_is_public)
                    ->with('confirm', $request->input('confirm'))
                    ->with('ranking_order_is_public', $ranking_order_is_public)
                    ->with('passed_records_is_public', $passed_records_is_public)
                    ->with('point_ranking_is_public', $point_ranking_is_public)
                    ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
                    ->with('register_record_is_public', $register_record_is_public)
                    ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
                    ->with('bottom',$bottom)
                    ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
                    ->with('myquizPoints1', $myquizPoints1)
                    ->with('myquizPoints2', $myquizPoints2)
                    ->with('myquizPoints3', $myquizPoints3)
                    ->with('myquizPoints4', $myquizPoints4)
                    ->with('myquizPoints_before1', $myquizPoints_before1)
                    ->with('myquizPoints_before2', $myquizPoints_before2)
                    ->with('myquizPoints_before3', $myquizPoints_before3)
                    ->with('myquizPoints_before4', $myquizPoints_before4)
                    ->with('myquizPoints_this1', $myquizPoints_this1)
                    ->with('myquizPoints_this2', $myquizPoints_this2)
                    ->with('myquizPoints_this3', $myquizPoints_this3)
                    ->with('myquizPoints_this4', $myquizPoints_this4)
                    ->with('myquizPoints_last1', $myquizPoints_last1)
                    ->with('myquizPoints_last2', $myquizPoints_last2)
                    ->with('myquizPoints_last3', $myquizPoints_last3)
                    ->with('myquizPoints_last4', $myquizPoints_last4)
                    ->with('myquizPoints_all1', $myquizPoints_all1)
                    ->with('myquizPoints_all2', $myquizPoints_all2)
                    ->with('myquizPoints_all3', $myquizPoints_all3)
                    ->with('myquizPoints_all4', $myquizPoints_all4)
                    ->with('pay_year', $pay_year)
                    ->with('pay_month', $pay_month)
                    ->with('pay_date', $pay_date)
                    ->with('pay_content', $pay_content)
                    ->with('work_auth', $work_auth)
                    ->with('advertise', $advertise);
                }else{
                $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                left join (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
                $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".Auth::id()."' or (users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 


                for ($k = 1; $k < 9; $k++) {
                    $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                    $cur_season[8-$k] = MypageController::CurrentSeaon_Pupil($date);
                    $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
                }
               
                for($i=0;$i<8;$i++){
                   $sum=0; 
                   $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
      
                     foreach ($temp_avg as $ii => $avg) {
                            $sum = $sum+($avg->sum);
                            if($avg->flag=='1'){
                                $myavgPoints[$i][1]=$avg->sum;                        
                            }
                     }

                    $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
                }

                $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
                $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

                $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";
                $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                    and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";
                $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";                
                           
                $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                
                $sql[4]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                                (select users.address1
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                                (select users.address1
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
              
                $sql[5]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                                    
                $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
                $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
                $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
                $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
                $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
                $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
                $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
                $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
                $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]); 

                return view('mypage.pupil.mypage_pupil')
                    ->with('page_info', $this->page_info)
                    ->with('messages', $messages)
                    ->with('array_season_obj', $array_season_obj)
                    ->with('books', $books)
                    ->with('type',$type)
                    ->with('grade',$grade)
                    ->with('tagrgetpoint',$tagrgetpoint)
                    ->with('age', $curage)
                    ->with('my_rank', $my_rank)
                    ->with('total_point',$total_point)
                    ->with('my_addpoint', $my_addpoint)
                    ->with('school_rank_city', $school_rank_city)
                    ->with('cur_season', $cur_season)
                    ->with('current_season', $current_season)
                    ->with('current_user', $current_user)
                    ->with('array_season', $array_season)
                    ->with('mybookcase_is_public', $mybookcase_is_public)
                    ->with('myBooks', $myBooks)
                    ->with('wishlists_is_public', $wishlists_is_public)
                    ->with('wishBooks', $wishBooks)
                    ->with('user', $user)
                    ->with('group_id', $group_id)
                    ->with('myavgPoints',$myavgPoints)
                    ->with('myrankPoints3', $myrankPoints3)
                    ->with('myrankPoints4', $myrankPoints4)
                    ->with('myrankPoints5', $myrankPoints5)
                    ->with('threemonthrankPoints3', $threemonthrankPoints3)
                    ->with('threemonthrankPoints4', $threemonthrankPoints4)
                    ->with('threemonthrankPoints5', $threemonthrankPoints5)
                    ->with('allrankPoints3', $allrankPoints3)
                    ->with('allrankPoints4', $allrankPoints4)
                    ->with('allrankPoints5', $allrankPoints5)
                    ->with('profile_is_public', $profile_is_public)
                    ->with('targetpercent_is_public', $targetpercent_is_public)
                    ->with('confirm', $request->input('confirm'))
                    ->with('ranking_order_is_public', $ranking_order_is_public)
                    ->with('passed_records_is_public', $passed_records_is_public)
                    ->with('point_ranking_is_public', $point_ranking_is_public)
                    ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
                    ->with('register_record_is_public', $register_record_is_public)
                    ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
                    ->with('bottom',$bottom)
                    ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
                    ->with('myquizPoints1', $myquizPoints1)
                    ->with('myquizPoints2', $myquizPoints2)
                    ->with('myquizPoints3', $myquizPoints3)
                    ->with('myquizPoints4', $myquizPoints4)
                    ->with('myquizPoints_before1', $myquizPoints_before1)
                    ->with('myquizPoints_before2', $myquizPoints_before2)
                    ->with('myquizPoints_before3', $myquizPoints_before3)
                    ->with('myquizPoints_before4', $myquizPoints_before4)
                    ->with('myquizPoints_this1', $myquizPoints_this1)
                    ->with('myquizPoints_this2', $myquizPoints_this2)
                    ->with('myquizPoints_this3', $myquizPoints_this3)
                    ->with('myquizPoints_this4', $myquizPoints_this4)
                    ->with('myquizPoints_last1', $myquizPoints_last1)
                    ->with('myquizPoints_last2', $myquizPoints_last2)
                    ->with('myquizPoints_last3', $myquizPoints_last3)
                    ->with('myquizPoints_last4', $myquizPoints_last4)
                    ->with('myquizPoints_all1', $myquizPoints_all1)
                    ->with('myquizPoints_all2', $myquizPoints_all2)
                    ->with('myquizPoints_all3', $myquizPoints_all3)
                    ->with('myquizPoints_all4', $myquizPoints_all4)
                    ->with('pay_year', $pay_year)
                    ->with('pay_month', $pay_month)
                    ->with('pay_date', $pay_date)
                    ->with('pay_content', $pay_content)
                    ->with('work_auth', $work_auth)
                    ->with('advertise', $advertise);
                }
        }else  if (Auth::user()->isGeneral()) {
            $type = 1;$tagrgetpoint = 1;$school_rank_city = 0;$group_id=0;
            
            //get messages
            //get books
            $books = Books::get();

            

            $mybookcase_is_public = Auth::user()->mybookcase_is_public;
            
            $profile_is_public = Auth::user()->profile_is_public;
            $targetpercent_is_public = Auth::user()->targetpercent_is_public;
            $ranking_order_is_public = Auth::user()->ranking_order_is_public;

            ///////////////////
            $array_season = [];
           
            for ($i = 0; $i < 4; $i++) {
                $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
                $array_season_obj[$i] = MypageController::CurrentSeaon($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon($date);
            }

            $current_season = MypageController::CurrentSeaon(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'], $current_season, 1)->where('u.id', Auth::id())->first();
                     
            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
            $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".Auth::id()."' or (users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 

            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
            }
           
            for($i=0;$i<8;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $myavgPoints[$i][1]=$avg->sum;                        
                        }
                 }
                $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
            }

            $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
            $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                       where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";                
                       
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where  users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where  users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and  users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where  users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
          
            $sql[5]=$sql_temp." users.id in (select users.id from users
                            where  users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                                
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]);
            $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
            $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
            $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]); 
            //読書推進活動ランキング
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();


            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$current_season['begin_season']."' and '".$current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql[2]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints2 = MypageController::Get_RankPoint($sql[2]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql[4]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$array_season_obj[1]['begin_season']."' and '".$array_season_obj[1]['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_before[2]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_before[3]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_before[4]=$sql_temp1." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_before[2]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_before[3]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_before[4]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_this[2]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_this[3]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_this[4]=$sql_temp2." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_this[2]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_this[3]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_this[4]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '".Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_last[2]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_last[3]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_last[4]=$sql_temp3." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_last[2]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_last[3]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_last[4]);
            
            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                     group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_all[2]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql_all[3]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql_all[4]=$sql_temp4." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_all[2]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_all[3]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_all[4]);

            return view('mypage.personal.top.personal_top')
                ->with('page_info', $this->page_info)
                ->with('messages', $messages)
                ->with('array_season_obj', $array_season_obj)
                ->with('books', $books)
                ->with('type',$type)
                ->with('tagrgetpoint',$tagrgetpoint)
                ->with('age', $curage)
                ->with('my_rank', $my_rank)
                ->with('total_point',$total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('school_rank_city', $school_rank_city)
                ->with('cur_season', $cur_season)
                ->with('current_season', $current_season)
                ->with('current_user', $current_user)
                ->with('array_season', $array_season)
                ->with('mybookcase_is_public', $mybookcase_is_public)
                ->with('myBooks', $myBooks)
                ->with('wishlists_is_public', $wishlists_is_public)
                ->with('wishBooks', $wishBooks)
                ->with('user', $user)
                ->with('group_id', $group_id)
                ->with('myrankPoints3', $myrankPoints3)
                ->with('myrankPoints4', $myrankPoints4)
                ->with('myrankPoints5', $myrankPoints5)
                ->with('threemonthrankPoints3', $threemonthrankPoints3)
                ->with('threemonthrankPoints4', $threemonthrankPoints4)
                ->with('threemonthrankPoints5', $threemonthrankPoints5)
                ->with('allrankPoints3', $allrankPoints3)
                ->with('allrankPoints4', $allrankPoints4)
                ->with('allrankPoints5', $allrankPoints5)
                ->with('myavgPoints',$myavgPoints)
                ->with('profile_is_public', $profile_is_public)
                ->with('targetpercent_is_public', $targetpercent_is_public)
                ->with('confirm', $request->input('confirm'))
                ->with('ranking_order_is_public', $ranking_order_is_public)
                ->with('passed_records_is_public', $passed_records_is_public)
                ->with('point_ranking_is_public', $point_ranking_is_public)
                ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
                ->with('register_record_is_public', $register_record_is_public)
                ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
                ->with('bottom',$bottom)
                ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
                ->with('myquizPoints1', $myquizPoints1)
                ->with('myquizPoints2', $myquizPoints2)
                ->with('myquizPoints3', $myquizPoints3)
                ->with('myquizPoints4', $myquizPoints4)
                ->with('myquizPoints_before1', $myquizPoints_before1)
                ->with('myquizPoints_before2', $myquizPoints_before2)
                ->with('myquizPoints_before3', $myquizPoints_before3)
                ->with('myquizPoints_before4', $myquizPoints_before4)
                ->with('myquizPoints_this1', $myquizPoints_this1)
                ->with('myquizPoints_this2', $myquizPoints_this2)
                ->with('myquizPoints_this3', $myquizPoints_this3)
                ->with('myquizPoints_this4', $myquizPoints_this4)
                ->with('myquizPoints_last1', $myquizPoints_last1)
                ->with('myquizPoints_last2', $myquizPoints_last2)
                ->with('myquizPoints_last3', $myquizPoints_last3)
                ->with('myquizPoints_last4', $myquizPoints_last4)
                ->with('myquizPoints_all1', $myquizPoints_all1)
                ->with('myquizPoints_all2', $myquizPoints_all2)
                ->with('myquizPoints_all3', $myquizPoints_all3)
                ->with('myquizPoints_all4', $myquizPoints_all4)
                ->with('pay_year', $pay_year)
                ->with('pay_month', $pay_month)
                ->with('pay_date', $pay_date)
                ->with('pay_content', $pay_content)
                ->with('work_auth', $work_auth)
                ->with('advertise', $advertise);
        }
    }
    public function bottom(){
        //        if(!Auth::user()->isGeneral()){
        //            return Redirect::to('/');
        //        }
        $this->page_info['subside'] = 'bottom';

        $passed_records_is_public = Auth::user()->passed_records_is_public;
        $register_point_ranking_is_public = Auth::user()->register_point_ranking_is_public;
        $register_record_is_public = Auth::user()->register_record_is_public;

        return view('mypage.personal.top.bottom')
            ->with('passed_records_is_public', $passed_records_is_public)
            ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
            ->with('register_record_is_public', $register_record_is_public)
            ->with('page_info', $this->page_info);
    }
    private function School_rank($groupId, $period, $range){

        if ($range == 'city'){
            $groups = User::where('role', config('consts')['USER']['ROLE']['GROUP'])
                ->where('address1', DB::raw('(SELECT address1 FROM users WHERE users.id = "'.$groupId.'")'))
                ->where('address2', DB::raw('(SELECT address2 FROM users WHERE users.id = "'.$groupId.'")'))
                ->where('group_type', DB::raw('(SELECT group_type FROM users WHERE users.id = "'.$groupId.'")'))
                ->where('active', 1)
                ->get();
        }

        else if ($range == 'province'){
            $groups = User::where('role', config('consts')['USER']['ROLE']['GROUP'])
                ->where('address1', DB::raw('(SELECT address1 FROM users WHERE users.id = "'.$groupId.'")'))
                ->where('group_type', DB::raw('(SELECT group_type FROM users WHERE users.id = "'.$groupId.'")'))
                ->where('active', 1)
                ->get();
        }

        else if ($range == 'overall'){
            $groups = User::where('role', config('consts')['USER']['ROLE']['GROUP'])
                ->where('group_type', DB::raw('(SELECT group_type FROM users WHERE users.id = "'.$groupId.'")'))
                ->where('active', 1)
                ->get();
        }

        $current_sum = MypageController::Calc_school_avg($groupId, $period);
        $rank = 0;
        for ($i = 0; $i < count($groups); $i ++){
            if ($groups[$i]->id == $groupId) continue;
            if ($current_sum >= MypageController::Calc_school_avg($groups[$i]->id, $period)) $rank ++;
        }
        return (count($groups) - $rank) . "/" . count($groups);
    }
    /* Calculate school average point and rank schools according to the range*/
    private function Calc_school_avg($groupId, $period){
        //      if ($period == 'all')
        //          $classes = User::find($groupId)->classes;
        //      else if ($period == 'year-1')
        //          $classes = User::find($groupId)->classes->where('year', Date('Y') - 1);
        //      else if ($period == 'year-2')
        //          $classes = User::find($groupId)->classes->where('year', Date('Y') - 2);
        //      else if ($period == 'year-3')
        //          $classes = User::find($groupId)->classes->where('year', Date('Y') - 3);
        //      else if ($period == 'year-4')
        //          $classes = User::find($groupId)->classes->where('year', Date('Y') - 4);
        //      else if ($period == 'year-5')
        //          $classes = User::find($groupId)->classes->where('year', Date('Y') - 5);
        //      else $classes = User::find($groupId)->classes->where('year', Date('Y'));
        $classes = User::find($groupId)->classes;
        if (count($classes) == 0)return 0;


        $k = 0;
        for ($i = 0; $i < count($classes); $i ++){
            for ($j = 0; $j < count($classes[$i]->Pupils); $j ++) 
                $pupils[$k++] = $classes[$i]->Pupils[$j];
        }

        if ($k == 0) return 0;
        $sum = 0;
        $current_season = MypageController::CurrentSeaon_Pupil(now());
        for ($i = 0; $i < count($pupils); $i ++){

            if ($period == 'year'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['begin_thisyear'],4,1,$current_season['end_thisyear'],3,31);
            }
            else if ($period == 'spring'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['begin_thisyear'],4,1,$current_season['begin_thisyear'],6,30);
            }
            else if ($period == 'summer'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['begin_thisyear'],7,1,$current_season['begin_thisyear'],9,30);
            }
            else if ($period == 'autumn'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['begin_thisyear'],10,1,$current_season['begin_thisyear'],12,31);
            }
            else if ($period == 'winter'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['end_thisyear'],1,1,$current_season['end_thisyear'],3,31);
            }
            else if ($period == 'all'){
                $quizes = $pupils[$i]->SuccessPoints;
            }
            else if ($period == 'year-1'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['begin_thisyear']-1,4,1,$current_season['end_thisyear']-1,3,31);
            }
            else if ($period == 'year-2'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['begin_thisyear']-2,4,1,$current_season['end_thisyear']-2,3,31);
            }
            else if ($period == 'year-3'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['begin_thisyear']-3,4,1,$current_season['end_thisyear']-3,3,31);
            }
            else if ($period == 'year-4'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['begin_thisyear']-4,4,1,$current_season['end_thisyear']-4,3,31);
            }
            else if ($period == 'year-5'){
                $quizes = $pupils[$i]->SuccessQuizPoints1($current_season['begin_thisyear']-5,4,1,$current_season['end_thisyear']-5,3,31);
            }
            if (count($quizes) == 0) continue;
            $sum += $quizes->sum('point'); 
        }

        if (count($pupils) == 0) $sum = 0;
        else $sum /= count($pupils);

        return round($sum, 2);

    }

    public function setPublic(Request $request, $type){
        $user = Auth::user();
        $user[$type] = !$user[$type];
        $user->save();
        return response(array('type' => $type, 'status' => $user[$type]));
    }

    public function SetQuizPublic(Request $request, $type, $id){
        $userquiz = UserQuiz::find($id);
        $userquiz[$type] = !$userquiz[$type];
        $userquiz->save();
        return response(array('type' => $type, 'status' => $userquiz[$type]));
    }

    public function SetWishlistPublic(Request $request, $type, $id){
        $wishLists = WishLists::find($id);
        $wishLists[$type] = !$wishLists[$type];
        $wishLists->save();
        return response(array('type' => $type, 'status' => $wishLists[$type]));
    }
    public function CurrentSeaon($date){
            //$current_season = [];
        if ($date >= Carbon::create((Date("Y")), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年春期' . '4月1日';
            $current_season['to'] = Date('Y') . '年' . '6月30日';
            $current_season['term'] = 0; // this year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '4.1';
            $current_season['to_num'] = Date('Y') . '.' . '6.30';
            $current_season['begin_season']=Carbon::create((Date("Y")), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y') + 1;
        }else if ($date >= Carbon::create((Date("Y")), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年夏期' . '7月1日';
            $current_season['to'] = Date('Y') . '年' . '9月30日';
            $current_season['term'] = 1; // this year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '7.1';
            $current_season['to_num'] = Date('Y') . '.' . '9.30';
            $current_season['begin_season']=Carbon::create((Date("Y")), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y') + 1;
        } else if ($date >= Carbon::create((Date("Y")), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年秋期' . '10月1日';
            $current_season['to'] = Date('Y') . '年' . '12月31日';
            $current_season['term'] = 2; // this year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '10.1';
            $current_season['to_num'] = Date('Y') . '.' . '12.31';
            $current_season['begin_season']=Carbon::create((Date("Y")), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y') + 1;
        } else if ($date >= Carbon::create((Date("Y")), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年冬期' . '1月1日';
            $current_season['to'] = Date('Y') . '年' . '3月31日';
            $current_season['term'] = 3; // this year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = Date('Y') - 1;
            $current_season['from_num'] = (Date('Y')) . '.' . '1.1';
            $current_season['to_num'] = Date('Y') . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y")), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y') - 1;
            $current_season['end_thisyear'] = Date('Y');
        }/* else if ($date >= Carbon::create((Date("Y")), 12, 21,0,0,0)){
            $current_season['fromyear'] = Date('Y');
            $current_season['fromM'] = 12;
            $current_season['fromD'] = 21; 
            $current_season['toyear'] = Date('Y')+1;
            $current_season['toM'] = 3;
            $current_season['toD'] = 20;
            $current_season['from'] = (Date('Y')) . '年冬期' . '12月21日';
            $current_season['to'] = (Date('Y') + 1) . '年' . '3月20日';
            $current_season['term'] = 4; // this year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '12.21';
            $current_season['to_num'] = (Date('Y') + 1) . '.' . '3.20';
            $current_season['begin_season']= Carbon::create((Date("Y")), 12, 21,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")+1), 3, 20,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y')+1;
        }*/ else if ($date >= Carbon::create((Date("Y") - 1), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '6月31日';
            $current_season['term'] = 5; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } else if ($date >= Carbon::create((Date("Y") - 1), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '9月30日';
            $current_season['term'] = 6; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 1). '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } else if ($date >= Carbon::create((Date("Y") - 1), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '12月31日';
            $current_season['term'] = 7; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } else if($date >= Carbon::create((Date("Y") - 1), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '3月31日';
            $current_season['term'] = 8; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '6月30日';
            $current_season['term'] = 9; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '9月30日';
            $current_season['term'] = 10; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '12月31日';
            $current_season['term'] = 11; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '3月31日';
            $current_season['term'] = 12; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '6月30日';
            $current_season['term'] = 13; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '9月30日';
            $current_season['term'] = 14; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '12月31日';
            $current_season['term'] = 15; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '3月31日';
            $current_season['term'] = 16; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '6月30日';
            $current_season['term'] = 17; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '6.30';
             $current_season['begin_season']= Carbon::create((Date("Y") - 4), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '9月30日';
            $current_season['term'] = 18; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '12月31日';
            $current_season['term'] = 19; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '3月31日';
            $current_season['term'] = 20; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 5);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-5;
            $current_season['end_thisyear'] = Date('Y')-4;
        }

        return $current_season;
    }

    static function CurrentSeaon1($date){

        if ($date >= Carbon::create((Date("Y")), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年春期' . '4月1日';
            $current_season['to'] = Date('Y') . '年' . '6月30日';
            $current_season['term'] = 0; // this year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '4.1';
            $current_season['to_num'] = Date('Y') . '.' . '6.30';
            $current_season['begin_season']=Carbon::create((Date("Y")), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y') + 1;
        }else if ($date >= Carbon::create((Date("Y")), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年夏期' . '7月1日';
            $current_season['to'] = Date('Y') . '年' . '9月30日';
            $current_season['term'] = 1; // this year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '7.1';
            $current_season['to_num'] = Date('Y') . '.' . '9.30';
            $current_season['begin_season']=Carbon::create((Date("Y")), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y') + 1;
        } else if ($date >= Carbon::create((Date("Y")), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年秋期' . '10月1日';
            $current_season['to'] = Date('Y') . '年' . '12月31日';
            $current_season['term'] = 2; // this year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '10.1';
            $current_season['to_num'] = Date('Y') . '.' . '12.31';
            $current_season['begin_season']=Carbon::create((Date("Y")), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y') + 1;
        } else if ($date >= Carbon::create((Date("Y")), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年冬期' . '1月1日';
            $current_season['to'] = Date('Y') . '年' . '3月31日';
            $current_season['term'] = 3; // this year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = Date('Y') - 1;
            $current_season['from_num'] = (Date('Y')) . '.' . '1.1';
            $current_season['to_num'] = Date('Y') . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y")), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y') - 1;
            $current_season['end_thisyear'] = Date('Y');
        }/* else if ($date >= Carbon::create((Date("Y")), 12, 21,0,0,0)){
            $current_season['fromyear'] = Date('Y');
            $current_season['fromM'] = 12;
            $current_season['fromD'] = 21; 
            $current_season['toyear'] = Date('Y')+1;
            $current_season['toM'] = 3;
            $current_season['toD'] = 20;
            $current_season['from'] = (Date('Y')) . '年冬期' . '12月21日';
            $current_season['to'] = (Date('Y') + 1) . '年' . '3月20日';
            $current_season['term'] = 4; // this year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '12.21';
            $current_season['to_num'] = (Date('Y') + 1) . '.' . '3.20';
            $current_season['begin_season']= Carbon::create((Date("Y")), 12, 21,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")+1), 3, 20,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y')+1;
        }*/ else if ($date >= Carbon::create((Date("Y") - 1), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '6月31日';
            $current_season['term'] = 5; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } else if ($date >= Carbon::create((Date("Y") - 1), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '9月30日';
            $current_season['term'] = 6; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 1). '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } else if ($date >= Carbon::create((Date("Y") - 1), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '12月31日';
            $current_season['term'] = 7; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } else if($date >= Carbon::create((Date("Y") - 1), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '3月31日';
            $current_season['term'] = 8; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '6月30日';
            $current_season['term'] = 9; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '9月30日';
            $current_season['term'] = 10; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '12月31日';
            $current_season['term'] = 11; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '3月31日';
            $current_season['term'] = 12; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '6月30日';
            $current_season['term'] = 13; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '9月30日';
            $current_season['term'] = 14; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '12月31日';
            $current_season['term'] = 15; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '3月31日';
            $current_season['term'] = 16; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '6月30日';
            $current_season['term'] = 17; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '6.30';
             $current_season['begin_season']= Carbon::create((Date("Y") - 4), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '9月30日';
            $current_season['term'] = 18; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '12月31日';
            $current_season['term'] = 19; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '3月31日';
            $current_season['term'] = 20; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 5);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-5;
            $current_season['end_thisyear'] = Date('Y')-4;
        }

        return $current_season;
    }

    public function CurrentSeaon_Pupil($date){
           
        if ($date >= Carbon::create((Date("Y")), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年春期' . '4月1日';
            $current_season['to'] = Date('Y') . '年' . '6月30日';
            $current_season['term'] = 0; // this year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '4.1';
            $current_season['to_num'] = Date('Y') . '.' . '6.30';
            $current_season['begin_season']=Carbon::create((Date("Y")), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y') + 1;
       }else if ($date >= Carbon::create((Date("Y")), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年夏期' . '7月1日';
            $current_season['to'] = Date('Y') . '年' . '9月30日';
            $current_season['term'] = 1; // this year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '7.1';
            $current_season['to_num'] = Date('Y') . '.' . '9.30';
            $current_season['begin_season']=Carbon::create((Date("Y")), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y') + 1;
        } else if ($date >= Carbon::create((Date("Y")), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年秋期' . '10月1日';
            $current_season['to'] = Date('Y') . '年' . '12月31日';
            $current_season['term'] = 2; // this year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '10.1';
            $current_season['to_num'] = Date('Y') . '.' . '12.31';
            $current_season['begin_season']=Carbon::create((Date("Y")), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y') + 1;
        } else if ($date >= Carbon::create((Date("Y")), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年冬期' . '1月1日';
            $current_season['to'] = Date('Y') . '年' . '3月31日';
            $current_season['term'] = 3; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') ) . '.' . '1.1';
            $current_season['to_num'] = Date('Y') . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y")), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y') - 1;
            $current_season['end_thisyear'] = Date('Y');
        } /*else if ($date >= Carbon::create((Date("Y")), 12, 21,0,0,0)){
            $current_season['from'] = (Date('Y')) . '年冬期' . '12月21日';
            $current_season['to'] = (Date('Y') + 1) . '年' . '3月20日';
            $current_season['term'] = 4; // this year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '12.21';
            $current_season['to_num'] = (Date('Y') + 1) . '.' . '3.20';
            $current_season['begin_season']= Carbon::create((Date("Y")), 12, 21,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")+1), 3, 20,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y')+1;
        }*/ else if ($date >= Carbon::create((Date("Y") - 1), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '6月30日';
            $current_season['term'] = 5; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y') - 1;
            $current_season['end_thisyear'] = Date('Y');
        } else if ($date >= Carbon::create((Date("Y") - 1), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '9月30日';
            $current_season['term'] = 6; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 1). '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y') - 1;
            $current_season['end_thisyear'] = Date('Y');
        } else if ($date >= Carbon::create((Date("Y") - 1), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '12月31日';
            $current_season['term'] = 7; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y') - 1;
            $current_season['end_thisyear'] = Date('Y');
        } else if($date >= Carbon::create((Date("Y") - 1), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '3月31日';
            $current_season['term'] = 8; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '6月30日';
            $current_season['term'] = 9; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '9月30日';
            $current_season['term'] = 10; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '12月31日';
            $current_season['term'] = 11; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '3月31日';
            $current_season['term'] = 12; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '6月30日';
            $current_season['term'] = 13; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '9月30日';
            $current_season['term'] = 14; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '12月31日';
            $current_season['term'] = 15; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '3月31日';
            $current_season['term'] = 16; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '6月30日';
            $current_season['term'] = 17; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '9月30日';
            $current_season['term'] = 18; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '12月31日';
            $current_season['term'] = 19; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '12.31';
             $current_season['begin_season']= Carbon::create((Date("Y") - 4), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 5) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '3月31日';
            $current_season['term'] = 20; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 5);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-5;
            $current_season['end_thisyear'] = Date('Y')-4;
        }

        return $current_season;
    }

    static function CurrentSeaon1_Pupil($date){

        if ($date >= Carbon::create((Date("Y")), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年春期' . '4月1日';
            $current_season['to'] = Date('Y') . '年' . '6月30日';
            $current_season['term'] = 0; // this year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '4.1';
            $current_season['to_num'] = Date('Y') . '.' . '6.30';
            $current_season['begin_season']=Carbon::create((Date("Y")), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y')+1;
       }else if ($date >= Carbon::create((Date("Y")), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年夏期' . '7月1日';
            $current_season['to'] = Date('Y') . '年' . '9月30日';
            $current_season['term'] = 1; // this year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '7.1';
            $current_season['to_num'] = Date('Y') . '.' . '9.30';
            $current_season['begin_season']=Carbon::create((Date("Y")), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y')+1;
        } else if ($date >= Carbon::create((Date("Y")), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年秋期' . '10月1日';
            $current_season['to'] = Date('Y') . '年' . '12月31日';
            $current_season['term'] = 2; // this year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '10.1';
            $current_season['to_num'] = Date('Y') . '.' . '12.31';
            $current_season['begin_season']=Carbon::create((Date("Y")), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y')+1;
        } else if ($date >= Carbon::create((Date("Y")), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y")), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y')) . '年冬期' . '1月1日';
            $current_season['to'] = Date('Y') . '年' . '3月31日';
            $current_season['term'] = 3; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') ) . '.' . '1.1';
            $current_season['to_num'] = Date('Y') . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y")), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } /*else if ($date >= Carbon::create((Date("Y")), 12, 21,0,0,0)){
            $current_season['from'] = (Date('Y')) . '年冬期' . '12月21日';
            $current_season['to'] = (Date('Y') + 1) . '年' . '3月20日';
            $current_season['term'] = 4; // this year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y'));
            $current_season['from_num'] = (Date('Y')) . '.' . '12.21';
            $current_season['to_num'] = (Date('Y') + 1) . '.' . '3.20';
            $current_season['begin_season']= Carbon::create((Date("Y")), 12, 21,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")+1), 3, 20,23,59,59);
            $current_season['begin_thisyear'] = Date('Y');
            $current_season['end_thisyear'] = Date('Y')+1;
        }*/ else if ($date >= Carbon::create((Date("Y") - 1), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '6月30日';
            $current_season['term'] = 5; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } else if ($date >= Carbon::create((Date("Y") - 1), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '9月30日';
            $current_season['term'] = 6; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 1). '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } else if ($date >= Carbon::create((Date("Y") - 1), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 1) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '12月31日';
            $current_season['term'] = 7; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 1);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-1;
            $current_season['end_thisyear'] = Date('Y');
        } else if($date >= Carbon::create((Date("Y") - 1), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 1), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 1) . '年' . '3月31日';
            $current_season['term'] = 8; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 1) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 1) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 1), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-1), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '6月30日';
            $current_season['term'] = 9; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '9月30日';
            $current_season['term'] = 10; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 2) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '12月31日';
            $current_season['term'] = 11; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 2);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-2;
            $current_season['end_thisyear'] = Date('Y')-1;
        }else if($date >= Carbon::create((Date("Y") - 2), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 2), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 2) . '年' . '3月31日';
            $current_season['term'] = 12; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 2) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 2) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 2), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-2), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '6月30日';
            $current_season['term'] = 13; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '9月30日';
            $current_season['term'] = 14; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 3) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '12月31日';
            $current_season['term'] = 15; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 3);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '12.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-3;
            $current_season['end_thisyear'] = Date('Y')-2;
        }else if($date >= Carbon::create((Date("Y") - 3), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 3), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 3) . '年' . '3月31日';
            $current_season['term'] = 16; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 3) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 3) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 3), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-3), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 4, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 6, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年春期' . '4月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '6月30日';
            $current_season['term'] = 17; // last year spring
            $current_season['season'] = '春期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '4.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '6.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 4, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 6, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 7, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 9, 30,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年夏期' . '7月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '9月30日';
            $current_season['term'] = 18; // last year summer
            $current_season['season'] = '夏期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '7.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '9.30';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 7, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 9, 30,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 10, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 12, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 4) . '年秋期' . '10月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '12月31日';
            $current_season['term'] = 19; // last year autumn
            $current_season['season'] = '秋期';
            $current_season['year'] = (Date('Y') - 4);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '10.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '12.31';
             $current_season['begin_season']= Carbon::create((Date("Y") - 4), 10, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 12, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-4;
            $current_season['end_thisyear'] = Date('Y')-3;
        }else if($date >= Carbon::create((Date("Y") - 4), 1, 1,0,0,0) && $date <= Carbon::create((Date("Y") - 4), 3, 31,23,59,59)){
            $current_season['from'] = (Date('Y') - 5) . '年冬期' . '1月1日';
            $current_season['to'] = (Date('Y') - 4) . '年' . '3月31日';
            $current_season['term'] = 20; // last year winter
            $current_season['season'] = '冬期';
            $current_season['year'] = (Date('Y') - 5);
            $current_season['from_num'] = (Date('Y') - 4) . '.' . '1.1';
            $current_season['to_num'] = (Date('Y') - 4) . '.' . '3.31';
            $current_season['begin_season']= Carbon::create((Date("Y") - 4), 1, 1,0,0,0);
            $current_season['end_season']=Carbon::create((Date("Y")-4), 3, 31,23,59,59);
            $current_season['begin_thisyear'] = Date('Y')-5;
            $current_season['end_thisyear'] = Date('Y')-4;
        }

        return $current_season;
    }


    public function mybooklist(Request $request, $id=null) {
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        if($id != Auth::id()) 
            $otherview_flag = true;

        $mywriteBooks = Books::where('active', '<>', 7)->where("firstname_nick", $user->firstname_nick)->where("lastname_nick", $user->lastname_nick)->get();
        $this->page_info['subtop'] = 'mypage';
        $this->page_info['side'] = 'mypage';
        $this->page_info['subside'] = 'mybook_list';
        return view('mypage.author.my_booklist')
            ->with('mywriteBooks',$mywriteBooks)
            ->with('otherview_flag',$otherview_flag)
            ->with('user',$user)
            ->with('page_info', $this->page_info);
    }

    public function bid_history($id = null){
        //        if(!Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        if($id != Auth::id()) 
            $otherview_flag = true;
        $this->page_info['subside'] = 'bid_history';
        $user = User::find($id);
        $demands = Demand::select('overseer_demand.*')->join('books', 'overseer_demand.book_id', DB::raw('books.id and books.active <> 7'))
                           ->where("overseer_demand.overseer_id", $id)->orderBy("overseer_demand.updated_at",'desc')->get();

        //        $books = Books::where('active', 4)->get();
        return view('mypage.overseer.bid_history')
            ->with('page_info', $this->page_info)
            ->withDemands($demands)
            ->with('user',$user)
            ->with('otherview_flag',$otherview_flag);
    }

    public function overseerBooks($id = null){
        //        if(!Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
       
        if($id != Auth::id()) 
            $otherview_flag = true;

        $user = User::find($id);
        if($user->role == config('consts')['USER']['ROLE']['AUTHOR'])
            $books = Books::where('overseer_id', $id)
                            ->where('active', '<>', 7)
                            ->orWhere( function ($query) use ($id) {
                                $query->where('author_overseer_flag', 1)
                                   ->where('writer_id', $id);
                             })
                            ->get();
        else
            $books = Books::where('overseer_id', $id)->where('active', '<>', 7)->orderby('replied_date3', 'desc')->get();
        $this->page_info['subside'] = 'overseer_books';
        $overseerbook_is_public = $user->overseerbook_is_public;
        return view('mypage.overseer.overseer_books')
            ->with('page_info', $this->page_info)
            ->with('books',$books)
            ->with('overseerbook_is_public',$overseerbook_is_public)
            ->with('otherview_flag',$otherview_flag);
    }

    public function my_profile(){
        //        if(!Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $user = Auth::user();
        $books = Books::where('overseer_id', Auth::id())->where('active', '<>', 7)->get();

        $overseerbook_list = preg_split('/,/', $user->overseerbook_list);
        

        $this->page_info['subside'] = 'my_profile';
        return view('mypage.overseer.my_profile')
            ->with('page_info', $this->page_info)
            ->with('user',$user)
            ->with('books',$books)
            ->with('overseerbook_list',$overseerbook_list);
    }

    public function update_my_profile(Request $request){
        $data = $request->all();
        $user = Auth::user();

        $rule = array(
            'job' => 'required',
            'about' => 'required',
        );
        if($user->address1_is_public == 1)
            $rule['address1'] = 'required';
        if($user->address2_is_public == 1)
            $rule['address2'] = 'required';
        if(!$user->isAuthor())
            $rule['scholarship'] = 'required';
        $message = array(
            'required' => config('consts')['MESSAGES']['REQUIRED']
        );

        $file = $request->file('my_img');
        if($file){
            $ext = $file->getClientOriginalExtension();
            $now = date('YmdHis');
            //$filename = md5($now . $file->getClientOriginalName()) . '.' . $ext;
            $filename = $file->getClientOriginalName();
            $authfilesize = $file->getClientSize();
            $maxfilesize =$file->getMaxFilesize();
            $maxfilesize1 = round($maxfilesize / 1024 / 1024, 0);
            if($authfilesize == 0 || $authfilesize > $maxfilesize){
                             
                 return Redirect::back()
                ->withErrors(["filemaxsize" => 'ファイル容量は'.$maxfilesize1.'MB以下でしてください。'])
                ->withInput();
               
            }else{
                /*
                $url = 'uploads/myprofile/'. Auth::id();
                if(file_exists($user->image_path) && $user->image_path != '' && $user->image_path !== null)  unlink($user->image_path); //remove before file
                //upload file
                $file->move($url, $filename);
                $user->image_path = $url . '/' . $filename ;
                */
                $authfiledir = "/uploads/myprofile";
                if(file_exists(public_path().$user->myprofile) && $user->myprofile != '' && $user->myprofile !== null){
                    if(file_exists(public_path()."/uploads/myprofile/".$user->id)){
                        rename(public_path()."/uploads/myprofile/".$user->id, public_path()."/uploads/myprofile/doqregfile");

                        $filedh  = opendir(public_path()."/uploads/myprofile/doqregfile");
                        while (false !== ($filename1 = readdir($filedh))) {
                            if ($filename1 != "." && $filename1 != "..") { 
                                unlink(public_path()."/uploads/myprofile/doqregfile/".$filename1);
                            }
                        }
                        rmdir(public_path()."/uploads/myprofile/doqregfile");
                    }
                }
                //upload file
                $file->move(public_path().'/uploads/myprofile/'.$user->id.'/',$filename);

                $user->myprofilename = $filename;
                $user->myprofile = '/uploads/myprofile/'.$user->id."/".$filename;
                $user->myprofile_date = date_format(now(), "Y-m-d");
                $user->save();
            }
        }

        $validator = Validator::make($data ,$rule, $message);
        if($validator->fails()){
            return Redirect::back()
                ->withErrors($validator)
                ->withInput();
        }

        if($user->address1_is_public == 1)
            $user->address1 = $request->input("address1");
        if($user->address2_is_public == 1)
            $user->address2 = $request->input("address2");
        
        $user->scholarship = $request->input("scholarship");
        $user->job = $request->input("job");
        $user->about = $request->input("about");

        $temp = "";
        if($request->input('categories')){
            $overseer_books = $request->input('categories');
            foreach($overseer_books as $key => $overseer_book){
                $temp .=  $overseer_book;
                if($key < count($overseer_books) -1)
                    $temp .= ",";
            }
        }
        $user->overseerbook_list = $temp;

        $user->save();
        $request->session()->flash('status', config('consts')['MESSAGES']['EDIT_FINISHED']);
        return Redirect::back();
    }

    public function other_view(Request $request, $id = null) {
        $this->page_info['subside'] = 'other_view';
        $advertise = Advertise::first();

        $otherview_flag = true;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
            $otherview_flag = true;
        }

        $pupil = $request->input("pupil");
        if(isset($pupil) && $pupil !== null && $pupil !== -1) {
            $id = $pupil;
        }
        $user = User::find($id);
        
        $classid = $request->input("class");
        $otherviewable = 0;
        
        if(isset($classid) && $classid !== null){
            $groupidofclass = Classes::find($classid)->group_id;
            if($groupidofclass == $user->org_id) $otherviewable = 1;
        }

        if(Auth::check() && Auth::user()->isAdmin()){
            $otherviewable = 1;
        }

        $waitOverseerBooks = Books::where("active", 3)->orderby('replied_date1', 'desc')->get();

        $demandBooks = Demand::join('books', 'overseer_demand.book_id', DB::raw('books.id and books.active <> 7'))
                               ->where("overseer_demand.overseer_id", $id)->orderBy("overseer_demand.updated_at",'desc')->get()->take(3);

        $wishBooks = WishLists::wishBooks($id)->take(3);
        $messages = Messages::MyMessages($id)->get();
        $messages = $messages->where('type','<>',1)->where('del_flag', 0)->take(3);
        
        $rankingage = 1;
        $today = now();
        $curage= $user->age();

        if($user->isPupil() && $user->active == 1){
            $groupbyuser = $user->ClassOfPupil->School()->first();
            if($groupbyuser->group_type == 0)
                $rankingage = 1; //小学生
            elseif($groupbyuser->group_type == 1)
                $rankingage = 2; //中学生
            elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                $rankingage = 3; //高校生
            else
                $rankingage = 4; //大学生
        }else{
                        
            if($curage <= 11){
                $rankingage = 1;
            }
            elseif($curage > 11 && $curage <= 14){
                $rankingage = 2;
            }
            else{
                $rankingage = floor($curage / 10);
                $rankingage = $rankingage + 4; 
            }
        }
        $search_birthday = []; 
        $search_birthday = MypageController::search_birthday($rankingage); 


        $mybookcase_is_public = $user->mybookcase_is_public;
        if($otherview_flag)
            $myBooks = Books::MyBooks(-1, $id)->where('user_quizes.is_public', 1)->orderby('created_date', 'desc')->get()->take(6);
        else
            $myBooks = Books::MyBooks(-1, $id)->orderby('created_date', 'desc')->get()->take(6);

        $profile_is_public = $user->profile_is_public;
        $targetpercent_is_public = $user->targetpercent_is_public;
        $ranking_order_is_public = $user->ranking_order_is_public;

        ///////////////////
        $array_season = [];
       
        for ($i = 0; $i < 4; $i++) {
            $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
            if($user->isPupil() && $user->active == 1){
                $array_season_obj[$i] = MypageController::CurrentSeaon_Pupil($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon_Pupil($date);
            }else{
                $array_season_obj[$i] = MypageController::CurrentSeaon($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon($date);
            }
        }

        /////////////////////
        $total_point = DB::table('user_quizes')->select(DB::raw ('sum(user_quizes.point) as sumpoint'))
                        ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7')) 
                        ->where('user_quizes.user_id', $id)
                        ->where( function ($q) {
                            $q->Where(function ($q1) {
                                $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                            })->orWhere(function ($q1) {
                                $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                            })->orWhere(function ($q1) {
                                $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                            });
                        })->groupby('user_quizes.user_id')->first();

        if(isset($total_point) && $total_point !== null)
            $total_point = round($total_point->sumpoint, 2);
        else
            $total_point = 0;
        $my_rank = 10;
        $my_addpoint = 0;

        $ranks = [29070, 14070, 6070, 2070, 870, 370, 220, 120, 60, 20, 0];

        for ($i = 0; $i < 11; $i++) {
            if ($total_point >= $ranks[$i] && $total_point < $ranks[$i - 1]) {
                $my_rank = $i;
                $my_addpoint = $ranks[$i - 1] - $total_point;
            }
        }
        
        $type = 1;$tagrgetpoint = 1;$grade = 0;
        $class = DB::table("users")
            ->select('org.group_type', 'classes.grade')
            ->join('classes','classes.id','=','users.org_id')
            ->join('users as org', 'classes.group_id',DB::raw('org.id'))
            ->where('users.role','=', config('consts')['USER']['ROLE']["PUPIL"]) 
            ->where('users.id','=',$id)
            ->first();
        if($class !== null){
            $type = $class->group_type;
            $grade = $class->grade;

            if($type ==0){
                if($grade == 1) $tagrgetpoint = 7;
                elseif($grade == 2) $tagrgetpoint = 13;
                elseif($grade == 3) $tagrgetpoint = 20;
                elseif($grade == 4) $tagrgetpoint = 35;   
                elseif($grade == 5) $tagrgetpoint = 50;
                elseif($grade == 6) $tagrgetpoint = 70;
                else $tagrgetpoint = 0; 
            }
        }
         
        if($user->isPupil() && $user->active == 1){
            $current_season = MypageController::CurrentSeaon_Pupil(now());
        }else{
            $current_season = MypageController::CurrentSeaon(now());
        }    
        $current_user = UserQuiz::SumPoint1($current_season['term'], $current_season, $user->role)->where('u.id', $id)->first();
        
       // $user = User::where('id', $id)->first();
        $role = $user->role;

        if($role==config('consts')['USER']['ROLE']['PUPIL'] && $user->active == 1){

            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
                    
            $sql_average_end="'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where  users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                ") as table1";
            
            for ($k = 1; $k < 5; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[4-$k] = MypageController::CurrentSeaon_Pupil($date);
                $sql_term1[4-$k]=$sql_average_front."created_date between '".$cur_season[4-$k]['begin_season']."' and '". $cur_season[4-$k]['end_season'].$sql_average_end;
            }
            
            for($i=0;$i<4;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                    $sum = $sum+($avg->sum);
                    if($avg->flag=='1'){
                        $mypercent  = floor($avg->sum * 100 / $tagrgetpoint * 100) / 100;
                        $myavgPoints[$i][1] = $mypercent;                        
                    }
                 }
                $schoolpercent = floor($sum/sizeof($temp_avg) * 100 / $tagrgetpoint * 100) / 100;
                $myavgPoints[$i][0] = $schoolpercent;

            }
   
            $sql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
            $myrankPoints1 = MypageController::Get_RankPoint($sql[1]);

            $threemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
            $threemonthrankPoints1 = MypageController::Get_RankPoint($threemonthsql[1]);

            $allpointsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                " group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
            $allrankPoints1 = MypageController::Get_RankPoint($allpointsql[1]);

            $sql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        $id."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $myrankPoints2 = MypageController::Get_RankPoint($sql[2]);

            $threemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        $id."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $threemonthrankPoints2 = MypageController::Get_RankPoint($threemonthsql[2]);

            $allpointsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                "group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        $id."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $allrankPoints2 = MypageController::Get_RankPoint($allpointsql[2]);

            $grade = $user->ClassOfPupil->grade;
            $grade_odds = $grade % 2;
           
            //if($grade == 0){ //学年 0
                $sql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $threemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $allpointsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
            
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonthsql[3]);
            $allrankPoints3 = MypageController::Get_RankPoint($allpointsql[3]);
            
            //if($grade == 0){ //学年 0       
                $sql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
                $threemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
               where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
                $allpointsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                "group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
            
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonthsql[4]);
            $allrankPoints4 = MypageController::Get_RankPoint($allpointsql[4]);

            //if($grade == 0){ //学年 0  
                $sql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $threemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $allpointsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
            
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonthsql[5]);
            $allrankPoints5 = MypageController::Get_RankPoint($allpointsql[5]);

            return view('mypage.personal.top.other_view')
            ->withNosidebar('true')
            ->with('page_info', $this->page_info)
            ->withUser($user)
            ->with('type',$type)
            ->with('grade',$grade)
            ->with('tagrgetpoint',$tagrgetpoint)
            ->with('my_rank', $my_rank)
            ->with('total_point',$total_point)
            ->with('my_addpoint', $my_addpoint)
            ->with('wishBooks', $wishBooks)
            ->with('myBooks', $myBooks)
            ->with('age', $curage)
            ->with('cur_season', $cur_season)
            ->with('current_season', $current_season)
            ->with('current_user', $current_user)
            ->with('array_season', $array_season)
            ->with('mybookcase_is_public', $mybookcase_is_public)
            ->with('myrankPoints1', $myrankPoints1)
            ->with('myrankPoints2', $myrankPoints2)
            ->with('myrankPoints3', $myrankPoints3)
            ->with('myrankPoints4', $myrankPoints4)
            ->with('myrankPoints5', $myrankPoints5)
            ->with('threemonthrankPoints1', $threemonthrankPoints1)
            ->with('threemonthrankPoints2', $threemonthrankPoints2)
            ->with('threemonthrankPoints3', $threemonthrankPoints3)
            ->with('threemonthrankPoints4', $threemonthrankPoints4)
            ->with('threemonthrankPoints5', $threemonthrankPoints5)
            ->with('allrankPoints1', $allrankPoints1)
            ->with('allrankPoints2', $allrankPoints2)
            ->with('allrankPoints3', $allrankPoints3)
            ->with('allrankPoints4', $allrankPoints4)
            ->with('allrankPoints5', $allrankPoints5)
            ->with('myavgPoints',$myavgPoints)
            ->with('otherviewable', $otherviewable)
            ->with('otherview_flag', $otherview_flag)
            ->with('advertise', $advertise)
            ->with('messages', $messages);
        }
        else{

            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
            $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".$id."' or (users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 

            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
            }
           
            for($i=0;$i<8;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $myavgPoints[$i][1]=$avg->sum;                        
                        }
                 }

                $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
            }

            $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
            $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".$id."' or (";
            $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".$id."' or (";
            $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".$id."' or (";                
                       
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".$id."') as table1
                           where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
          
            $sql[5]=$sql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                                
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
            $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
            $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
            $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]);   
            $mywriteChartBooks = [];
            $mywriteBooks = [];
            if($user->isAuthor()){
                $overseerBooks = Books::where('overseer_id', $id)
                                        ->where('active', '<>', 7)
                                        ->orWhere( function ($query) use ($user) {
                                            $query->where('author_overseer_flag', 1)
                                               ->where('writer_id', $user->id);
                                         })
                                        ->get()->take(3);
                $mywriteChartBooks = Books::where('active', '<>', 7)->where("firstname_nick", $user->firstname_nick)->where("lastname_nick", $user->lastname_nick)->get();
                $mywriteBooks = Books::where('active', '<>', 7)->where("firstname_nick", $user->firstname_nick)->where("lastname_nick", $user->lastname_nick)->get()->take(3);
            }
            else
                $overseerBooks = Books::where('overseer_id', $id)->where('active', '<>', 7)->orderby('replied_date3', 'desc')->get()->take(3);

            return view('mypage.personal.top.other_view')
            ->withNosidebar('true')
            ->with('page_info', $this->page_info)
            ->withUser($user)
            ->with('type',$type)
            ->with('grade',$grade)
            ->with('tagrgetpoint',$tagrgetpoint)
            ->with('my_rank', $my_rank)
            ->with('total_point',$total_point)
            ->with('my_addpoint', $my_addpoint)
            ->with('age', $curage)
            ->with('cur_season', $cur_season)
            ->with('current_season', $current_season)
            ->with('current_user', $current_user)
            ->with('array_season', $array_season)
            ->with('wishBooks', $wishBooks)
            ->with('myBooks', $myBooks)
            ->with('mybookcase_is_public', $mybookcase_is_public)
            ->with('myrankPoints3', $myrankPoints3)
            ->with('myrankPoints4', $myrankPoints4)
            ->with('myrankPoints5', $myrankPoints5)
            ->with('overseerBooks', $overseerBooks)
            ->with('mywriteBooks', $mywriteBooks)
            ->with('mywriteChartBooks', $mywriteChartBooks)
            ->with('threemonthrankPoints3', $threemonthrankPoints3)
            ->with('threemonthrankPoints4', $threemonthrankPoints4)
            ->with('threemonthrankPoints5', $threemonthrankPoints5)
            ->with('allrankPoints3', $allrankPoints3)
            ->with('allrankPoints4', $allrankPoints4)
            ->with('allrankPoints5', $allrankPoints5)
            ->with('myavgPoints',$myavgPoints)
            ->with('otherviewable', $otherviewable)
            ->with('messages', $messages)
            ->with('waitOverseerBooks', $waitOverseerBooks)
            ->with('otherview_flag', $otherview_flag)
            ->with('advertise', $advertise)
            ->with('demandBooks', $demandBooks);
        }
    }

    public function pupil_view(Request $request, $id = null) {
        $pupil = $request->input("pupil");
        if(isset($pupil) && $pupil !== null && $pupil !== -1) {
            $id = $pupil;
        }
        
        $type = 1;$tagrgetpoint = 1;$school_rank_city = 0;$group_id=0;
        $user = User::find($id);
        $role = $user->role;
        $birthday = $user->birthday;

        $messages = Messages::MyMessages($id)->get();
        $messages = $messages->where('type','<>',1)->where('del_flag', 0)->take(3);
        //$waitOverseerBooks = Books::where("active", 3)->orderby('replied_date1', 'desc')->get();
        
        /*if($user->isAuthor())
            $overseerBooks = Books::where('overseer_id', $id)
                                      ->orWhere( function ($query) {
                                            $query->where('author_overseer_flag', 1)
                                               ->where('writer_id', $user->id);
                                         })->get()->take(3);
        else
            $overseerBooks = Books::where('overseer_id', $id)->orderby('replied_date3', 'desc')->get()->take(3);
        
        $demandBooks = Demand::where("overseer_id", $id)->orderBy("updated_at",'desc')->get()->take(3);
        */
        //get My books
        $wishBooks = WishLists::wishBooks($id)->take(3);
        $wishlists_is_public = $user->wishlists_is_public;

        $rankingage = 1;
        $today = now();
        $curage= $user->age();

        if($user->isPupil() && $user->active == 1){
            $groupbyuser = $user->ClassOfPupil->School()->first();
            if($groupbyuser->group_type == 0)
                $rankingage = 1; //小学生
            elseif($groupbyuser->group_type == 1)
                $rankingage = 2; //中学生
            elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                $rankingage = 3; //高校生
            else
                $rankingage = 4; //大学生
        }else{
                        
            if($curage <= 11){
                $rankingage = 1;
            }
            elseif($curage > 11 && $curage <= 14){
                $rankingage = 2;
            }
            else{
                $rankingage = floor($curage / 10);
                $rankingage = $rankingage + 4; 
            }
        }
        $search_birthday = []; 
        $search_birthday = MypageController::search_birthday($rankingage); 


        $mybookcase_is_public = $user->mybookcase_is_public;
        $profile_is_public = $user->profile_is_public;
        $targetpercent_is_public = $user->targetpercent_is_public;
        $ranking_order_is_public = $user->ranking_order_is_public;

        $myBooks = Books::MyBooks(-1, $id)->orderby('created_at', 'desc')->get()->take(6);
        $total_point = UserQuiz::TotalPoint($id);
        $my_rank = 10;
        $my_addpoint = 0;

        $ranks = [29070, 14070, 6070, 2070, 870, 370, 220, 120, 60, 20, 0];

        for ($i = 0; $i < 11; $i++) {
            if ($total_point >= $ranks[$i] && $total_point < $ranks[$i - 1]) {
                $my_rank = $i;
                $my_addpoint = $ranks[$i - 1] - $total_point;
            }
        }
        //mypage bottom
        $passed_records_is_public = $user->passed_records_is_public;
        $register_point_ranking_is_public = $user->register_point_ranking_is_public;
        $register_record_is_public = $user->register_record_is_public;
        $point_ranking_is_public = $user->point_ranking_is_public;
        $book_allowed_record_is_public = $user->book_allowed_record_is_public;
        $quiz_allowed_record_is_public = $user->quiz_allowed_record_is_public;
        $overseerbook_is_public = $user->overseerbook_is_public;

        $class = DB::table("users")
            ->select('org.group_type', 'classes.grade')
            ->join('classes','classes.id','=','users.org_id')
            ->join('users as org', 'classes.group_id',DB::raw('org.id'))
            ->where('users.role','=', config('consts')['USER']['ROLE']["PUPIL"]) 
            ->where('users.id','=',$id)
            ->first();
        if($class != null){
            $type = $class->group_type;
            $grade = $class->grade;

            if($type ==0){  //小学生
                if($grade == 1) $tagrgetpoint = 7;
                elseif($grade == 2) $tagrgetpoint = 13;
                elseif($grade == 3) $tagrgetpoint = 20;
                elseif($grade == 4) $tagrgetpoint = 35;   
                elseif($grade == 5) $tagrgetpoint = 50;
                elseif($grade == 6) $tagrgetpoint = 70;
                else $tagrgetpoint = 7; 
            }
        }
        $group_id = $user->PupilsClass->group_id;
        $groups = User::where('role', config('consts')['USER']['ROLE']['GROUP'])
        ->where('address1', DB::raw('(SELECT address1 FROM users WHERE users.id = "'.$group_id.'")'))
        ->where('address2', DB::raw('(SELECT address2 FROM users WHERE users.id = "'.$group_id.'")'))
        ->where('group_type', DB::raw('(SELECT group_type FROM users WHERE users.id = "'.$group_id.'")'))
        ->where('active', 1)
        ->get();
        $current_sum = MypageController::Calc_school_avg($group_id, 'all');
        $rank = 0;
        for ($i = 0; $i < count($groups); $i ++){
            if ($groups[$i]->id == $group_id) continue;
            if ($current_sum >= MypageController::Calc_school_avg($groups[$i]->id, 'all')) $rank ++;
        }
       
        //$school_rank_city = (count($groups) - $rank) . "/" . count($groups);
        $school_rank_city = (count($groups) - $rank) ;

        //get messages
        //get books
        $books = Books::where('active', '<>', 7)->get();

               
        $mybookcase_is_public = $user->mybookcase_is_public;
        
        $profile_is_public = $user->profile_is_public;
        $targetpercent_is_public = $user->targetpercent_is_public;
        $ranking_order_is_public = $user->ranking_order_is_public;

        ///////////////////
        $array_season = [];

        for ($i = 0; $i < 4; $i++) {
            $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
            $array_season_obj[$i] = MypageController::CurrentSeaon_Pupil($date);
            $array_season[$i] = $array_season_obj[$i]['term'];
            $current_season = MypageController::CurrentSeaon_Pupil($date);
        }

        /////////////////////
        $current_season = MypageController::CurrentSeaon_Pupil(now());
        $current_user = UserQuiz::SumPoint1($current_season['term'], $current_season, $user->role)->where('u.id', $id)->first();
        //
        if($user->active == 1){ //学生
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',$id)
                ->get();
           
            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                    "created_date between '".$current_season['begin_season']."' and '". $current_season['end_season'].
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ";
            $sql[3]=  "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.grade,classes.group_id,classes.year from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                            on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                        ") as table1";
               
            $sql[4]=  "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.grade,classes.group_id,classes.year from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                    ") as table1";
                
            $sql[5]= "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                    ") as table1";


            $myquizPoints2 = MypageController::Get_RankPoint($sql_temp." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql_temp." users.address1= '".$user->address1."' and ".$sql[4]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql_temp.$sql[5]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',$id)
                ->get();
           
            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".$array_season_obj[1]['begin_season']."' and '". $array_season_obj[1]['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_temp1." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_temp1." users.address1= '".$user->address1."' and ".$sql[4]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_temp1.$sql[5]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_quizes.user_id','=',$id)
                ->get();
           
            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_temp2." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_temp2." users.address1= '".$user->address1."' and ".$sql[4]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_temp2.$sql[5]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',$id)
                ->get();
           
            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_temp3." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_temp3." users.address1= '".$user->address1."' and ".$sql[4]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_temp3.$sql[5]);

            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('user_quizes.user_id','=',$id)
                ->get();
           
            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) ".
                " group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_temp4." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_temp4." users.address1= '".$user->address1."' and ".$sql[4]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_temp4.$sql[5]);
        }else{
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',$id)
                ->get();


            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$current_season['begin_season']."' and '".$current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";

            $sql[2]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints2 = MypageController::Get_RankPoint($sql[2]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql[4]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',$id)
                ->get();

            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$array_season_obj[1]['begin_season']."' and '".$array_season_obj[1]['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";

            $sql_before[2]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql_before[3]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql_before[4]=$sql_temp1." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_before[2]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_before[3]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_before[4]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_quizes.user_id','=',$id)
                ->get();

            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";

            $sql_this[2]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql_this[3]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                 where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql_this[4]=$sql_temp2." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_this[2]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_this[3]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_this[4]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',$id)
                ->get();

            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '".Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";

            $sql_last[2]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql_last[3]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                 where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql_last[4]=$sql_temp3." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_last[2]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_last[3]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_last[4]);
            
            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('user_quizes.user_id','=',$id)
                ->get();

            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                     group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";

            $sql_all[2]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql_all[3]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql_all[4]=$sql_temp4." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_all[2]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_all[3]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_all[4]);
        }

        if($user->active == 1){ //学生
            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
                    
            $sql_average_end="'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where  users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                ") as table1";
            
            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon_Pupil($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;
            }
            
            for($i=0;$i<8;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                    $sum = $sum+($avg->sum);
                    if($avg->flag=='1'){
                        $mypercent  = floor($avg->sum * 100 / $tagrgetpoint * 100) / 100;
                        $myavgPoints[$i][1] = $mypercent;                        
                    }
                 }
                $schoolpercent = floor($sum/sizeof($temp_avg) * 100 / $tagrgetpoint * 100) / 100;
                $myavgPoints[$i][0] = $schoolpercent;

            }

            // for($i=4;$i<8;$i++){
            //      $myavgPoints[$i][0] = 0;
            //      $myavgPoints[$i][1] = 0;
            //     //  $cur_season[$i] = 0;
            //  }
    
            $sql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
            $myrankPoints1 = MypageController::Get_RankPoint($sql[1]);

            $threemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
            $threemonthrankPoints1 = MypageController::Get_RankPoint($threemonthsql[1]);

            $allpointsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                " group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
            $allrankPoints1 = MypageController::Get_RankPoint($allpointsql[1]);

            $sql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        $id."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $myrankPoints2 = MypageController::Get_RankPoint($sql[2]);

            $threemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                       $id."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $threemonthrankPoints2 = MypageController::Get_RankPoint($threemonthsql[2]);

            $allpointsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                "group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        $id."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $allrankPoints2 = MypageController::Get_RankPoint($allpointsql[2]);

            $grade = $user->ClassOfPupil->grade;
            $grade_odds = $grade % 2;
            
                $sql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $threemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $allpointsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                $id."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
            
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonthsql[3]);
            $allrankPoints3 = MypageController::Get_RankPoint($allpointsql[3]);
            
            
                $sql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                 "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
                $threemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                 "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
                $allpointsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                "group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                 "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
            
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonthsql[4]);
            $allrankPoints4 = MypageController::Get_RankPoint($allpointsql[4]);

            
            $sql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where  users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
            $threemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where  users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
            $allpointsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                "group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            $id."')) as table1
                                where users.id=table1.group_id) as table2
                         where  users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
            
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonthsql[5]);
            $allrankPoints5 = MypageController::Get_RankPoint($allpointsql[5]);

            return view('mypage.pupil.pupil_view')
                ->with('page_info', $this->page_info)
                ->with('messages', $messages)
                ->with('array_season_obj', $array_season_obj)
                ->with('books', $books)
                ->with('type',$type)
                ->with('grade',$grade)
                ->with('tagrgetpoint',$tagrgetpoint)
                ->with('age', $curage)
                ->with('my_rank', $my_rank)
                ->with('total_point',$total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('school_rank_city', $school_rank_city)
                ->with('cur_season', $cur_season)
                ->with('current_season', $current_season)
                ->with('current_user', $current_user)
                ->with('array_season', $array_season)
                ->with('mybookcase_is_public', $mybookcase_is_public)
                ->with('myBooks', $myBooks)
                ->with('wishlists_is_public', $wishlists_is_public)
                ->with('wishBooks', $wishBooks)
                ->with('user', $user)
                ->with('id', $id)
                ->with('group_id', $group_id)
                ->with('myavgPoints',$myavgPoints)
                ->with('myrankPoints1', $myrankPoints1)
                ->with('myrankPoints2', $myrankPoints2)
                ->with('myrankPoints3', $myrankPoints3)
                ->with('myrankPoints4', $myrankPoints4)
                ->with('myrankPoints5', $myrankPoints5)
                ->with('threemonthrankPoints1', $threemonthrankPoints1)
                ->with('threemonthrankPoints2', $threemonthrankPoints2)
                ->with('threemonthrankPoints3', $threemonthrankPoints3)
                ->with('threemonthrankPoints4', $threemonthrankPoints4)
                ->with('threemonthrankPoints5', $threemonthrankPoints5)
                ->with('allrankPoints1', $allrankPoints1)
                ->with('allrankPoints2', $allrankPoints2)
                ->with('allrankPoints3', $allrankPoints3)
                ->with('allrankPoints4', $allrankPoints4)
                ->with('allrankPoints5', $allrankPoints5)
                ->with('profile_is_public', $profile_is_public)
                ->with('targetpercent_is_public', $targetpercent_is_public)
                ->with('confirm', $request->input('confirm'))
                ->with('ranking_order_is_public', $ranking_order_is_public)
                ->with('passed_records_is_public', $passed_records_is_public)
                ->with('point_ranking_is_public', $point_ranking_is_public)
                ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
                ->with('register_record_is_public', $register_record_is_public)
                ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
                ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
                ->with('myquizPoints1', $myquizPoints1)
                ->with('myquizPoints2', $myquizPoints2)
                ->with('myquizPoints3', $myquizPoints3)
                ->with('myquizPoints4', $myquizPoints4)
                ->with('myquizPoints_before1', $myquizPoints_before1)
                ->with('myquizPoints_before2', $myquizPoints_before2)
                ->with('myquizPoints_before3', $myquizPoints_before3)
                ->with('myquizPoints_before4', $myquizPoints_before4)
                ->with('myquizPoints_this1', $myquizPoints_this1)
                ->with('myquizPoints_this2', $myquizPoints_this2)
                ->with('myquizPoints_this3', $myquizPoints_this3)
                ->with('myquizPoints_this4', $myquizPoints_this4)
                ->with('myquizPoints_last1', $myquizPoints_last1)
                ->with('myquizPoints_last2', $myquizPoints_last2)
                ->with('myquizPoints_last3', $myquizPoints_last3)
                ->with('myquizPoints_last4', $myquizPoints_last4)
                ->with('myquizPoints_all1', $myquizPoints_all1)
                ->with('myquizPoints_all2', $myquizPoints_all2)
                ->with('myquizPoints_all3', $myquizPoints_all3)
                ->with('myquizPoints_all4', $myquizPoints_all4);
        }else{
            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
            left join (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
            $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".$id."' or (users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 

            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon_Pupil($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
            
            }
           
            for($i=0;$i<8;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $myavgPoints[$i][1]=$avg->sum;                        
                        }
                 }

                $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
            }

            $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
            $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".$id."' or (";
            $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".$id."' or (";
            $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".$id."' or (";                
                       
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".$id."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
          
            $sql[5]=$sql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                           where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                                
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
            $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
            $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
            $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]); 

            return view('mypage.pupil.pupil_view')
                ->with('page_info', $this->page_info)
                ->with('messages', $messages)
                ->with('array_season_obj', $array_season_obj)
                ->with('books', $books)
                ->with('type',$type)
                ->with('grade',$grade)
                ->with('tagrgetpoint',$tagrgetpoint)
                ->with('age', $curage)
                ->with('my_rank', $my_rank)
                ->with('total_point',$total_point)
                ->with('my_addpoint', $my_addpoint)
                ->with('school_rank_city', $school_rank_city)
                ->with('cur_season', $cur_season)
                ->with('current_season', $current_season)
                ->with('current_user', $current_user)
                ->with('array_season', $array_season)
                ->with('mybookcase_is_public', $mybookcase_is_public)
                ->with('myBooks', $myBooks)
                ->with('wishlists_is_public', $wishlists_is_public)
                ->with('wishBooks', $wishBooks)
                ->with('user', $user)
                ->with('id', $id)
                ->with('group_id', $group_id)
                ->with('myavgPoints',$myavgPoints)
                ->with('myrankPoints3', $myrankPoints3)
                ->with('myrankPoints4', $myrankPoints4)
                ->with('myrankPoints5', $myrankPoints5)
                ->with('threemonthrankPoints3', $threemonthrankPoints3)
                ->with('threemonthrankPoints4', $threemonthrankPoints4)
                ->with('threemonthrankPoints5', $threemonthrankPoints5)
                ->with('allrankPoints3', $allrankPoints3)
                ->with('allrankPoints4', $allrankPoints4)
                ->with('allrankPoints5', $allrankPoints5)
                ->with('profile_is_public', $profile_is_public)
                ->with('targetpercent_is_public', $targetpercent_is_public)
                ->with('confirm', $request->input('confirm'))
                ->with('ranking_order_is_public', $ranking_order_is_public)
                ->with('passed_records_is_public', $passed_records_is_public)
                ->with('point_ranking_is_public', $point_ranking_is_public)
                ->with('register_point_ranking_is_public', $register_point_ranking_is_public)
                ->with('register_record_is_public', $register_record_is_public)
                ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
                ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
                ->with('myquizPoints1', $myquizPoints1)
                ->with('myquizPoints2', $myquizPoints2)
                ->with('myquizPoints3', $myquizPoints3)
                ->with('myquizPoints4', $myquizPoints4)
                ->with('myquizPoints_before1', $myquizPoints_before1)
                ->with('myquizPoints_before2', $myquizPoints_before2)
                ->with('myquizPoints_before3', $myquizPoints_before3)
                ->with('myquizPoints_before4', $myquizPoints_before4)
                ->with('myquizPoints_this1', $myquizPoints_this1)
                ->with('myquizPoints_this2', $myquizPoints_this2)
                ->with('myquizPoints_this3', $myquizPoints_this3)
                ->with('myquizPoints_this4', $myquizPoints_this4)
                ->with('myquizPoints_last1', $myquizPoints_last1)
                ->with('myquizPoints_last2', $myquizPoints_last2)
                ->with('myquizPoints_last3', $myquizPoints_last3)
                ->with('myquizPoints_last4', $myquizPoints_last4)
                ->with('myquizPoints_all1', $myquizPoints_all1)
                ->with('myquizPoints_all2', $myquizPoints_all2)
                ->with('myquizPoints_all3', $myquizPoints_all3)
                ->with('myquizPoints_all4', $myquizPoints_all4);
        }
    }

    public function site_notify(Request $request, $id = null){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
            //$otherview_flag = false;
        }
        $user = User::find($id);
        if($id != Auth::id()) 
            $otherview_flag = true;
        $this->page_info['side'] = 'site_notify';
        $this->page_info['subside'] = 'site_notify';

        //get my messages
        $messages = Messages::MyMessages($id)->get();
        $messages = $messages->where('type','<>', 1)->where('del_flag', 0);
        
       return view('mypage.personal.over_site.site_notify')
            ->with('page_info', $this->page_info)
            ->withUser($user)
            ->with('messages',$messages)
            ->with('otherview_flag', $otherview_flag);
    }

    public function wish_list($id = null){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);

        if($id != Auth::id()) 
            $otherview_flag = true;

        $this->page_info['side'] = 'wish_list';
        $this->page_info['subside'] = 'wish_list';

        $wishlists = WishLists::select('wishlists.*')
                             ->where('wishlists.user_id', $id)
                             ->join('books', 'wishlists.book_id', DB::raw('books.id and books.active <> 7'))
                             ->orderby('wishlists.created_at','desc')->get();
        $wishlists_is_public = $user->wishlists_is_public;
        $today = now();
        $curage= $user->age();
        return view('mypage.personal.over_site.wish_list')
            ->with('page_info', $this->page_info)
            ->with('wishlists', $wishlists)
            ->with('user', $user)
            ->with('age', $curage)
            ->with('otherview_flag', $otherview_flag)
            ->with('wishlists_is_public', $wishlists_is_public);
    }

    public function category(Request $request, $id = null){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        if($id != Auth::id()) 
            $otherview_flag = true;
        $this->page_info['side'] = 'category';
        $this->page_info['subside'] = 'category';
        $today = now();
        $birthday = date_create($user->birthday);
        
        $curage = $user->age();
        //get my books
        $myBooks = Books::MyBooks(-1, $id);
        $myBooks = $myBooks->where('books.active', '>=', 3);
        $order=3;
        if($request->has('order')){
            if($request->input('order') == 0){
                $myBooks = $myBooks->orderBy(DB::raw("books.firstname_yomi asc, books.lastname_yomi"), 'asc');
                $order=0;
            }
            elseif($request->input('order') == 1)
            {
                $myBooks = $myBooks->orderby('books.title_furi', 'asc');
                $order=1;
            }
            else{
                $myBooks = $myBooks->orderby('books.created_at', 'desc');
                $order=2;
            }
        }

        if($otherview_flag)
            $myBooks = $myBooks->where('is_public', 1);
        
        $myBooks = $myBooks->get();

        return view('mypage.personal.over_site.category')
            ->with('page_info', $this->page_info)
            ->with('myBooks',$myBooks)
            ->with('user', $user)
            ->with('order',$order)
            ->with('age',$curage)
            ->with('id',$id)
            ->with('otherview_flag', $otherview_flag)
            ->with('mybookcase_is_public',$user->mybookcase_is_public);

    }

    public function rank_child($id = null){
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        $this->point_ranking_is_public = $user->point_ranking_is_public;
        if($id != Auth::id()) 
            $otherview_flag = true;

        $today = now();
        $rankingage = 1;

        if($user->isPupil() && $user->active == 1){
            $groupbyuser = $user->ClassOfPupil->School()->first();
            if($groupbyuser->group_type == 0)
                $rankingage = 1; //小学生
            elseif($groupbyuser->group_type == 1)
                $rankingage = 2; //中学生
            elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                $rankingage = 3; //高校生
            else
                $rankingage = 4; //大学生   
        }

        $today_month = now()->format('m');
        $today = now();
        if($today < Carbon::create((Date("Y")), 4, 1,0,0,0))
        {
            $this_season = 3;
            $this_season_term = 3;
            $before_season_term = 7;
        }
        elseif($today < Carbon::create((Date("Y")), 7, 1,0,0,0)){
            $this_season = 0;
            $this_season_term = 0;
            $before_season_term = 3;
        }
        elseif($today < Carbon::create((Date("Y")), 10, 1,0,0,0)){
            $this_season = 1;
            $this_season_term = 1;
            $before_season_term = 0;
        }
        elseif($today <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
            $this_season = 2;
            $this_season_term = 2;
            $before_season_term = 1;
        }
        /*elseif($today > Carbon::create((Date("Y")), 12, 20,23,59,59))
        {
            $this_season = 3;
            $this_season_term = 4;
            $before_season_term = 2;
        }*/

        //calculate point
        $mysumpoint = [];
        
        $current_season = MypageController::CurrentSeaon_Pupil(now());
        $date = date_sub(now(), date_interval_create_from_date_string("3 months"));
        $before_season = MypageController::CurrentSeaon_Pupil($date);
        $before_seasonfrom_num = $before_season['begin_season'];
        $before_seasonto_num = $before_season['end_season'];

        $mysumpoint['this_season'] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$current_season['from_num'])
            ->where('created_date','<=',$current_season['to_num'])
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        $mysumpoint['before_season'] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$before_seasonfrom_num)
            ->where('created_date','<=',$before_seasonto_num)
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        $mysumpoint['this_year'] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0), Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        $mysumpoint['before_year'] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0), Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first(); 
        $mysumpoint['all']  = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first(); 

        $myrank[0]['sumpoint'] = $mysumpoint['this_season']->sum;
        $myrank[1]['sumpoint'] = $mysumpoint['before_season']->sum;
        $myrank[2]['sumpoint'] = $mysumpoint['this_year']->sum;
        $myrank[3]['sumpoint'] = $mysumpoint['before_year']->sum;
        $myrank[4]['sumpoint'] = $mysumpoint['all']->sum;

        //classRanking
        $classRank[0] = UserQuiz::classranking($current_season['term'], $current_season)->get();
        $classRank[1] = UserQuiz::classranking($before_season['term'], $before_season)->get();
        $classRank[2] = UserQuiz::classranking(21, $current_season)->get();
        $classRank[3] = UserQuiz::classranking(22, $current_season)->get();
        $classRank[4] = UserQuiz::classranking(23, $current_season)->get();

        //$count['class'] = User::where('org_id', $user->org_id)->where('role', config('consts')['USER']['ROLE']['PUPIL'])->count();
        $count['class'] = $classRank[4]->count();
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['class'] = 1;
        }

        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($classRank[$j]);$i++){
                if($classRank[$j][$i]->sumpoint > $myrank[$j]['sumpoint']){
                    $myrank[$j]['class']++;
                }
            }
        }

        //gradeRanking
        $gradeRank[0] = UserQuiz::graderanking($current_season['term'], $current_season)->get();
        $gradeRank[1] = UserQuiz::graderanking($before_season['term'], $before_season)->get();
        $gradeRank[2] = UserQuiz::graderanking(21, $current_season)->get();
        $gradeRank[3] = UserQuiz::graderanking(22, $current_season)->get();
        $gradeRank[4] = UserQuiz::graderanking(23, $current_season)->get();

        //$count['grade'] = User::Countgradepupils(); 
        $count['grade'] = $gradeRank[4]->count(); 
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['grade'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($gradeRank[$j]);$i++){
                if($gradeRank[$j][$i]->sumpoint > $myrank[$j]['sumpoint']){
                    $myrank[$j]['grade']++;
               }
            }
        }

        $cityRank[0] = UserQuiz::cityranking($current_season['term'], $current_season, 1, $rankingage, $user,$user->PupilsClass->grade)->get();
        $cityRank[1] = UserQuiz::cityranking($before_season['term'], $before_season, 1, $rankingage, $user,$user->PupilsClass->grade)->get();
        $cityRank[2] = UserQuiz::cityranking(21, $current_season, 1, $rankingage, $user,$user->PupilsClass->grade)->get();
        $cityRank[3] = UserQuiz::cityranking(22, $current_season, 1, $rankingage, $user,$user->PupilsClass->grade)->get();
        $cityRank[4] = UserQuiz::cityranking(23, $current_season, 1, $rankingage, $user,$user->PupilsClass->grade)->get();
        
        $count['city'] = $cityRank[4]->count();
        
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['city'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($cityRank[$j]);$i++){
                if($cityRank[$j][$i]->sumpoint > $myrank[$j]['sumpoint']){
                    $myrank[$j]['city']++;
                    // break;
                }
            }
        }
            //provinceRanking
        $provinceRank[0] = UserQuiz::provinceranking($current_season['term'],$current_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        $provinceRank[1] = UserQuiz::provinceranking($before_season['term'],$before_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        $provinceRank[2] = UserQuiz::provinceranking(21,$current_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        $provinceRank[3] = UserQuiz::provinceranking(22,$current_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        $provinceRank[4] = UserQuiz::provinceranking(23,$current_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        
        $count['province'] = $provinceRank[4]->count();
        
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['province'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($provinceRank[$j]);$i++){
                if($provinceRank[$j][$i]->sumpoint > $myrank[$j]['sumpoint']){
                    $myrank[$j]['province']++;
                    // break;
                }
            }
        }

        
        //nationRanking
        $nationRank[0] = UserQuiz::nationranking($current_season['term'],$current_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        $nationRank[1] = UserQuiz::nationranking($before_season['term'],$before_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        $nationRank[2] = UserQuiz::nationranking(21,$current_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        $nationRank[3] = UserQuiz::nationranking(22,$current_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        $nationRank[4] = UserQuiz::nationranking(23,$current_season,1,$rankingage, $user, $user->PupilsClass->grade)->get();
        
        $count['nation'] = $nationRank[4]->count();

        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['nation'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($nationRank[$j]);$i++){
                if($nationRank[$j][$i]->sumpoint > $myrank[$j]['sumpoint']){
                    $myrank[$j]['nation']++;
                    // break;
                }
            }
        }
        
        $this->page_info['side'] = 'rank_child';
        $this->page_info['subside'] = 'rank_child';
        return view('mypage.personal.rank.rank_child')
            ->with('page_info', $this->page_info)
            ->with('this_season',$this_season)
            ->with('mysumpoint',$mysumpoint)
            ->with('myrank',$myrank)
            ->with('count',$count)
            ->with('otherview_flag',$otherview_flag)
            ->with('current_season',$current_season)
            ->with('before_season',$before_season)
            ->with('point_ranking_is_public', $this->point_ranking_is_public)
            ->with('id',$id);
    }

    public function rank_child_pupil(Request $request, $id = null){

        //$otherview_flag = $request->input('otherview_flag');
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        $this->point_ranking_is_public = $user->point_ranking_is_public;
        if($id != Auth::id()) 
            $otherview_flag = true;
        //$user = User::where('id', $id)->first();
        $role = $user->role;
        $today = now();
        $rankingage = 1;

        if($user->isPupil() && $user->active == 1 && $user->ClassOfPupil){
            $groupbyuser = $user->ClassOfPupil->School()->first();
            if($groupbyuser != null){
                if($groupbyuser->group_type == 0)
                    $rankingage = 1; //小学生
                elseif($groupbyuser->group_type == 1)
                    $rankingage = 2; //中学生
                elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                    $rankingage = 3; //高校生
                else
                    $rankingage = 4; //大学生
            }
        }

        $today_month = now()->format('m');
        $today = now();
        if($today < Carbon::create((Date("Y")), 4, 1,0,0,0))
        {
            $this_season = 3;
            $this_season_term = 3;
            $before_season_term = 7;
        }
        elseif($today < Carbon::create((Date("Y")), 7, 1,0,0,0)){
            $this_season = 0;
            $this_season_term = 0;
            $before_season_term = 3;
        }
        elseif($today < Carbon::create((Date("Y")), 10, 1,0,0,0)){
            $this_season = 1;
            $this_season_term = 1;
            $before_season_term = 0;
        }
        elseif($today <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
            $this_season = 2;
            $this_season_term = 2;
            $before_season_term = 1;
        }

        $search_birthday = []; 
        $search_birthday = MypageController::search_birthday($rankingage); 

        if($user->isPupil() && $user->active == 1)
            $current_season = MypageController::CurrentSeaon_Pupil(now());
        else
            $current_season = MypageController::CurrentSeaon(now());
        //before_season
        $date = date_sub(now(), date_interval_create_from_date_string("3 months"));
        $before_season = MypageController::CurrentSeaon_Pupil($date);

        $before_seasonfrom_num = $before_season['begin_season'];
        $before_seasonto_num = $before_season['end_season'];

        $mysumpoint['this_season'] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$current_season['from_num'])
            ->where('created_date','<=',$current_season['to_num'])
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        $mysumpoint['before_season'] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$before_seasonfrom_num)
            ->where('created_date','<=',$before_seasonto_num)
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        $mysumpoint['this_year'] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0), Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        $mysumpoint['before_year'] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0), Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first(); 
        $mysumpoint['all']  = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first(); 

        $myrank[0]['sumpoint'] = $mysumpoint['this_season']->sum;
        $myrank[1]['sumpoint'] = $mysumpoint['before_season']->sum;
        $myrank[2]['sumpoint'] = $mysumpoint['this_year']->sum;
        $myrank[3]['sumpoint'] = $mysumpoint['before_year']->sum;
        $myrank[4]['sumpoint'] = $mysumpoint['all']->sum;
        //------------- get grade, group type -----------------//
        $grade = 0;

        $type = 1; $tagrgetpoint = 1;
        $class = DB::table("users")
            ->select('org.group_type', 'classes.grade')
            ->join('classes','classes.id','=','users.org_id')
            ->join('users as org', 'classes.group_id',DB::raw('org.id'))
            ->where('users.role','=', config('consts')['USER']['ROLE']["PUPIL"]) 
            ->where('users.id','=',$id)
            ->where('users.active','=', 1) 
            ->first();
        if($class !== null){
            $type = $class->group_type;
            $grade = $class->grade;

            if($type ==0){
                if($grade == 1) $tagrgetpoint = 7;
                elseif($grade == 2) $tagrgetpoint = 13;
                elseif($grade == 3) $tagrgetpoint = 20;
                elseif($grade == 4) $tagrgetpoint = 35;   
                elseif($grade == 5) $tagrgetpoint = 50;
                elseif($grade == 6) $tagrgetpoint = 70;
                else $tagrgetpoint = 0; 
            }
        }
        $grade = $user->ClassOfPupil->grade;
        $grade_odds = $grade % 2;

        //-----------------------------------------//
        $myrankPoints1 = [];
        $myrankPoints2 = [];
        $myrankPoints3 = [];
        $myrankPoints4 = [];
        $myrankPoints5 = [];
        $threemonthrankPoints1 = [];
        $threemonthrankPoints2 = [];
        $threemonthrankPoints3 = [];
        $threemonthrankPoints4 = [];
        $threemonthrankPoints5 = [];
        $beforethreemonthrankPoints1 = [];
        $beforethreemonthrankPoints2 = [];
        $beforethreemonthrankPoints3 = [];
        $beforethreemonthrankPoints4 = [];
        $beforethreemonthrankPoints5 = [];
        $allrankPoints1 = [];
        $allrankPoints2 = [];
        $allrankPoints3 = [];
        $allrankPoints4 = [];
        $allrankPoints5 = [];
        $lastyearrankPoints1 = [];
        $lastyearrankPoints2 = [];
        $lastyearrankPoints3 = [];
        $lastyearrankPoints4 = [];
        $lastyearrankPoints5 = [];
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['class'] = 1;
            $myrank[$k]['grade'] = 1;
            $myrank[$k]['city'] = 1;
            $myrank[$k]['province'] = 1;
            $myrank[$k]['nation'] = 1;
        }

        /*==================== This year sum point and rank in class ========================*/
        $sql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
        from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
            "' group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active >= 1 and ".
            "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
        $myrankPoints1 = MypageController::Get_RankPoint_for_child($sql[1]);
        if(!is_null($myrankPoints1)){
            $count[2]['class'] = count($myrankPoints1);
        }
        else{
            $count[2]['class'] = 1;
        }
        for($i = 0; $i < $count[2]['class']; $i++){
            if($myrankPoints1[$i]->sum > $myrank[2]['sumpoint']){
                $myrank[2]['class']++;
            }
        }
    
        /*==================== Last year sum point and rank in class ========================*/
        $lastsql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
        from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
            "' group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
        $lastyearrankPoints1 = MypageController::Get_RankPoint_for_child($lastsql[1]);
        if(!is_null($lastyearrankPoints1)){
            $count[3]['class'] = count($lastyearrankPoints1);
        }
        else{
            $count[3]['class'] = 1;
        }
        for($i = 0; $i < $count[3]['class']; $i++){
            if($lastyearrankPoints1[$i]->sum > $myrank[3]['sumpoint']){
                $myrank[3]['class']++;
            }
        }
        /*==================== Current season sum point and rank in class ========================*/
        $threemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
        from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
            "' group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
        $threemonthrankPoints1 = MypageController::Get_RankPoint_for_child($threemonthsql[1]);
        if(!is_null($threemonthrankPoints1)){
            $count[0]['class'] = count($threemonthrankPoints1);
        }
        else{
            $count[0]['class'] = 1;
        }
        for($i = 0; $i < $count[0]['class']; $i++){
            if($threemonthrankPoints1[$i]->sum > $myrank[0]['sumpoint']){
                $myrank[0]['class']++;
            }
        }

        /*==================== Last season sum point and rank in class ========================*/
        $beforethreemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
        from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
            "' group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
        $beforethreemonthrankPoints1 = MypageController::Get_RankPoint_for_child($beforethreemonthsql[1]);
        if(!is_null($beforethreemonthrankPoints1)){
            $count[1]['class'] = count($beforethreemonthrankPoints1);
        }
        else{
            $count[1]['class'] = 1;
        }
        for($i = 0; $i < $count[1]['class']; $i++){
            if($beforethreemonthrankPoints1[$i]->sum > $myrank[1]['sumpoint']){
                $myrank[1]['class']++;
            }
        }

        /*==================== All life year sum point and rank in class ========================*/

        $allpointsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
        from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
            " group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
        $allrankPoints1 = MypageController::Get_RankPoint_for_child($allpointsql[1]);
        if(!is_null($allrankPoints1)){
            $count[4]['class'] = count($allrankPoints1);
        }
        else{
            $count[4]['class'] = 1;
        }
        for($i = 0; $i < $count[4]['class']; $i++){
            if($allrankPoints1[$i]->sum > $myrank[4]['sumpoint']){
                $myrank[4]['class']++;
            }
        }

        /*==================== This year sum point and rank in grade  ========================*/
        $sql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in (select classes.id as org_id
                    from classes
                    inner join
                    (select classes.year,classes.grade,classes.group_id
                    from classes
                    where classes.id=(select users.org_id
                    from users
                    where users.id='".
                    $id."')) as table2
                    on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
        $myrankPoints2 = MypageController::Get_RankPoint_for_child($sql[2]);
        if(!is_null($myrankPoints2)){
            $count[2]['grade'] = count($myrankPoints2);
        }
        else{
            $count[2]['grade'] = 1;
        }
        for($i = 0; $i < $count[2]['grade']; $i++){
            if($myrankPoints2[$i]->sum > $myrank[2]['sumpoint']){
                $myrank[2]['grade']++;
            }
        }

        /*==================== Last year sum point and rank in grade ========================*/
        $lastsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in (select classes.id as org_id
                    from classes
                    inner join
                    (select classes.year,classes.grade,classes.group_id
                    from classes
                    where classes.id=(select users.org_id
                    from users
                    where users.id='".
                    $id."')) as table2
                    on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
        $lastyearrankPoints2 = MypageController::Get_RankPoint_for_child($lastsql[2]);
        if(!is_null($lastyearrankPoints2)){
            $count[3]['grade'] = count($lastyearrankPoints2);
        }
        else{
            $count[3]['grade'] = 1;
        }
        for($i = 0; $i < $count[3]['grade']; $i++){
            if($lastyearrankPoints2[$i]->sum > $myrank[3]['sumpoint']){
                $myrank[3]['grade']++;
            }
        }

        /*==================== This season sum point and rank in grade ========================*/
        $threemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in (select classes.id as org_id
                    from classes
                    inner join
                    (select classes.year,classes.grade,classes.group_id
                    from classes
                    where classes.id=(select users.org_id
                    from users
                    where users.id='".
                    $id."')) as table2
                    on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
        $threemonthrankPoints2 = MypageController::Get_RankPoint_for_child($threemonthsql[2]);
        if(!is_null($threemonthrankPoints2)){
            $count[0]['grade'] = count($threemonthrankPoints2);
        }
        else{
            $count[0]['grade'] = 1;
        }
        for($i = 0; $i < $count[0]['grade']; $i++){
            if($threemonthrankPoints2[$i]->sum > $myrank[0]['sumpoint']){
                $myrank[0]['grade']++;
            }
        }

        /*==================== Last season sum point and rank in grade ========================*/
        $beforethreemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in (select classes.id as org_id
                    from classes
                    inner join
                    (select classes.year,classes.grade,classes.group_id
                    from classes
                    where classes.id=(select users.org_id
                    from users
                    where users.id='".
                    $id."')) as table2
                    on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
        $beforethreemonthrankPoints2 = MypageController::Get_RankPoint_for_child($beforethreemonthsql[2]);
        if(!is_null($beforethreemonthrankPoints2)){
            $count[1]['grade'] = count($beforethreemonthrankPoints2);
        }
        else{
            $count[1]['grade'] = 1;
        }
        for($i = 0; $i < $count[1]['grade']; $i++){
            if($beforethreemonthrankPoints2[$i]->sum > $myrank[1]['sumpoint']){
                $myrank[1]['grade']++;
            }
        }

        /*==================== All life year sum point and rank in grade ========================*/
        $allpointsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
            "group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in (select classes.id as org_id
                    from classes
                    inner join
                    (select classes.year,classes.grade,classes.group_id
                    from classes
                    where classes.id=(select users.org_id
                    from users
                    where users.id='".
                    $id."')) as table2
                    on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
        $allrankPoints2 = MypageController::Get_RankPoint_for_child($allpointsql[2]);
        if(!is_null($allrankPoints2)){
            $count[4]['grade'] = count($allrankPoints2);
        }
        else{
            $count[4]['grade'] = 1;
        }
        for($i = 0; $i < $count[4]['grade']; $i++){
            if($allrankPoints2[$i]->sum > $myrank[4]['sumpoint']){
                $myrank[4]['grade']++;
            }
        }
    
        //if($grade == 0){ //学年 0
        /*==================== This year sum point and rank in city ========================*/
        $sql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $myrankPoints3 = MypageController::Get_RankPoint_for_child($sql[3]);
        if(!is_null($myrankPoints3)){
            $count[2]['city'] = count($myrankPoints3);
        }
        else{
            $count[2]['city'] = 1;
        }
        for($i = 0; $i < $count[2]['city']; $i++){
            if($myrankPoints3[$i]->sum > $myrank[2]['sumpoint']){
                $myrank[2]['city']++;
            }
        }

        /*==================== Last year sum point and rank in city ========================*/
        $lastsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            // "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $lastyearrankPoints3 = MypageController::Get_RankPoint_for_child($lastsql[3]);
        if(!is_null($lastyearrankPoints3)){
            $count[3]['city'] = count($lastyearrankPoints3);
        }
        else{
            $count[3]['city'] = 1;
        }
        for($i = 0; $i < $count[3]['city']; $i++){
            if($lastyearrankPoints3[$i]->sum > $myrank[3]['sumpoint']){
                $myrank[3]['city']++;
            }
        }

        /*==================== This season sum point and rank in city ========================*/
        $threemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $threemonthrankPoints3 = MypageController::Get_RankPoint_for_child($threemonthsql[3]);
        if(!is_null($threemonthrankPoints3)){
            $count[0]['city'] = count($threemonthrankPoints3);
        }
        else{
            $count[0]['city'] = 1;
        }
        for($i = 0; $i < $count[0]['city']; $i++){
            if($threemonthrankPoints3[$i]->sum > $myrank[0]['sumpoint']){
                $myrank[0]['city']++;
            }
        }
            
        /*==================== Last season sum point and rank in city ========================*/
        $beforethreemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            // "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $beforethreemonthrankPoints3 = MypageController::Get_RankPoint_for_child($beforethreemonthsql[3]);
        if(!is_null($beforethreemonthrankPoints3)){
            $count[1]['city'] = count($beforethreemonthrankPoints3);
        }
        else{
            $count[1]['city'] = 1;
        }
        for($i = 0; $i < $count[1]['city']; $i++){
            if($beforethreemonthrankPoints3[$i]->sum > $myrank[1]['sumpoint']){
                $myrank[1]['city']++;
            }
        }

        /*==================== All life year sum point and rank in grade ========================*/
        $allpointsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
            "group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
    
        $allrankPoints3 = MypageController::Get_RankPoint_for_child($allpointsql[3]);
        if(!is_null($allrankPoints3)){
            $count[4]['city'] = count($allrankPoints3);
        }
        else{
            $count[4]['city'] = 1;
        }
        for($i = 0; $i < $count[4]['city']; $i++){
            if($allrankPoints3[$i]->sum > $myrank[4]['sumpoint']){
                $myrank[4]['city']++;
            }
        }
        
        //if($grade == 0){ //学年 0    

        /*==================== This year sum point and rank in province ========================*/
        $sql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $myrankPoints4 = MypageController::Get_RankPoint_for_child($sql[4]);
        if(!is_null($myrankPoints4)){
            $count[2]['province'] = count($myrankPoints4);
        }
        else{
            $count[2]['province'] = 1;
        }
        for($i = 0; $i < $count[2]['province']; $i++){
            if($myrankPoints4[$i]->sum > $myrank[2]['sumpoint']){
                $myrank[2]['province']++;
            }
        }

        /*==================== Last year sum point and rank in province ========================*/
        $lastsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $lastyearrankPoints4 = MypageController::Get_RankPoint_for_child($lastsql[4]);
        if(!is_null($lastyearrankPoints4)){
            $count[3]['province'] = count($lastyearrankPoints4);
        }
        else{
            $count[3]['province'] = 1;
        }
        for($i = 0; $i < $count[3]['province']; $i++){
            if($lastyearrankPoints4[$i]->sum > $myrank[3]['sumpoint']){
                $myrank[3]['province']++;
            }
        }

        /*==================== This season sum point and rank in province ========================*/
        $threemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $threemonthrankPoints4 = MypageController::Get_RankPoint_for_child($threemonthsql[4]);
        if(!is_null($threemonthrankPoints4)){
            $count[0]['province'] = count($threemonthrankPoints4);
        }
        else{
            $count[0]['province'] = 1;
        }
        for($i = 0; $i < $count[0]['province']; $i++){
            if($threemonthrankPoints4[$i]->sum > $myrank[0]['sumpoint']){
                $myrank[0]['province']++;
            }
        }
            
        /*==================== Last season sum point and rank in province ========================*/
        $beforethreemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $beforethreemonthrankPoints4 = MypageController::Get_RankPoint_for_child($beforethreemonthsql[4]);
        if(!is_null($beforethreemonthrankPoints4)){
            $count[1]['province'] = count($beforethreemonthrankPoints4);
        }
        else{
            $count[1]['province'] = 1;
        }
        for($i = 0; $i < $count[1]['province']; $i++){
            if($beforethreemonthrankPoints4[$i]->sum > $myrank[1]['sumpoint']){
                $myrank[1]['province']++;
            }
        }

        /*==================== All life year sum point and rank in province ========================*/
        $allpointsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
            "group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        
        $allrankPoints4 = MypageController::Get_RankPoint_for_child($allpointsql[4]);
        if(!is_null($allrankPoints4)){
            $count[4]['province'] = count($allrankPoints4);
        }
        else{
            $count[4]['province'] = 1;
        }
        for($i = 0; $i < $count[4]['province']; $i++){
            if($allrankPoints4[$i]->sum > $myrank[4]['sumpoint']){
                $myrank[4]['province']++;
            }
        }

        //if($grade == 0){ //学年 0  
        /*==================== This year sum point and rank in country ========================*/
        $sql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where  users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $myrankPoints5 = MypageController::Get_RankPoint_for_child($sql[5]);
        if(!is_null($myrankPoints5)){
            $count[2]['nation'] = count($myrankPoints5);
        }
        else{
            $count[2]['nation'] = 1;
        }
        for($i = 0; $i < $count[2]['nation']; $i++){
            if($myrankPoints5[$i]->sum > $myrank[2]['sumpoint']){
                $myrank[2]['nation']++;
            }
        }
            
        /*==================== Last year sum point and rank in country ========================*/
        $lastsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where  users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $lastyearrankPoints5 = MypageController::Get_RankPoint_for_child($lastsql[5]);
        if(!is_null($lastyearrankPoints5)){
            $count[3]['nation'] = count($lastyearrankPoints5);
        }
        else{
            $count[3]['nation'] = 1;
        }
        for($i = 0; $i < $count[3]['nation']; $i++){
            if($lastyearrankPoints5[$i]->sum > $myrank[3]['sumpoint']){
                $myrank[3]['nation']++;
            }
        }

        /*==================== This season sum point and rank in country ========================*/
        $threemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where  users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $threemonthrankPoints5 = MypageController::Get_RankPoint_for_child($threemonthsql[5]);
        if(!is_null($threemonthrankPoints5)){
            $count[0]['nation'] = count($threemonthrankPoints5);
        }
        else{
            $count[0]['nation'] = 1;
        }
        for($i = 0; $i < $count[0]['nation']; $i++){
            if($threemonthrankPoints5[$i]->sum > $myrank[0]['sumpoint']){
                $myrank[0]['nation']++;
            }
        }

        /*==================== Last season sum point and rank in country ========================*/
        $beforethreemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
            "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
            "'group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where  users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
        $beforethreemonthrankPoints5 = MypageController::Get_RankPoint_for_child($beforethreemonthsql[5]);
        if(!is_null($beforethreemonthrankPoints5)){
            $count[1]['nation'] = count($beforethreemonthrankPoints5);
        }
        else{
            $count[1]['nation'] = 1;
        }
        for($i = 0; $i < $count[1]['nation']; $i++){
            if($beforethreemonthrankPoints5[$i]->sum > $myrank[1]['sumpoint']){
                $myrank[1]['nation']++;
            }
        }

        /*==================== All life year sum point and rank in country ========================*/
        $allpointsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
            from users left join 
            (select user_id, SUM(user_quizes.point) AS sum 
            from user_quizes 
            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
            "group by user_id) as table1
            on users.id=table1.user_id
            where  ".
            "users.role=".$role." and users.active=1 and ".
            "users.org_id in ".
            "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
            //     "(select classes.id
            //     from classes  inner join
            //         (select users.id,table2.*
            //         from users,
            //             (select users.address1,users.address2,users.group_type,table1.*
            //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
            //                                         where classes.id=(select users.org_id from users where users.id='".
            //                                             $id."')) as table1
            //                 where users.id=table1.group_id) as table2
            //         where  users.group_type=table2.group_type and ".
            //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
            //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
            // ") as table1";
    
        $allrankPoints5 = MypageController::Get_RankPoint_for_child($allpointsql[5]);
        if(!is_null($allrankPoints5)){
            $count[4]['nation'] = count($allrankPoints5);
        }
        else{
            $count[4]['nation'] = 1;
        }
        for($i = 0; $i < $count[4]['nation']; $i++){
            if($allrankPoints5[$i]->sum > $myrank[4]['sumpoint']){
                $myrank[4]['nation']++;
            }
        }


        $this->page_info['side'] = 'rank_child';
        $this->page_info['subside'] = 'rank_child';
        return view('mypage.personal.rank.rank_child')
            ->with('this_season',$this_season)
            ->with('mysumpoint',$mysumpoint)
            ->with('myrank',$myrank)
            ->with('count',$count)
            ->with('current_season', $current_season)
            ->with('before_season', $before_season)
            ->with('otherview_flag',$otherview_flag)
            ->with('point_ranking_is_public', $this->point_ranking_is_public)
            ->with('page_info', $this->page_info)
            ->with('id',$id);
    }


    public function rank_by_age(Request $request, $id = null, $other_flag = false){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        $this->point_ranking_is_public = $user->point_ranking_is_public;
        if($id != Auth::id() || ($id != null && $other_flag)) 
            $otherview_flag = true;

        $rankingage = 1;
        $grade = null;

        if($user->isPupil() && $user->active == 1){
            $groupbyuser = $user->ClassOfPupil->School()->first();
            if($groupbyuser->group_type == 0)
                $rankingage = 1; //小学生
            elseif($groupbyuser->group_type == 1)
                $rankingage = 2; //中学生
            elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                $rankingage = 3; //高校生
            else
                $rankingage = 4; //大学生
        }else{
            $curage = $user->age();
            $today = now();
            
            if($curage <= 11){
                $rankingage = 1;
            }
            elseif($curage > 11 && $curage <= 14){
                $rankingage = 2;
            }
            else{
                $rankingage = floor($curage / 10);
                $rankingage = $rankingage + 4; 
            }
        }
        $myrankingage = $rankingage; 
        if($request->has('ranking_age'))
        {
            $rankingage = $request->input('ranking_age');
        }

        $today_month = now()->format('m');
        $today = now();
        if($today < Carbon::create((Date("Y")), 4, 1,0,0,0))
        {
            $this_season = 3;
            $this_season_term = 3;
            $before_season_term = 7;
        }
        elseif($today < Carbon::create((Date("Y")), 7, 1,0,0,0)){
            $this_season = 0;
            $this_season_term = 0;
            $before_season_term = 3;
        }
        elseif($today < Carbon::create((Date("Y")), 10, 1,0,0,0)){
            $this_season = 1;
            $this_season_term = 1;
            $before_season_term = 0;
        }
        elseif($today <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
            $this_season = 2;
            $this_season_term = 2;
            $before_season_term = 1;
        }
        /*elseif($today >= Carbon::create((Date("Y")), 12, 21,0,0,0))
        {
            $this_season = 3;
            $this_season_term = 4;
            $before_season_term = 2;
        }*/

        //calculate point
        if($user->isPupil() && $user->active == 1){
            $current_season = MypageController::CurrentSeaon_Pupil(now());
            $date = date_sub(now(), date_interval_create_from_date_string("3 months"));
            $before_season = MypageController::CurrentSeaon_Pupil($date);
            $before_seasonfrom_num = $before_season['begin_season'];
            $before_seasonto_num = $before_season['end_season'];
        }else{
            $current_season = MypageController::CurrentSeaon(now());
            $date = date_sub(now(), date_interval_create_from_date_string("3 months"));
            $before_season = MypageController::CurrentSeaon($date);
            $before_seasonfrom_num = $before_season['begin_season'];
            $before_seasonto_num = $before_season['end_season']; 
        }
        
        $mysumpoint[0] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$current_season['begin_season'])
            ->where('created_date','<=',$current_season['end_season'])
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        $mysumpoint[1] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$before_seasonfrom_num)
            ->where('created_date','<=',$before_seasonto_num)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        $mysumpoint[2] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0), Carbon::create($current_season['end_thisyear'],3,31,23,59,59)))
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
       
        $mysumpoint[3] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0), Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)))
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        $mysumpoint[4]  = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->leftjoin('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->first();
        
        $cityRank[0] = UserQuiz::cityranking($current_season['term'], $current_season, 1, $rankingage, $user)->get();
        $cityRank[1] = UserQuiz::cityranking($before_season['term'], $before_season, 1, $rankingage, $user)->get();
        $cityRank[2] = UserQuiz::cityranking(21, $current_season, 1, $rankingage, $user)->get();
        $cityRank[3] = UserQuiz::cityranking(22, $current_season, 1, $rankingage, $user)->get();
        $cityRank[4] = UserQuiz::cityranking(23, $current_season, 1, $rankingage, $user)->get();
        
        if($myrankingage == $rankingage) $count['city'] = $cityRank[4]->count();
        else $count['city'] = $cityRank[4]->count() + 1;
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['city'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($cityRank[$j]);$i++){
                if($cityRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    if($i == 0){
                        $myrank[$j]['city']++;
                    }
                    else{
                        if($cityRank[$j][$i - 1]->sumpoint != $cityRank[$j][$i]->sumpoint){
                            $myrank[$j]['city']++;
                        }
                    }
                }
            }
        }

        //provinceRanking
        $provinceRank[0] = UserQuiz::provinceranking($current_season['term'],$current_season,1,$rankingage, $user)->get();
        $provinceRank[1] = UserQuiz::provinceranking($before_season['term'],$before_season,1,$rankingage, $user)->get();
        $provinceRank[2] = UserQuiz::provinceranking(21,$current_season,1,$rankingage, $user)->get();
        $provinceRank[3] = UserQuiz::provinceranking(22,$current_season,1,$rankingage, $user)->get();
        $provinceRank[4] = UserQuiz::provinceranking(23,$current_season,1,$rankingage, $user)->get();
        
        if($myrankingage == $rankingage) $count['province'] = $provinceRank[4]->count();
        else $count['province'] = $provinceRank[4]->count() + 1;

        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['province'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($provinceRank[$j]);$i++){
                if($provinceRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    if($i == 0){
                        $myrank[$j]['province']++;
                    }
                    else{
                        if($provinceRank[$j][$i - 1]->sumpoint != $provinceRank[$j][$i]->sumpoint){
                            $myrank[$j]['province']++;
                        }
                    }
                    // break;
                }
            }
        }
        //nationRanking
        $nationRank[0] = UserQuiz::nationranking($current_season['term'],$current_season,1,$rankingage, $user)->get();
        $nationRank[1] = UserQuiz::nationranking($before_season['term'],$before_season,1,$rankingage, $user)->get();
        $nationRank[2] = UserQuiz::nationranking(21,$current_season,1,$rankingage, $user)->get();
        $nationRank[3] = UserQuiz::nationranking(22,$current_season,1,$rankingage, $user)->get();
        $nationRank[4] = UserQuiz::nationranking(23,$current_season,1,$rankingage, $user)->get();
        
        if($myrankingage == $rankingage) $count['nation'] = $nationRank[4]->count();
        else $count['nation'] = $nationRank[4]->count() + 1;

        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['nation'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($nationRank[$j]);$i++){
                if($nationRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    if($i == 0){
                        $myrank[$j]['nation']++;
                    }
                    else{
                        if($nationRank[$j][$i - 1]->sumpoint != $nationRank[$j][$i]->sumpoint)
                        {
                            $myrank[$j]['nation']++;
                        }
                    }
                    // break;
                }
            }
        }

        $this->page_info['side'] = 'rank_child';
        $this->page_info['subside'] = 'rank_by_age';

        return view('mypage.personal.rank.rank_by_age')
            ->with('page_info', $this->page_info)
            ->with('ranking_age',$rankingage)
            ->with('this_season',$this_season)
            ->with('mysumpoint',$mysumpoint)
            ->with('myrank',$myrank)
            ->with('otherview_flag',$otherview_flag)
            ->with('id',$id)
            ->with('current_season',$current_season)
            ->with('before_season',$before_season)
            ->with('point_ranking_is_public', $this->point_ranking_is_public)
            ->with('count',$count);
    }

    public function rank_graph(Request $request, $id = null){

        //$otherview_flag = $request->input('otherview_flag');
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        if($id != Auth::id()) 
            $otherview_flag = true;
        //$user = User::where('id', $id)->first();
        $role = $user->role;
        $today = now();
        $rankingage = 1;

        if($user->isPupil() && $user->active == 1){
            $groupbyuser = $user->ClassOfPupil->School()->first();
            if($groupbyuser != null){
                if($groupbyuser->group_type == 0)
                    $rankingage = 1; //小学生
                elseif($groupbyuser->group_type == 1)
                    $rankingage = 2; //中学生
                elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                    $rankingage = 3; //高校生
                else
                    $rankingage = 4; //大学生
            }
        }else{
            $curage = $user->age();
            
            if($curage <= 11){
                $rankingage = 1;
            }
            elseif($curage > 11 && $curage <= 14){
                $rankingage = 2;
            }
            else{
                $rankingage = floor($curage / 10);
                $rankingage = $rankingage + 4; 
            }
        }
        $search_birthday = []; 
        $search_birthday = MypageController::search_birthday($rankingage); 

        if($user->isPupil() && $user->active == 1)
            $current_season = MypageController::CurrentSeaon_Pupil(now());
        else
            $current_season = MypageController::CurrentSeaon(now());
        //before_season
        $date = date_sub(now(), date_interval_create_from_date_string("3 months"));
        if($user->isPupil() && $user->active == 1)
            $before_season = MypageController::CurrentSeaon_Pupil($date);
        else
            $before_season = MypageController::CurrentSeaon($date);

        $type = 1;$tagrgetpoint = 1;$grade = 0;
        $class = DB::table("users")
            ->select('org.group_type', 'classes.grade')
            ->join('classes','classes.id','=','users.org_id')
            ->join('users as org', 'classes.group_id',DB::raw('org.id'))
            ->where('users.role','=', config('consts')['USER']['ROLE']["PUPIL"]) 
            ->where('users.id','=',$id)
            ->where('users.active','=', 1) 
            ->first();
        if($class !== null){
            $type = $class->group_type;
            $grade = $class->grade;

            if($type ==0){
                if($grade == 1) $tagrgetpoint = 7;
                elseif($grade == 2) $tagrgetpoint = 13;
                elseif($grade == 3) $tagrgetpoint = 20;
                elseif($grade == 4) $tagrgetpoint = 35;   
                elseif($grade == 5) $tagrgetpoint = 50;
                elseif($grade == 6) $tagrgetpoint = 70;
                else $tagrgetpoint = 0; 
            }
        }
        $myrankPoints1 = [];
        $myrankPoints2 = [];
        $myrankPoints3 = [];
        $myrankPoints4 = [];
        $myrankPoints5 = [];
        $threemonthrankPoints1 = [];
        $threemonthrankPoints2 = [];
        $threemonthrankPoints3 = [];
        $threemonthrankPoints4 = [];
        $threemonthrankPoints5 = [];
        $beforethreemonthrankPoints1 = [];
        $beforethreemonthrankPoints2 = [];
        $beforethreemonthrankPoints3 = [];
        $beforethreemonthrankPoints4 = [];
        $beforethreemonthrankPoints5 = [];
        $allrankPoints1 = [];
        $allrankPoints2 = [];
        $allrankPoints3 = [];
        $allrankPoints4 = [];
        $allrankPoints5 = [];
        $lastyearrankPoints1 = [];
        $lastyearrankPoints2 = [];
        $lastyearrankPoints3 = [];
        $lastyearrankPoints4 = [];
        $lastyearrankPoints5 = [];
        if($user->isPupil() && $user->active == 1){
    
                $sql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
                $myrankPoints1 = MypageController::Get_RankPoint($sql[1]);

                $lastsql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
                $lastyearrankPoints1 = MypageController::Get_RankPoint($lastsql[1]);

                $threemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
                $threemonthrankPoints1 = MypageController::Get_RankPoint($threemonthsql[1]);

                $beforethreemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
                $beforethreemonthrankPoints1 = MypageController::Get_RankPoint($beforethreemonthsql[1]);


                $allpointsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    " group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
                $allrankPoints1 = MypageController::Get_RankPoint($allpointsql[1]);

                $sql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in (select classes.id as org_id
                            from classes
                            inner join
                            (select classes.year,classes.grade,classes.group_id
                            from classes
                            where classes.id=(select users.org_id
                            from users
                            where users.id='".
                            $id."')) as table2
                            on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                $myrankPoints2 = MypageController::Get_RankPoint($sql[2]);

                $lastsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in (select classes.id as org_id
                            from classes
                            inner join
                            (select classes.year,classes.grade,classes.group_id
                            from classes
                            where classes.id=(select users.org_id
                            from users
                            where users.id='".
                            $id."')) as table2
                            on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                $lastyearrankPoints2 = MypageController::Get_RankPoint($lastsql[2]);

                $threemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in (select classes.id as org_id
                            from classes
                            inner join
                            (select classes.year,classes.grade,classes.group_id
                            from classes
                            where classes.id=(select users.org_id
                            from users
                            where users.id='".
                            $id."')) as table2
                            on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                $threemonthrankPoints2 = MypageController::Get_RankPoint($threemonthsql[2]);

                $beforethreemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in (select classes.id as org_id
                            from classes
                            inner join
                            (select classes.year,classes.grade,classes.group_id
                            from classes
                            where classes.id=(select users.org_id
                            from users
                            where users.id='".
                            $id."')) as table2
                            on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                $beforethreemonthrankPoints2 = MypageController::Get_RankPoint($beforethreemonthsql[2]);

                $allpointsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in (select classes.id as org_id
                            from classes
                            inner join
                            (select classes.year,classes.grade,classes.group_id
                            from classes
                            where classes.id=(select users.org_id
                            from users
                            where users.id='".
                            $id."')) as table2
                            on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                $allrankPoints2 = MypageController::Get_RankPoint($allpointsql[2]);

                $grade = $user->ClassOfPupil->grade;
                $grade_odds = $grade % 2;
            
                //if($grade == 0){ //学年 0
                    $sql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        // "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $lastsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $threemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and ".
                        "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                        
                    $beforethreemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";

                    $allpointsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                        "group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                
                $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
                $lastyearrankPoints3 = MypageController::Get_RankPoint($lastsql[3]);
                $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonthsql[3]);
                $beforethreemonthrankPoints3 = MypageController::Get_RankPoint($beforethreemonthsql[3]);
                $allrankPoints3 = MypageController::Get_RankPoint($allpointsql[3]);
                
                //if($grade == 0){ //学年 0       
                $sql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                    "users.org_id in ".
                    "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                    //     "(select classes.id
                    //     from classes  inner join
                    //         (select users.id,table2.*
                    //         from users,
                    //             (select users.address1,users.address2,users.group_type,table1.*
                    //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                    //                                         where classes.id=(select users.org_id from users where users.id='".
                    //                                             $id."')) as table1
                    //                 where users.id=table1.group_id) as table2
                    //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                    //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    // ") as table1";
                    $lastsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                    "users.org_id in ".
                    "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                    //     "(select classes.id
                    //     from classes  inner join
                    //         (select users.id,table2.*
                    //         from users,
                    //             (select users.address1,users.address2,users.group_type,table1.*
                    //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                    //                                         where classes.id=(select users.org_id from users where users.id='".
                    //                                             $id."')) as table1
                    //                 where users.id=table1.group_id) as table2
                    //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                    //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    // ") as table1";
                    $threemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                    "users.org_id in ".
                    "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                    //     "(select classes.id
                    //     from classes  inner join
                    //         (select users.id,table2.*
                    //         from users,
                    //             (select users.address1,users.address2,users.group_type,table1.*
                    //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                    //                                         where classes.id=(select users.org_id from users where users.id='".
                    //                                             $id."')) as table1
                    //                 where users.id=table1.group_id) as table2
                    //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                    //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    // ") as table1";
                    
                    $beforethreemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                    "users.org_id in ".
                    "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                    //     "(select classes.id
                    //     from classes  inner join
                    //         (select users.id,table2.*
                    //         from users,
                    //             (select users.address1,users.address2,users.group_type,table1.*
                    //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                    //                                         where classes.id=(select users.org_id from users where users.id='".
                    //                                             $id."')) as table1
                    //                 where users.id=table1.group_id) as table2
                    //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                    //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    // ") as table1";

                    $allpointsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                    "users.org_id in ".
                    "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                    //     "(select classes.id
                    //     from classes  inner join
                    //         (select users.id,table2.*
                    //         from users,
                    //             (select users.address1,users.address2,users.group_type,table1.*
                    //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                    //                                         where classes.id=(select users.org_id from users where users.id='".
                    //                                             $id."')) as table1
                    //                 where users.id=table1.group_id) as table2
                    //         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                    //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    // ") as table1";
                
                $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
                $lastyearrankPoints4 = MypageController::Get_RankPoint($lastsql[4]);
                $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonthsql[4]);
                $beforethreemonthrankPoints4 = MypageController::Get_RankPoint($beforethreemonthsql[4]);
                $allrankPoints4 = MypageController::Get_RankPoint($allpointsql[4]);

                //if($grade == 0){ //学年 0  
                    $sql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where  users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $lastsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where  users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $threemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where  users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $beforethreemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".$before_season['begin_season']."' and '".$before_season['end_season'].
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where  users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                    $allpointsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                        "group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                        "(select classes.id from classes where classes.grade = ".$grade.")) as table1";
                        //     "(select classes.id
                        //     from classes  inner join
                        //         (select users.id,table2.*
                        //         from users,
                        //             (select users.address1,users.address2,users.group_type,table1.*
                        //                 from users,(select classes.year,classes.grade,classes.group_id from classes 
                        //                                         where classes.id=(select users.org_id from users where users.id='".
                        //                                             $id."')) as table1
                        //                 where users.id=table1.group_id) as table2
                        //         where  users.group_type=table2.group_type and ".
                        //         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        //     on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        // ") as table1";
                
                $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);
                $lastyearrankPoints5 = MypageController::Get_RankPoint($lastsql[5]);
                $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonthsql[5]);
                $beforethreemonthrankPoints5 = MypageController::Get_RankPoint($beforethreemonthsql[5]);
                $allrankPoints5 = MypageController::Get_RankPoint($allpointsql[5]);
        }
        else{
            
                $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
                $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

                $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";
                $lastsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                    and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";
                $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                    and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";
                $beforethreesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                    and created_date between '".$before_season['begin_season']."' and '". $before_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";
                $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".$id."' or (";                
                        
                $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $lastsql[3]=$lastsql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                
                $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $beforethreemonth_sql[3]= $beforethreesql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                
                $sql[4]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $lastsql[4]=$lastsql_temp." users.id in (select users.id from users,
                                (select users.address1
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                                (select users.address1
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $beforethreemonth_sql[4]= $beforethreesql_temp." users.id in (select users.id from users,
                                (select users.address1
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                                (select users.address1
                                from users
                                where users.id='".$id."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
                $sql[5]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $lastsql[5]=$lastsql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $beforethreemonth_sql[5]= $beforethreesql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                                    
                $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
                $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
                $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
                $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
                $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
                $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
                $beforethreemonthrankPoints3 = MypageController::Get_RankPoint($beforethreemonth_sql[3]);
                $beforethreemonthrankPoints4 = MypageController::Get_RankPoint($beforethreemonth_sql[4]);
                $beforethreemonthrankPoints5 = MypageController::Get_RankPoint($beforethreemonth_sql[5]); 
                $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
                $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
                $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]);   
                $lastyearrankPoints3 = MypageController::Get_RankPoint($lastsql[3]);
                $lastyearrankPoints4 = MypageController::Get_RankPoint($lastsql[4]);
                $lastyearrankPoints5 = MypageController::Get_RankPoint($lastsql[5]);  
        }

        $season_str=$current_season['season']."(".$current_season['from_num'].'~'.$current_season['to_num'].")";
        $beforeseason_str=$before_season['season']."(".$before_season['from_num'].'~'.$before_season['to_num'].")";

        $prevyear = date("Y")-1;
        $thisyear = date("Y");  
        if($user->isAuthor()){
            $myuser = $user->firstname_nick;
            $myuser.= $user->lastname_nick;
        }else{
            $myuser = $user->firstname;
            $myuser.= $user->lastname;
        }      
        

        if($user->isTeacher()){
            $myuser.= " 教師";
        }else if($user->isRepresen()){
            $myuser.= " 代表";
        }else if($user->isItmanager()){
            $myuser.= " IT担当者";
        }else if($user->isOther()){
            $myuser.= " その他";
        }else if($user->isLibrarian()){
            $myuser.= " 司書";
        }else if($user->isGeneral()){
            $myuser.= " 一般";
        }else if($user->isOverseer()){
            $myuser.= " 監修者";
        }else if($user->isAuthor()){
            $myuser.= " 著者";
        }else if($user->isPupil() && $user->active == 1){
            $class = $user->ClassOfPupil;
            if($class->school != null){
                $type = $class->school->group_type;
                if($type == 0)
                    $myuser.= " 小学";
                else if($type == 1)
                    $myuser.= " 中学";
                else if($type == 2)
                    $myuser.= " 中高";
                else if($type == 3)
                    $myuser.= " 高学";
                else if($type == 4)
                    $myuser.= " 大学";
            }

            if($class->grade != 0)
                 $myuser.= $class->grade;

             $myuser.= "年生";
        }
        $mygrade = DB::table('classes')
            ->select('grade')
            ->where('classes.id','=',$user->org_id)
            ->first();

        $this->page_info['side'] = 'rank_child';
        $this->page_info['subside'] = 'rank_graph';
        return view('mypage.personal.rank.rank_graph')
            ->with('myrankPoints1', $myrankPoints1)
            ->with('myrankPoints2', $myrankPoints2)
            ->with('myrankPoints3', $myrankPoints3)
            ->with('myrankPoints4', $myrankPoints4)
            ->with('myrankPoints5', $myrankPoints5)
            ->with('threemonthrankPoints1', $threemonthrankPoints1)
            ->with('threemonthrankPoints2', $threemonthrankPoints2)
            ->with('threemonthrankPoints3', $threemonthrankPoints3)
            ->with('threemonthrankPoints4', $threemonthrankPoints4)
            ->with('threemonthrankPoints5', $threemonthrankPoints5)
            ->with('beforethreemonthrankPoints1', $beforethreemonthrankPoints1)
            ->with('beforethreemonthrankPoints2', $beforethreemonthrankPoints2)
            ->with('beforethreemonthrankPoints3', $beforethreemonthrankPoints3)
            ->with('beforethreemonthrankPoints4', $beforethreemonthrankPoints4)
            ->with('beforethreemonthrankPoints5', $beforethreemonthrankPoints5)
            ->with('allrankPoints1', $allrankPoints1)
            ->with('allrankPoints2', $allrankPoints2)
            ->with('allrankPoints3', $allrankPoints3)
            ->with('allrankPoints4', $allrankPoints4)
            ->with('allrankPoints5', $allrankPoints5)
            ->with('lastyearrankPoints1', $lastyearrankPoints1)
            ->with('lastyearrankPoints2', $lastyearrankPoints2)
            ->with('lastyearrankPoints3', $lastyearrankPoints3)
            ->with('lastyearrankPoints4', $lastyearrankPoints4)
            ->with('lastyearrankPoints5', $lastyearrankPoints5)
            ->with('type', $type)
            ->with('current_season', $current_season)
            ->with('season_str', $season_str)
            ->with('beforeseason_str', $beforeseason_str)
            ->with('user',$user)
            ->with('myuser', $myuser)
            ->with('max_sum', 50)
            ->with('mygrade',$mygrade)
            ->with('otherview_flag',$otherview_flag)
            ->with('page_info', $this->page_info);
    }

    public function rank_bq(Request $request, $id = null, $other_flag = false){
        
        //        if(!Auth::user()->isGeneral()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        $this->register_point_ranking_is_public = $user->register_point_ranking_is_public;
        if($id != Auth::id() || ($id != null && $other_flag)) 
            $otherview_flag = true;
        $rankingage = 1;
        $type = 0;
        $grade = null;
        if($user->isPupil() && $user->active == 1){
            $groupbyuser = $user->ClassOfPupil->School()->first();
            if($groupbyuser != null){
                if($groupbyuser->group_type == 0)
                    $rankingage = 1; //小学生
                elseif($groupbyuser->group_type == 1)
                    $rankingage = 2; //中学生
                elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                    $rankingage = 3; //高校生
                else
                    $rankingage = 4; //大学生
            }
        }else{
            $curage = $user->age();
            $today = now();
            
            if($curage <= 11){
                $rankingage = 1;
            }
            elseif($curage > 11 && $curage <= 14){
                $rankingage = 2;
            }
            else{
                $rankingage = floor($curage / 10);
                $rankingage = $rankingage + 4; 
            }
        }
        $myrankingage = $rankingage; 
        if($request->has('ranking_age'))
        {
            $rankingage = $request->input('ranking_age');
        }
        
        $today_month = now()->format('m');
        $today = now();
        if($user->isPupil() && $user->active == 1){
            if($today < Carbon::create((Date("Y")), 4, 1,0,0,0))
            {
                $this_season = 3;
                $this_season_term = 3;
                $before_season_term = 7;
            }
            elseif($today < Carbon::create((Date("Y")), 7, 1,0,0,0)){
                $this_season = 0;
                $this_season_term = 0;
                $before_season_term = 3;
            }
            elseif($today < Carbon::create((Date("Y")), 10, 1,0,0,0)){
                $this_season = 1;
                $this_season_term = 1;
                $before_season_term = 0;
            }
            elseif($today <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
                $this_season = 2;
                $this_season_term = 2;
                $before_season_term = 1;
            }
            /*elseif($today > Carbon::create((Date("Y")), 12, 20,23,59,59))
            {
                $this_season = 3;
                $this_season_term = 4;
                $before_season_term = 2;
            }*/
        }else{
            if($today < Carbon::create((Date("Y")), 4, 1,0,0,0))
            {
                $this_season = 3;
                $this_season_term = 3;
                $before_season_term = 7;
            }
            elseif($today < Carbon::create((Date("Y")), 7, 1,0,0,0)){
                $this_season = 0;
                $this_season_term = 0;
                $before_season_term = 3;
            }
            elseif($today < Carbon::create((Date("Y")), 10, 1,0,0,0)){
                $this_season = 1;
                $this_season_term = 1;
                $before_season_term = 0;
            }
            elseif($today <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
                $this_season = 2;
                $this_season_term = 2;
                $before_season_term = 1;
            }
            /*elseif($today > Carbon::create((Date("Y")), 12, 20,23,59,59))
            {
                $this_season = 3;
                $this_season_term = 4;
                $before_season_term = 2;
            }*/
        }
        
        //calculate point
        if($user->isPupil() && $user->active == 1){
            $current_season = MypageController::CurrentSeaon_Pupil(now());
            $date = date_sub(now(), date_interval_create_from_date_string("3 months"));
            $before_season = MypageController::CurrentSeaon_Pupil($date);
            $before_seasonfrom_num = $before_season['begin_season'];
            $before_seasonto_num = $before_season['end_season'];
        }else{
            $current_season = MypageController::CurrentSeaon(now());
            $date = date_sub(now(), date_interval_create_from_date_string("3 months"));
            $before_season = MypageController::CurrentSeaon($date);
            $before_seasonfrom_num = $before_season['begin_season'];
            $before_seasonto_num = $before_season['end_season'];
        }
        
        $mysumpoint[0] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$current_season['from_num'])
            ->where('created_date','<=',$current_season['to_num'])
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                });
            })
            ->first();
        $mysumpoint[1] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$before_seasonfrom_num)
            ->where('created_date','<=',$before_seasonto_num)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                });
            })
            ->first();
        if($user->isPupil() && $user->active == 1){
            $mysumpoint[2] = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('users','users.id','=','user_quizes.user_id')
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0), Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)))
                //->where('users.role','=',$role)
                ->where('user_id','=',$id)
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
               ->first();
            $mysumpoint[3] = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('users','users.id','=','user_quizes.user_id')
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0), Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)))
                //->where('users.role','=',$role)
                ->where('user_id','=',$id)
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->first();
        }
        else{
            $mysumpoint[2] = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('users','users.id','=','user_quizes.user_id')
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0), Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)))
                //->where('users.role','=',$role)
                ->where('user_id','=',$id)
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->first();
            $mysumpoint[3] = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('users','users.id','=','user_quizes.user_id')
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0), Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)))
                //->where('users.role','=',$role)
                ->where('user_id','=',$id)
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->first();
        }
        
        
        $mysumpoint[4]  = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                });
            })
            ->first();

        //cityRanking
        $cityRank[0] = UserQuiz::cityquizranking($current_season['term'],$current_season, $rankingage, $user)->get();
        $cityRank[1] = UserQuiz::cityquizranking($before_season['term'],$before_season,$rankingage, $user)->get();
        $cityRank[2] = UserQuiz::cityquizranking(21,$current_season,$rankingage, $user)->get();
        $cityRank[3] = UserQuiz::cityquizranking(22,$current_season,$rankingage, $user)->get();
        $cityRank[4] = UserQuiz::cityquizranking(23,$current_season,$rankingage, $user)->get();
        
        if($myrankingage == $rankingage) $count['city'] = $cityRank[4]->count();
        else $count['city'] = $cityRank[4]->count() + 1;

        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['city'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($cityRank[$j]);$i++){
                if($cityRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    if($i == 0){
                        $myrank[$j]['city']++;
                    }
                    else{
                        if($cityRank[$j][$i - 1]->sumpoint != $cityRank[$j][$i]->sumpoint) {
                            $myrank[$j]['city']++;
                        }
                    }
                }
            }
        }

        //provinceRanking
        $provinceRank[0] = UserQuiz::provincequizranking($current_season['term'],$current_season,$rankingage, $user)->get();
        $provinceRank[1] = UserQuiz::provincequizranking($before_season['term'],$before_season,$rankingage, $user)->get();
        $provinceRank[2] = UserQuiz::provincequizranking(21,$current_season,$rankingage, $user)->get();
        $provinceRank[3] = UserQuiz::provincequizranking(22,$current_season,$rankingage, $user)->get();
        $provinceRank[4] = UserQuiz::provincequizranking(23,$current_season,$rankingage, $user)->get();
        //$count['province'] = User::Countusers_byage($rankingage, $grade)->where('users.address1',$user->address1)->count();
        if($myrankingage == $rankingage) $count['province'] = $provinceRank[4]->count();
        else $count['province'] = $provinceRank[4]->count() + 1;

        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['province'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($provinceRank[$j]);$i++){
                if($provinceRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    if($i == 0){
                        $myrank[$j]['province']++;
                    }
                    else{
                        if($provinceRank[$j][$i - 1]->sumpoint != $provinceRank[$j][$i]->sumpoint){
                            $myrank[$j]['province']++;
                        }
                    }
                }
            }
        }

        //nationRanking
        $nationRank[0] = UserQuiz::nationquizranking($current_season['term'],$current_season,$rankingage, $user)->get();
        $nationRank[1] = UserQuiz::nationquizranking($before_season['term'],$before_season,$rankingage, $user)->get();
        $nationRank[2] = UserQuiz::nationquizranking(21,$current_season,$rankingage, $user)->get();
        $nationRank[3] = UserQuiz::nationquizranking(22,$current_season,$rankingage, $user)->get();
        $nationRank[4] = UserQuiz::nationquizranking(23,$current_season,$rankingage, $user)->get();
       
        if($myrankingage == $rankingage) $count['nation'] = $nationRank[4]->count();
        else $count['nation'] = $nationRank[4]->count() + 1;
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['nation'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($nationRank[$j]);$i++){
                if($nationRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    if($i == 0){
                        $myrank[$j]['nation']++;
                    }
                    else{
                        if($nationRank[$j][$i - 1]->sumpoint != $nationRank[$j][$i]->sumpoint){
                            $myrank[$j]['nation']++;
                        }
                    }
                }
            }
        }

        $this->page_info['side'] = 'rank_child';
        //$this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'rank_bq';
        return view('mypage.personal.rank.rank_bq')
            ->with('page_info', $this->page_info)
            ->with('ranking_age',$rankingage)
            ->with('this_season',$this_season)
            ->with('mysumpoint',$mysumpoint)
            ->with('myrank',$myrank)
            ->with('id',$id)
            ->with('current_season',$current_season)
            ->with('before_season',$before_season)
            ->with('otherview_flag',$otherview_flag)
            ->with('register_point_ranking_is_public', $this->register_point_ranking_is_public)
            ->with('count',$count);
    }

    public function rank_bq_child(Request $request, $id = null){
        
        //        if(!Auth::user()->isGeneral()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        $this->register_point_ranking_is_public = $user->register_point_ranking_is_public;
        if($id != Auth::id()) 
            $otherview_flag = true;
        $rankingage = 1;
        $type = 0;
        $grade = null;
        if($user->isPupil() && $user->active == 1){
            $groupbyuser = $user->ClassOfPupil->School()->first();
            if($groupbyuser != null){
                if($groupbyuser->group_type == 0)
                    $rankingage = 1; //小学生
                elseif($groupbyuser->group_type == 1)
                    $rankingage = 2; //中学生
                elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                    $rankingage = 3; //高校生
                else
                    $rankingage = 4; //大学生
            }
        }else{
            $curage = $user->age();
            $today = now();
            
            if($curage <= 11){
                $rankingage = 1;
            }
            elseif($curage > 11 && $curage <= 14){
                $rankingage = 2;
            }
            else{
                $rankingage = floor($curage / 10);
                $rankingage = $rankingage + 4; 
            }
        }
        $myrankingage = $rankingage; 
        if($request->has('ranking_age'))
        {
            $rankingage = $request->input('ranking_age');
        }
        
        $today_month = now()->format('m');
        $today = now();
        if($user->isPupil() && $user->active == 1){
            if($today < Carbon::create((Date("Y")), 4, 1,0,0,0))
            {
                $this_season = 3;
                $this_season_term = 3;
                $before_season_term = 7;
            }
            elseif($today < Carbon::create((Date("Y")), 7, 1,0,0,0)){
                $this_season = 0;
                $this_season_term = 0;
                $before_season_term = 3;
            }
            elseif($today < Carbon::create((Date("Y")), 10, 1,0,0,0)){
                $this_season = 1;
                $this_season_term = 1;
                $before_season_term = 0;
            }
            elseif($today <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
                $this_season = 2;
                $this_season_term = 2;
                $before_season_term = 1;
            }
            /*elseif($today > Carbon::create((Date("Y")), 12, 20,23,59,59))
            {
                $this_season = 3;
                $this_season_term = 4;
                $before_season_term = 2;
            }*/
        }else{
            if($today < Carbon::create((Date("Y")), 4, 1,0,0,0))
            {
                $this_season = 3;
                $this_season_term = 3;
                $before_season_term = 7;
            }
            elseif($today < Carbon::create((Date("Y")), 7, 1,0,0,0)){
                $this_season = 0;
                $this_season_term = 0;
                $before_season_term = 3;
            }
            elseif($today < Carbon::create((Date("Y")), 10, 1,0,0,0)){
                $this_season = 1;
                $this_season_term = 1;
                $before_season_term = 0;
            }
            elseif($today <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
                $this_season = 2;
                $this_season_term = 2;
                $before_season_term = 1;
            }
            /*elseif($today > Carbon::create((Date("Y")), 12, 20,23,59,59))
            {
                $this_season = 3;
                $this_season_term = 4;
                $before_season_term = 2;
            }*/
        }
        
        //calculate point
        if($user->isPupil() && $user->active == 1){
            $current_season = MypageController::CurrentSeaon_Pupil(now());
            $date = date_sub(now(), date_interval_create_from_date_string("3 months"));
            $before_season = MypageController::CurrentSeaon_Pupil($date);
            $before_seasonfrom_num = $before_season['begin_season'];
            $before_seasonto_num = $before_season['end_season'];
        }else{
            $current_season = MypageController::CurrentSeaon(now());
            $date = date_sub(now(), date_interval_create_from_date_string("3 months"));
            $before_season = MypageController::CurrentSeaon($date);
            $before_seasonfrom_num = $before_season['begin_season'];
            $before_seasonto_num = $before_season['end_season'];
        }
        
        $mysumpoint[0] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$current_season['from_num'])
            ->where('created_date','<=',$current_season['to_num'])
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                });
            })
            ->first();
        $mysumpoint[1] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where('created_date','>=',$before_seasonfrom_num)
            ->where('created_date','<=',$before_seasonto_num)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                });
            })
            ->first();
        
        $mysumpoint[2] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0), Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                });
            })
           ->first();
        $mysumpoint[3] = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->whereBetween('user_quizes.created_date',array(Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0), Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                });
            })
            ->first();
       
        $mysumpoint[4]  = DB::table('user_quizes')
            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
            ->join('users','users.id','=','user_quizes.user_id')
            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            //->where('users.role','=',$role)
            ->where('user_id','=',$id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                });
            })
            ->first();
        //classRanking
        $classRank[0] = UserQuiz::classquizranking($current_season['term'], $current_season)->get();
        $classRank[1] = UserQuiz::classquizranking($before_season['term'], $before_season)->get();
        $classRank[2] = UserQuiz::classquizranking(21, $current_season)->get();
        $classRank[3] = UserQuiz::classquizranking(22, $current_season)->get();
        $classRank[4] = UserQuiz::classquizranking(23, $current_season)->get();

        //$count['class'] = User::where('org_id', $user->org_id)->where('role', config('consts')['USER']['ROLE']['PUPIL'])->count();
        $count['class'] = $classRank[4]->count();
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['class'] = 1;
        }

        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($classRank[$j]);$i++){
                if($classRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    $myrank[$j]['class']++;
                }
            }
        }

        //gradeRanking
        $gradeRank[0] = UserQuiz::gradequizranking($current_season['term'], $current_season)->get();
        $gradeRank[1] = UserQuiz::gradequizranking($before_season['term'], $before_season)->get();
        $gradeRank[2] = UserQuiz::gradequizranking(21, $current_season)->get();
        $gradeRank[3] = UserQuiz::gradequizranking(22, $current_season)->get();
        $gradeRank[4] = UserQuiz::gradequizranking(23, $current_season)->get();

        //$count['grade'] = User::Countgradepupils(); 
        $count['grade'] = $gradeRank[4]->count(); 
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['grade'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($gradeRank[$j]);$i++){
                if($gradeRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    $myrank[$j]['grade']++;
               }
            }
        }
        //cityRanking
        $cityRank[0] = UserQuiz::cityquizranking($current_season['term'],$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $cityRank[1] = UserQuiz::cityquizranking($before_season['term'],$before_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $cityRank[2] = UserQuiz::cityquizranking(21,$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $cityRank[3] = UserQuiz::cityquizranking(22,$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $cityRank[4] = UserQuiz::cityquizranking(23,$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        
        $count['city'] = $cityRank[4]->count();
        
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['city'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($cityRank[$j]);$i++){
                if($cityRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    $myrank[$j]['city']++;
                    // break;
                }
            }
        }

        //provinceRanking
        $provinceRank[0] = UserQuiz::provincequizranking($current_season['term'],$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $provinceRank[1] = UserQuiz::provincequizranking($before_season['term'],$before_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $provinceRank[2] = UserQuiz::provincequizranking(21,$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $provinceRank[3] = UserQuiz::provincequizranking(22,$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $provinceRank[4] = UserQuiz::provincequizranking(23,$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        //$count['province'] = User::Countusers_byage($rankingage, $grade)->where('users.address1',$user->address1)->count();
        $count['province'] = $provinceRank[4]->count();
        
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['province'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($provinceRank[$j]);$i++){
                if($provinceRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    $myrank[$j]['province']++;
                    // break;
                }
            }
        }

        //nationRanking
        $nationRank[0] = UserQuiz::nationquizranking($current_season['term'],$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $nationRank[1] = UserQuiz::nationquizranking($before_season['term'],$before_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $nationRank[2] = UserQuiz::nationquizranking(21,$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $nationRank[3] = UserQuiz::nationquizranking(22,$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
        $nationRank[4] = UserQuiz::nationquizranking(23,$current_season,$rankingage, $user,$user->PupilsClass->grade)->get();
       
        $count['nation'] = $nationRank[4]->count();
        
        for($k=0;$k<5;$k++)
        {
            $myrank[$k]['nation'] = 1;
        }
        for($j=0;$j<5;$j++)
        {
            for($i=0;$i<count($nationRank[$j]);$i++){
                if($nationRank[$j][$i]->sumpoint > $mysumpoint[$j]->sum){
                    $myrank[$j]['nation']++;
                    // break;
                }
            }
        }

        $this->page_info['side'] = 'rank_child';
        //$this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'rank_bq';
        return view('mypage.personal.rank.rank_bq_child')
            ->with('page_info', $this->page_info)
            ->with('ranking_age',$rankingage)
            ->with('this_season',$this_season)
            ->with('mysumpoint',$mysumpoint)
            ->with('myrank',$myrank)
            ->with('id',$id)
            ->with('current_season',$current_season)
            ->with('before_season',$before_season)
            ->with('otherview_flag',$otherview_flag)
            ->with('register_point_ranking_is_public', $this->register_point_ranking_is_public)
            ->with('count',$count);
    }


    public function history_all(Request $request, $id = null, $other_flag = false){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        if($id != Auth::id() || ($id != null && $other_flag)) 
            $otherview_flag = true;
        $today = now();
        if($user->isPupil() && $user->active == 1){
            $current_season = MypageController::CurrentSeaon_Pupil(now());
            if($today < Carbon::create((Date("Y")), 4, 1,0,0,0))
            {
                $this_season = 3;
                $this_season_term = 3;
                $before_season_term = 7;
            }
            elseif($today < Carbon::create((Date("Y")), 7, 1,0,0,0)){
                $this_season = 0;
                $this_season_term = 0;
                $before_season_term = 3;
            }
            elseif($today < Carbon::create((Date("Y")), 10, 1,0,0,0)){
                $this_season = 1;
                $this_season_term = 1;
                $before_season_term = 0;
            }
            elseif($today <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
                $this_season = 2;
                $this_season_term = 2;
                $before_season_term = 1;
            }
        }else{
            $current_season = MypageController::CurrentSeaon_Pupil(now());
            if($today < Carbon::create((Date("Y")), 4, 1,0,0,0))
            {
                $this_season = 3;
                $this_season_term = 3;
                $before_season_term = 7;
            }
            elseif($today < Carbon::create((Date("Y")), 7, 1,0,0,0)){
                $this_season = 0;
                $this_season_term = 0;
                $before_season_term = 3;
            }
            elseif($today < Carbon::create((Date("Y")), 10, 1,0,0,0)){
                $this_season = 1;
                $this_season_term = 1;
                $before_season_term = 0;
            }
            elseif($today <= Carbon::create((Date("Y")), 12, 31,23,59,59)){
                $this_season = 2;
                $this_season_term = 2;
                $before_season_term = 1;
            }
            /*elseif($today > Carbon::create((Date("Y")), 12, 20,23,59,59))
            {
                $this_season = 3;
                $this_season_term = 4;
                $before_season_term = 2;
            }*/
        }
        
        $myAllHistories = UserQuizesHistory::selectRaw("userquizes_history.created_date, userquizes_history.type, userquizes_history.status, userquizes_history.book_id, books.active, books.title, books.firstname_nick, books.lastname_nick, books.writer_id, quizes.question, userquizes_history.point as cur_point")
             ->join('books', 'userquizes_history.book_id', DB::raw('books.id and books.active <> 7'))
             ->leftJoin('users','users.id','=','userquizes_history.user_id')
             ->leftJoin('quizes','quizes.id','=','userquizes_history.quiz_id')
            ->where("userquizes_history.user_id", $id)
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 3);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 3);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 3);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 4);
                });
            })
            //->groupby("userquizes_history.book_id", "userquizes_history.type", "userquizes_history.status", "userquizes_history.user_id", DB::raw("DATE(userquizes_history.created_date)") )
            ->orderby("created_date", "desc")
            ->get();
              
        $curQuarterPoint = UserQuizesHistory::where("userquizes_history.user_id", $id)
            ->join('books', 'userquizes_history.book_id', DB::raw('books.id and books.active <> 7'))
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 3);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 3);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 3);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 4);
                });
            })
            ->whereBetween("created_date", array($current_season['begin_season'], $current_season['end_season']))
            ->sum("userquizes_history.point");
        if($user->isPupil() && $user->active == 1){
            $curYearPoint = UserQuizesHistory::where("userquizes_history.user_id", $id)
                ->join('books', 'userquizes_history.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 3);
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 1);
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 3);
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 3);
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 4);
                    });
                })
                ->whereBetween("created_date", array(Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0), Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)))
                ->sum("userquizes_history.point");
        }else{
            $curYearPoint = UserQuizesHistory::where("userquizes_history.user_id", $id)
                ->join('books', 'userquizes_history.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 3);
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 1);
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 3);
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 3);
                    })->orWhere(function ($q1) {
                        $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 4);
                    });
                })
                ->whereBetween("created_date", array(Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0), Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)))
                ->sum("userquizes_history.point");
        }
        
        $allPoint = UserQuizesHistory::where("userquizes_history.user_id", $id)
            ->join('books', 'userquizes_history.book_id', DB::raw('books.id and books.active <> 7'))
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 0)->where('userquizes_history.status', '=', 3);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 1)->where('userquizes_history.status', '=', 3);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 3);
                })->orWhere(function ($q1) {
                    $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 4);
                });
            })
            ->sum("userquizes_history.point");

        $this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'history_all'; 
        return view('mypage.personal.history.history_all')
            ->with('current_season',$current_season)
            ->with('myAllHistories',$myAllHistories)
            ->with('curQuarterPoint',$curQuarterPoint)
            ->with('curYearPoint',$curYearPoint)
            ->with('allPoint',$allPoint)
            ->with('otherview_flag',$otherview_flag)
            ->with('page_info', $this->page_info);
    }

    public function pass_history(Request $request, $id = null, $other_flag = false){

        
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        //        $myAllHistories = DB::table('user_quizes')
        //            ->join('books','user_quizes.book_id','=','books.id')
        //            ->join('users','users.id','=','user_quizes.user_id')
        //            ->get();
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        if($id != Auth::id() || ($id != null && $other_flag)) 
            $otherview_flag = true;

        $passed_records_is_public = $user->passed_records_is_public;
        $myAllHistories = UserQuiz::select('user_quizes.*')
                                    ->where("user_quizes.user_id", $id)
                                    ->leftjoin('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                                    ->where("user_quizes.type", 2)->where("user_quizes.status", 3)->orderby("user_quizes.finished_date", "desc");
        if($otherview_flag)
            $myAllHistories = $myAllHistories->where('is_public', 1);
        $myAllHistories = $myAllHistories->get();
        $this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'pass_history';
        return view('mypage.personal.history.pass_history')
            ->with('otherview_flag', $otherview_flag)
            ->with('myAllHistories', $myAllHistories)
            ->with('page_info', $this->page_info)
            ->with('passed_records_is_public', $passed_records_is_public);
    }

    public function quiz_history(Request $request, $id = null, $other_flag = false){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        if($id != Auth::id() || ($id != null && $other_flag)) 
            $otherview_flag = true;

        $this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'quiz_history';

        $quiz_allowed_record_is_public = $user->quiz_allowed_record_is_public;

        $allowed_quizes = Quizes::select("quizes.*", "user_quizes.point")
                          ->leftJoin('user_quizes','user_quizes.quiz_id','=','quizes.id')
                          ->join('books', 'quizes.book_id', DB::raw('books.id and books.active <> 7'))
                          ->where("quizes.register_id", $id)
                          ->where("quizes.active", 2)
                          ->orderBy("quizes.created_at", 'desc')
                          ->get();

        return view('mypage.personal.history.quiz_history')
            ->with('quiz_allowed_record_is_public', $quiz_allowed_record_is_public)
            ->with('allowed_quizes', $allowed_quizes)
            ->with('otherview_flag', $otherview_flag)
            ->with('user', $user)
            ->with('page_info', $this->page_info);
    }

    public function book_reg_history(Request $request, $id = null, $other_flag = false){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        if($id != Auth::id() || ($id != null && $other_flag)) 
            $otherview_flag = true;
        $this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'book_reg_history';

        $book_allowed_record_is_public = $user->book_allowed_record_is_public;

        $allowed_books = UserQuiz::where("user_quizes.user_id", $id)
                                   ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                                   ->where("user_quizes.type", 0)->where("user_quizes.status", 1)->orderBy('user_quizes.finished_date', 'desc')->get();

        return view('mypage.personal.history.book_reg_history')
            ->with('book_allowed_record_is_public', $book_allowed_record_is_public)
            ->with('allowed_books', $allowed_books)
            ->with('otherview_flag', $otherview_flag)
            ->with('user', $user)
            ->with('page_info', $this->page_info);
    }

    public function recent_report(){
        //		if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //	    	return Redirect::to('/');
        //	    }
        $this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'recent_report';
        $today = now();
        $rankingage = 1;
        $curage = Auth::user()->age();
        if(Auth::user()->isPupil() && Auth::user()->active == 1){
            $groupbyuser = Auth::user()->ClassOfPupil->School()->first();
            if($groupbyuser != null){
                if($groupbyuser->group_type == 0)
                    $rankingage = 1; //小学生
                elseif($groupbyuser->group_type == 1)
                    $rankingage = 2; //中学生
                elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                    $rankingage = 3; //高校生
                else
                    $rankingage = 4; //大学生
            }
        }else{
            
            
            if($curage <= 11){
                $rankingage = 1;
            }
            elseif($curage > 11 && $curage <= 14){
                $rankingage = 2;
            }
            else{
                $rankingage = floor($curage / 10);
                $rankingage = $rankingage + 4; 
            }
        }
        $search_birthday = []; 
        $search_birthday = MypageController::search_birthday($rankingage); 


        for ($i = 0; $i < 4; $i++) {
            $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
            if(Auth::user()->isPupil() && Auth::user()->active == 1){
                $array_season_obj[$i] = MypageController::CurrentSeaon_Pupil($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon_Pupil($date);
            }else{
                $array_season_obj[$i] = MypageController::CurrentSeaon($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon($date);
            }
        }
 
        if(Auth::user()->isPupil() && Auth::user()->active == 1){
            $current_season = $this->CurrentSeaon_Pupil(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'], $current_season, Auth::user()->role)->where('u.id', Auth::id())->first();
        }else{
            $current_season = $this->CurrentSeaon(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'], $current_season, 1)->where('u.id', Auth::id())->first();
        }

        $user = User::find(Auth::id());
        $role = $user->role;
        
        $myrankPoints1 = [];
        $myrankPoints2 = [];
        $myrankPoints3 = [];
        $myrankPoints4 = [];
        $myrankPoints5 = [];
        $threemonthrankPoints1 = [];
        $threemonthrankPoints2 = [];
        $threemonthrankPoints3 = [];
        $threemonthrankPoints4 = [];
        $threemonthrankPoints5 = [];
        $allrankPoints1 = [];
        $allrankPoints2 = [];
        $allrankPoints3 = [];
        $allrankPoints4 = [];
        $allrankPoints5 = [];
         
        $type = 1;$tagrgetpoint = 1;
       
        if(Auth::user()->isPupil() && Auth::user()->active == 1){ //学生
            $type = 0;
            $class = DB::table("users")
            ->select('org.group_type', 'classes.grade')
            ->join('classes','classes.id','=','users.org_id')
            ->join('users as org', 'classes.group_id',DB::raw('org.id'))
            ->where('users.role','=', config('consts')['USER']['ROLE']["PUPIL"]) 
            ->where('users.id','=',Auth::id())
            ->first();
            if($class != null){
                $type = $class->group_type;
                $grade = $class->grade;

                if($type ==0){  //小学生
                    if($grade == 1) $tagrgetpoint = 7;
                    elseif($grade == 2) $tagrgetpoint = 13;
                    elseif($grade == 3) $tagrgetpoint = 20;
                    elseif($grade == 4) $tagrgetpoint = 35;   
                    elseif($grade == 5) $tagrgetpoint = 50;
                    elseif($grade == 6) $tagrgetpoint = 70;
                    else $tagrgetpoint = 7; 
                }
            } 

            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
                 
            $sql_average_end="'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            Auth::id()."')) as table1
                                where users.id=table1.group_id) as table2
                         where  users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                ") as table1";
                  
            for ($k = 1; $k < 5; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[4-$k] = MypageController::CurrentSeaon_Pupil($date);
                $sql_term1[4-$k]=$sql_average_front."created_date between '".$cur_season[4-$k]['begin_season']."' and '". $cur_season[4-$k]['end_season'].$sql_average_end;
            }
            
            for($i=0;$i<4;$i++){
                $sum=0; 
                $myavgPoints[$i][0] = 0;
                $myavgPoints[$i][1] = 0;
                $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
                if(sizeof($temp_avg) > 0){
                    foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $mypercent  = floor($avg->sum * 100 / $tagrgetpoint * 100) / 100;
                            $myavgPoints[$i][1] = $mypercent;                        
                        }
                     }
                    $schoolpercent = floor($sum/sizeof($temp_avg) * 100 / $tagrgetpoint * 100) / 100;
                    $myavgPoints[$i][0] = $schoolpercent;
                }
            }

       
            $sql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";
            $myrankPoints1 = MypageController::Get_RankPoint($sql[1]);

            $threemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";
            $threemonthrankPoints1 = MypageController::Get_RankPoint($threemonthsql[1]);

            $allpointsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                " group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";
            $allrankPoints1 = MypageController::Get_RankPoint($allpointsql[1]);

            $sql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        Auth::id()."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $myrankPoints2 = MypageController::Get_RankPoint($sql[2]);

            $threemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        Auth::id()."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $threemonthrankPoints2 = MypageController::Get_RankPoint($threemonthsql[2]);

            $allpointsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                "group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        Auth::id()."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $allrankPoints2 = MypageController::Get_RankPoint($allpointsql[2]);

            $grade = Auth::user()->ClassOfPupil->grade;
            $grade_odds = $grade % 2;
               
            //if($grade == 0){ //学年 0
            $sql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                                from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                                where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                                "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
            $threemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                            from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            Auth::id()."')) as table1
                                where users.id=table1.group_id) as table2
                            where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                            "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
            $allpointsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                "group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                            from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            Auth::id()."')) as table1
                                where users.id=table1.group_id) as table2
                            where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                            "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
    
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonthsql[3]);
            $allrankPoints3 = MypageController::Get_RankPoint($allpointsql[3]);
            
            //if($grade == 0){ //学年 0       
                $sql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $threemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                            from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                            where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                            "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $allpointsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                            from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                            where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                            "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
        
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonthsql[4]);
            $allrankPoints4 = MypageController::Get_RankPoint($allpointsql[4]);

            //if($grade == 0){ //学年 0  
                $sql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                            "(select classes.id
                            from classes  inner join
                                (select users.id,table2.*
                                 from users,
                                    (select users.address1,users.address2,users.group_type,table1.*
                                        from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                where classes.id=(select users.org_id from users where users.id='".
                                                                    Auth::id()."')) as table1
                                        where users.id=table1.group_id) as table2
                                 where  users.group_type=table2.group_type and ".
                                 "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                            on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        ") as table1";
                $threemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $allpointsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
            
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonthsql[5]);
            $allrankPoints5 = MypageController::Get_RankPoint($allpointsql[5]);

            $mybookPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where('user_quizes.type','=',2)
                ->where('user_quizes.status','=',3)
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get()
                ->take(10);
    
            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where (user_quizes.type = 2 and user_quizes.status = 3) and ".
                "created_date between '".$current_season['begin_season']."' and '". $current_season['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";
            $sql[1]="users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";

            $sql[2]="users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        Auth::id()."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $sql[3]=  "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                            on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                        ") as table1";
               
            $sql[4]=  "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                    ") as table1";
                
            $sql[5]= "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                    ") as table1";


            $mybookPoints2 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $mybookPoints3 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $mybookPoints4 =  MypageController::Get_RankPoint($sql_temp.$sql[5]);
                    
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();
           
            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".$current_season['begin_season']."' and '". $current_season['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints2 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql_temp.$sql[5]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();
           
            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".$array_season_obj[1]['begin_season']."' and '". $array_season_obj[1]['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_temp1." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_temp1." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_temp1.$sql[5]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();
           
            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_temp2." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_temp2." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_temp2.$sql[5]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();
           
            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_temp3." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_temp3." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_temp3.$sql[5]);

            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('user_id','=',Auth::id())
                ->get();
           
            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) ".
                " group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_temp4." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_temp4." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_temp4.$sql[5]);
        }
        else{
            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
            left join (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
            $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".Auth::id()."' or ( users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 

            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
            }
           
            for($i=0;$i<8;$i++){
                $sum=0; 
                $myavgPoints[$i][0] = 0;
                $myavgPoints[$i][1] = 0;
                $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
                if(sizeof($temp_avg) > 0) {
                    foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $myavgPoints[$i][1]=$avg->sum;                        
                        }
                    }

                    $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
                }
            }

            $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
            $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";                
                       
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
          
            $sql[5]=$sql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
            $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
            $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
            $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]); 

            $mybookPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where('user_quizes.type','=',2)
                ->where('user_quizes.status','=',3)
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get()
                ->take(10);
    
            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where (user_quizes.type = 2 and user_quizes.status = 3)
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql[2]=$sql_temp."  users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";

            $mybookPoints2 = MypageController::Get_RankPoint($sql[2]);
                
            $mybookPoints3 = MypageController::Get_RankPoint($sql[3]);
                
            $mybookPoints4 =  MypageController::Get_RankPoint($sql[4]);
                
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            
            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$current_season['begin_season']."' and '".$current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";
  
            $sql[2]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";

            $myquizPoints2 = MypageController::Get_RankPoint($sql[2]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql[4]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$array_season_obj[1]['begin_season']."' and '".$array_season_obj[1]['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_before[2]=$sql_temp1." users.id in (select users.id from users,
                                        (select users.address1,users.address2
                                        from users
                                        where users.id='".Auth::id()."') as table1
                                        where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                            
                $sql_before[3]=$sql_temp1." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $sql_before[4]=$sql_temp1." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $myquizPoints_before2 = MypageController::Get_RankPoint($sql_before[2]);
                $myquizPoints_before3 = MypageController::Get_RankPoint($sql_before[3]);
                $myquizPoints_before4 = MypageController::Get_RankPoint($sql_before[4]);

                $myquizPoints_this1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                    ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();

            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                                left join (select user_id, SUM(user_quizes.point) AS sum 
                                    from user_quizes 
                                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                    where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                            and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                                    on users.id=table1.user_id where users.id='".Auth::id()."' or (";

                $sql_this[2]=$sql_temp2." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                        
                $sql_this[3]=$sql_temp2." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $sql_this[4]=$sql_temp2." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
                $myquizPoints_this2 = MypageController::Get_RankPoint($sql_this[2]);
                $myquizPoints_this3 = MypageController::Get_RankPoint($sql_this[3]);
                $myquizPoints_this4 = MypageController::Get_RankPoint($sql_this[4]);

                $myquizPoints_last1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                    ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();

                $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                                left join (select user_id, SUM(user_quizes.point) AS sum 
                                    from user_quizes 
                                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                    where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                            and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '".Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                                    on users.id=table1.user_id where users.id='".Auth::id()."' or (";

                $sql_last[2]=$sql_temp3." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                        
                $sql_last[3]=$sql_temp3." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $sql_last[4]=$sql_temp3." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
                $myquizPoints_last2 = MypageController::Get_RankPoint($sql_last[2]);
                $myquizPoints_last3 = MypageController::Get_RankPoint($sql_last[3]);
                $myquizPoints_last4 = MypageController::Get_RankPoint($sql_last[4]);
                
                $myquizPoints_all1 = DB::table('user_quizes')
                    ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                    ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                    ->where( function ($q) {
                        $q->Where(function ($q1) {
                            $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                        })->orWhere(function ($q1) {
                            $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                        });
                    })
                    ->where('user_quizes.user_id','=',Auth::id())
                    ->get();

                $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                                left join (select user_id, SUM(user_quizes.point) AS sum 
                                    from user_quizes 
                                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                    where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                            group by user_id) as table1 
                                    on users.id=table1.user_id where users.id='".Auth::id()."' or (";

                $sql_all[2]=$sql_temp4." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                        
                $sql_all[3]=$sql_temp4." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                
                $sql_all[4]=$sql_temp4." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and (users.active >= 1)))) as table1";
                    
                $myquizPoints_all2 = MypageController::Get_RankPoint($sql_all[2]);
                $myquizPoints_all3 = MypageController::Get_RankPoint($sql_all[3]);
                $myquizPoints_all4 = MypageController::Get_RankPoint($sql_all[4]);
        }

        if(Auth::user()->isPupil() && Auth::user()->active == 1){
            $passed_point = UserQuiz::SumPoint1($current_season['term'],$current_season, Auth::user()->role)->where('user_quizes.type', 2)
                ->where('u.id', Auth::id())->first();
            $quiz_point = UserQuiz::SumPoint1($current_season['term'],$current_season, Auth::user()->role)->where('user_quizes.type', 1)->where('user_quizes.status', 1)
                ->where('u.id', Auth::id())->first();
            $book_point = UserQuiz::SumPoint1($current_season['term'],$current_season, Auth::user()->role)->where('user_quizes.type', 0)->where('user_quizes.status', 1)
                ->where('u.id', Auth::id())->first();
        }else{
            $passed_point = UserQuiz::SumPoint1($current_season['term'],$current_season, 1)->where('user_quizes.type', 2)
                ->where('u.id', Auth::id())->first();
            $quiz_point = UserQuiz::SumPoint1($current_season['term'],$current_season, 1)->where('user_quizes.type', 1)->where('user_quizes.status', 1)
                ->where('u.id', Auth::id())->first();
            $book_point = UserQuiz::SumPoint1($current_season['term'],$current_season, 1)->where('user_quizes.type', 0)->where('user_quizes.status', 1)
                ->where('u.id', Auth::id())->first();
        }
        $total_point = UserQuiz::TotalPoint();
        $my_rank = 10;
        $my_addpoint = 0;
        $ranks = [29070, 14070, 6070, 2070, 870, 370, 220, 120, 60, 20, 0];
        for ($i = 0; $i < 11; $i++) {
            if ($total_point >= $ranks[$i] && $total_point < $ranks[$i - 1]) {
                $my_rank = $i;
                $my_addpoint = $ranks[$i - 1] - $total_point;
            }
        }

        $grade = isset(Auth::user()->PupilsClass) ? Auth::user()->PupilsClass->grade : 0;
        
        
        $myBooks = Books::MyBooks($current_season)->get()->take(8);
        $myAllowedBooks = UserQuiz::AllowedBooksRecord($current_season['term'],$current_season)->get()->take(6);
        $myAllowedQuizes = UserQuiz::AllowedQuizesRecord($current_season['term'],$current_season)->groupby('user_quizes.book_id')->get()->take(6);

        return view('mypage.personal.history.recent_report')
            ->with('cur_season', $cur_season)
            ->with('current_season', $current_season)
            ->with('array_season_obj', $array_season_obj)
            ->withUser($user)
            ->with('current_user', $current_user)
            ->with('passed_point', $passed_point)
            ->with('array_season', $array_season)
            ->with('quiz_point', $quiz_point)
            ->with('book_point', $book_point)
            ->with('total_point', $total_point)
            ->with('my_rank', $my_rank)
            ->with('my_addpoint', $my_addpoint)
            ->with('tagrgetpoint', $tagrgetpoint)
            ->with('grade', $grade)
            ->with('type',$type)
            ->with('myBooks', $myBooks)
            ->with('myAllowedBooks', $myAllowedBooks)
            ->with('myAllowedQuizes', $myAllowedQuizes)
            ->with('myrankPoints1', $myrankPoints1)
            ->with('myrankPoints2', $myrankPoints2)
            ->with('myrankPoints3', $myrankPoints3)
            ->with('myrankPoints4', $myrankPoints4)
            ->with('myrankPoints5', $myrankPoints5)
            ->with('threemonthrankPoints1', $threemonthrankPoints1)
            ->with('threemonthrankPoints2', $threemonthrankPoints2)
            ->with('threemonthrankPoints3', $threemonthrankPoints3)
            ->with('threemonthrankPoints4', $threemonthrankPoints4)
            ->with('threemonthrankPoints5', $threemonthrankPoints5)
            ->with('allrankPoints1', $allrankPoints1)
            ->with('allrankPoints2', $allrankPoints2)
            ->with('allrankPoints3', $allrankPoints3)
            ->with('allrankPoints4', $allrankPoints4)
            ->with('allrankPoints5', $allrankPoints5)
            ->with('myavgPoints',$myavgPoints)
            ->with('mybookPoints1', $mybookPoints1)
            ->with('mybookPoints2', $mybookPoints2)
            ->with('mybookPoints3', $mybookPoints3)
            ->with('mybookPoints4', $mybookPoints4)
            ->with('myquizPoints1', $myquizPoints1)
            ->with('myquizPoints2', $myquizPoints2)
            ->with('myquizPoints3', $myquizPoints3)
            ->with('myquizPoints4', $myquizPoints4)
            ->with('myquizPoints_before1', $myquizPoints_before1)
            ->with('myquizPoints_before2', $myquizPoints_before2)
            ->with('myquizPoints_before3', $myquizPoints_before3)
            ->with('myquizPoints_before4', $myquizPoints_before4)
            ->with('myquizPoints_this1', $myquizPoints_this1)
            ->with('myquizPoints_this2', $myquizPoints_this2)
            ->with('myquizPoints_this3', $myquizPoints_this3)
            ->with('myquizPoints_this4', $myquizPoints_this4)
            ->with('myquizPoints_last1', $myquizPoints_last1)
            ->with('myquizPoints_last2', $myquizPoints_last2)
            ->with('myquizPoints_last3', $myquizPoints_last3)
            ->with('myquizPoints_last4', $myquizPoints_last4)
            ->with('myquizPoints_all1', $myquizPoints_all1)
            ->with('myquizPoints_all2', $myquizPoints_all2)
            ->with('myquizPoints_all3', $myquizPoints_all3)
            ->with('myquizPoints_all4', $myquizPoints_all4)
            ->with('page_info', $this->page_info);
    }

    public function recent_print(Request $request){
        $today = now();
        $rankingage = 1;
        $curage = Auth::user()->age();
        if(Auth::user()->isPupil() && Auth::user()->active == 1){
            $groupbyuser = Auth::user()->ClassOfPupil->School()->first();
            if($groupbyuser->group_type == 0)
                $rankingage = 1; //小学生
            elseif($groupbyuser->group_type == 1)
                $rankingage = 2; //中学生
            elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                $rankingage = 3; //高校生
            else
                $rankingage = 4; //大学生
        }else{
            
            
            if($curage <= 11){
                $rankingage = 1;
            }
            elseif($curage > 11 && $curage <= 14){
                $rankingage = 2;
            }
            else{
                $rankingage = floor($curage / 10);
                $rankingage = $rankingage + 4; 
            }
        }
        $search_birthday = []; 
        $search_birthday = MypageController::search_birthday($rankingage); 


        for ($i = 0; $i < 4; $i++) {
            $date = date_sub(now(), date_interval_create_from_date_string($i * 3 . " months"));
            if(Auth::user()->isPupil() && Auth::user()->active == 1){
                $array_season_obj[$i] = MypageController::CurrentSeaon_Pupil($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon_Pupil($date);
            }else{
                $array_season_obj[$i] = MypageController::CurrentSeaon($date);
                $array_season[$i] = $array_season_obj[$i]['term'];
                $current_season = MypageController::CurrentSeaon($date);
            }
        }

        if(Auth::user()->isPupil() && Auth::user()->active == 1){
            $current_season = $this->CurrentSeaon_Pupil(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'], $current_season, Auth::user()->role)->where('u.id', Auth::id())->first();
        }else{
            $current_season = $this->CurrentSeaon(now());
            $current_user = UserQuiz::SumPoint1($current_season['term'], $current_season, 1)->where('u.id', Auth::id())->first();
        }

        $user = User::find(Auth::id());
        $role = $user->role;
                      
        $myrankPoints1 = [];
        $myrankPoints2 = [];
        $myrankPoints3 = [];
        $myrankPoints4 = [];
        $myrankPoints5 = [];
        $threemonthrankPoints1 = [];
        $threemonthrankPoints2 = [];
        $threemonthrankPoints3 = [];
        $threemonthrankPoints4 = [];
        $threemonthrankPoints5 = [];
        $allrankPoints1 = [];
        $allrankPoints2 = [];
        $allrankPoints3 = [];
        $allrankPoints4 = [];
        $allrankPoints5 = [];
         
        $type = 1;$tagrgetpoint = 1;
       
        if(Auth::user()->isPupil() && Auth::user()->active == 1){ //小学生
            
            $class = DB::table("users")
            ->select('org.group_type', 'classes.grade')
            ->join('classes','classes.id','=','users.org_id')
            ->join('users as org', 'classes.group_id',DB::raw('org.id'))
            ->where('users.role','=', config('consts')['USER']['ROLE']["PUPIL"]) 
            ->where('users.id','=',Auth::id())
            ->first();
            if($class != null){
                $type = $class->group_type;
                $grade = $class->grade;

                if($type ==0){  //小学生
                    if($grade == 1) $tagrgetpoint = 7;
                    elseif($grade == 2) $tagrgetpoint = 13;
                    elseif($grade == 3) $tagrgetpoint = 20;
                    elseif($grade == 4) $tagrgetpoint = 35;   
                    elseif($grade == 5) $tagrgetpoint = 50;
                    elseif($grade == 6) $tagrgetpoint = 70;
                    else $tagrgetpoint = 7; 
                }
            } 

            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
                 
            $sql_average_end="'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            Auth::id()."')) as table1
                                where users.id=table1.group_id) as table2
                         where  users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                ") as table1";
                  
            for ($k = 1; $k < 5; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[4-$k] = MypageController::CurrentSeaon_Pupil($date);
                $sql_term1[4-$k]=$sql_average_front."created_date between '".$cur_season[4-$k]['begin_season']."' and '". $cur_season[4-$k]['end_season'].$sql_average_end;
            }
            
            for($i=0;$i<4;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                    $sum = $sum+($avg->sum);
                    if($avg->flag=='1'){
                        $mypercent  = floor($avg->sum * 100 / $tagrgetpoint * 100) / 100;
                        $myavgPoints[$i][1] = $mypercent;                        
                    }
                 }
                $schoolpercent = floor($sum/sizeof($temp_avg) * 100 / $tagrgetpoint * 100) / 100;
                $myavgPoints[$i][0] = $schoolpercent;
            }
       
            $sql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "' group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";
            $myrankPoints1 = MypageController::Get_RankPoint($sql[1]);

            $threemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";
            $threemonthrankPoints1 = MypageController::Get_RankPoint($threemonthsql[1]);

            $allpointsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
            from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                " group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";
            $allrankPoints1 = MypageController::Get_RankPoint($allpointsql[1]);

            $sql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        Auth::id()."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $myrankPoints2 = MypageController::Get_RankPoint($sql[2]);

            $threemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        Auth::id()."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $threemonthrankPoints2 = MypageController::Get_RankPoint($threemonthsql[2]);

            $allpointsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                "group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ".
                "users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        Auth::id()."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $allrankPoints2 = MypageController::Get_RankPoint($allpointsql[2]);

            $grade = Auth::user()->ClassOfPupil->grade;
            $grade_odds = $grade % 2;
               
            //if($grade == 0){ //学年 0
                $sql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".
                        "users.org_id in ".
                            "(select classes.id
                            from classes  inner join
                                (select users.id,table2.*
                                 from users,
                                    (select users.address1,users.address2,users.group_type,table1.*
                                        from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                where classes.id=(select users.org_id from users where users.id='".
                                                                    Auth::id()."')) as table1
                                        where users.id=table1.group_id) as table2
                                 where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                                 "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                            on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        ") as table1";
                $threemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $allpointsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
        
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonthsql[3]);
            $allrankPoints3 = MypageController::Get_RankPoint($allpointsql[3]);
            
            //if($grade == 0){ //学年 0       
                $sql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $threemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                "'group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            Auth::id()."')) as table1
                                where users.id=table1.group_id) as table2
                         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
                $allpointsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                "group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and users.address1= '".Auth::user()->address1."' and ".
                "users.org_id in ".
                    "(select classes.id
                    from classes  inner join
                        (select users.id,table2.*
                         from users,
                            (select users.address1,users.address2,users.group_type,table1.*
                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                        where classes.id=(select users.org_id from users where users.id='".
                                                            Auth::id()."')) as table1
                                where users.id=table1.group_id) as table2
                         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                ") as table1";
            
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonthsql[4]);
            $allrankPoints4 = MypageController::Get_RankPoint($allpointsql[4]);

            //if($grade == 0){ //学年 0  
                $sql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                        from users left join 
                        (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                        "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                        "'group by user_id) as table1
                        on users.id=table1.user_id
                        where  ".
                        "users.role=".$role." and users.active=1 and ".
                        "users.org_id in ".
                            "(select classes.id
                            from classes  inner join
                                (select users.id,table2.*
                                 from users,
                                    (select users.address1,users.address2,users.group_type,table1.*
                                        from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                where classes.id=(select users.org_id from users where users.id='".
                                                                    Auth::id()."')) as table1
                                        where users.id=table1.group_id) as table2
                                 where  users.group_type=table2.group_type and ".
                                 "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                            on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                        ") as table1";
                $threemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                    "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                    "'group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
                $allpointsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                    from users left join 
                    (select user_id, SUM(user_quizes.point) AS sum 
                    from user_quizes 
                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) ".
                    "group by user_id) as table1
                    on users.id=table1.user_id
                    where  ".
                    "users.role=".$role." and users.active=1 and ".
                    "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                    ") as table1";
            
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonthsql[5]);
            $allrankPoints5 = MypageController::Get_RankPoint($allpointsql[5]);

            $mybookPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where('user_quizes.type','=',2)
                ->where('user_quizes.status','=',3)
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get()
                ->take(10);
    
            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where (user_quizes.type = 2 and user_quizes.status = 3) and ".
                "created_date between '".$current_season['begin_season']."' and '". $current_season['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";
            $sql[1]="users.org_id=(select org_id from users where users.id='".Auth::id()."')) as table1 ";

            $sql[2]="users.org_id in (select classes.id as org_id
                        from classes
                        inner join
                        (select classes.year,classes.grade,classes.group_id
                        from classes
                        where classes.id=(select users.org_id
                        from users
                        where users.id='".
                        Auth::id()."')) as table2
                        on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
            $sql[3]=  "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                            on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                        ") as table1";
               
            $sql[4]=  "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                    ") as table1";
                
            $sql[5]= "users.org_id in ".
                        "(select classes.id
                        from classes  inner join
                            (select users.id,table2.*
                             from users,
                                (select users.address1,users.address2,users.group_type,table1.*
                                    from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                            where classes.id=(select users.org_id from users where users.id='".
                                                                Auth::id()."')) as table1
                                    where users.id=table1.group_id) as table2
                             where  users.group_type=table2.group_type and ".
                             "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                    ") as table1";


            $mybookPoints2 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $mybookPoints3 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $mybookPoints4 =  MypageController::Get_RankPoint($sql_temp.$sql[5]);
                    
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();
           
            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".$current_season['begin_season']."' and '". $current_season['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints2 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql_temp." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql_temp.$sql[5]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();
           
            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".$array_season_obj[1]['begin_season']."' and '". $array_season_obj[1]['end_season'].
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_temp1." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_temp1." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_temp1.$sql[5]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();
           
            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_temp2." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_temp2." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_temp2.$sql[5]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();
           
            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                "' group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_temp3." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_temp3." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_temp3.$sql[5]);

            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();
           
            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag 
                from users left join 
                (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) ".
                " group by user_id) as table1
                on users.id=table1.user_id
                where  ".
                "users.role=".$role." and users.active=1 and ";

            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_temp4." users.address1= '".Auth::user()->address1."' and users.address2= '".Auth::user()->address2."' and ".$sql[3]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_temp4." users.address1= '".Auth::user()->address1."' and ".$sql[4]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_temp4.$sql[5]);
        }
        else{
            $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
            left join (select user_id, SUM(user_quizes.point) AS sum 
                from user_quizes 
                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
            $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".Auth::id()."' or ( users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 
            
            for ($k = 1; $k < 9; $k++) {
                $date = date_sub(now(), date_interval_create_from_date_string($k * 3 . " months"));
                $cur_season[8-$k] = MypageController::CurrentSeaon($date);
                $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
            
            }
           
            for($i=0;$i<8;$i++){
               $sum=0; 
               $temp_avg=MypageController::Get_AvgPoint($sql_term1[$i]);
  
                 foreach ($temp_avg as $ii => $avg) {
                        $sum = $sum+($avg->sum);
                        if($avg->flag=='1'){
                            $myavgPoints[$i][1]=$avg->sum;                        
                        }
                 }

                $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
            }

            $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
            $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";
            $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) group by user_id) as table1 
                        on users.id=table1.user_id where users.id='".Auth::id()."' or (";                
                       
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1,users.address2
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                            (select users.address1
                            from users
                            where users.id='".Auth::id()."') as table1
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
          
            $sql[5]=$sql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                            where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myrankPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myrankPoints4 = MypageController::Get_RankPoint($sql[4]);
            $myrankPoints5 = MypageController::Get_RankPoint($sql[5]);   
            $threemonthrankPoints3 = MypageController::Get_RankPoint($threemonth_sql[3]);
            $threemonthrankPoints4 = MypageController::Get_RankPoint($threemonth_sql[4]);
            $threemonthrankPoints5 = MypageController::Get_RankPoint($threemonth_sql[5]); 
            $allrankPoints3 = MypageController::Get_RankPoint($all_sql[3]);
            $allrankPoints4 = MypageController::Get_RankPoint($all_sql[4]);
            $allrankPoints5 = MypageController::Get_RankPoint($all_sql[5]); 

            $mybookPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where('user_quizes.type','=',2)
                ->where('user_quizes.status','=',3)
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get()
                ->take(10);
    
            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where (user_quizes.type = 2 and user_quizes.status = 3)
                                    and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql[2]=$sql_temp."  users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $mybookPoints2 = MypageController::Get_RankPoint($sql[2]);
            $mybookPoints3 = MypageController::Get_RankPoint($sql[3]);
            $mybookPoints4 =  MypageController::Get_RankPoint($sql[4]);
                
            $myquizPoints1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$current_season['begin_season'])
                ->where('created_date','<=',$current_season['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$current_season['begin_season']."' and '".$current_season['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";
  
            $sql[2]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql[3]=$sql_temp." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql[4]=$sql_temp." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints2 = MypageController::Get_RankPoint($sql[2]);
            $myquizPoints3 = MypageController::Get_RankPoint($sql[3]);
            $myquizPoints4 = MypageController::Get_RankPoint($sql[4]);

            $myquizPoints_before1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',$array_season_obj[1]['begin_season'])
                ->where('created_date','<=',$array_season_obj[1]['end_season'])
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                        left join (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7 
                            where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                    and created_date between '".$array_season_obj[1]['begin_season']."' and '".$array_season_obj[1]['end_season']."' group by user_id) as table1 
                            on users.id=table1.user_id where users.id='".Auth::id()."' or (";

           $sql_before[2]=$sql_temp1." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".Auth::id()."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                        
            $sql_before[3]=$sql_temp1." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql_before[4]=$sql_temp1." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints_before2 = MypageController::Get_RankPoint($sql_before[2]);
            $myquizPoints_before3 = MypageController::Get_RankPoint($sql_before[3]);
            $myquizPoints_before4 = MypageController::Get_RankPoint($sql_before[4]);

            $myquizPoints_this1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                        and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_this[2]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql_this[3]=$sql_temp2." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql_this[4]=$sql_temp2." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints_this2 = MypageController::Get_RankPoint($sql_this[2]);
            $myquizPoints_this3 = MypageController::Get_RankPoint($sql_this[3]);
            $myquizPoints_this4 = MypageController::Get_RankPoint($sql_this[4]);

            $myquizPoints_last1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                        and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '".Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_last[2]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql_last[3]=$sql_temp3." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql_last[4]=$sql_temp3." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints_last2 = MypageController::Get_RankPoint($sql_last[2]);
            $myquizPoints_last3 = MypageController::Get_RankPoint($sql_last[3]);
            $myquizPoints_last4 = MypageController::Get_RankPoint($sql_last[4]);
            
            $myquizPoints_all1 = DB::table('user_quizes')
                ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                ->where( function ($q) {
                    $q->Where(function ($q1) {
                        $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                    })->orWhere(function ($q1) {
                        $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                    });
                })
                ->where('user_quizes.user_id','=',Auth::id())
                ->get();

            $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".Auth::id()."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 0 and user_quizes.status = 1))
                                         group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".Auth::id()."' or (";

            $sql_all[2]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
            $sql_all[3]=$sql_temp4." users.id in (select users.id from users,
                                (select users.address1,users.address2
                                from users
                                where users.id='".Auth::id()."') as table1
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $sql_all[4]=$sql_temp4." users.id in (select users.id from users
                                where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."'  and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
            
            $myquizPoints_all2 = MypageController::Get_RankPoint($sql_all[2]);
            $myquizPoints_all3 = MypageController::Get_RankPoint($sql_all[3]);
            $myquizPoints_all4 = MypageController::Get_RankPoint($sql_all[4]);
        }

        if(Auth::user()->isPupil() && Auth::user()->active == 1){
            $passed_point = UserQuiz::SumPoint1($current_season['term'],$current_season, Auth::user()->role)->where('user_quizes.type', 2)
                ->where('u.id', Auth::id())->first();
            $quiz_point = UserQuiz::SumPoint1($current_season['term'],$current_season, Auth::user()->role)->where('user_quizes.type', 1)->where('user_quizes.status', 1)
                ->where('u.id', Auth::id())->first();
            $book_point = UserQuiz::SumPoint1($current_season['term'],$current_season, Auth::user()->role)->where('user_quizes.type', 0)->where('user_quizes.status', 1)
                ->where('u.id', Auth::id())->first();
        }else{
            $passed_point = UserQuiz::SumPoint1($current_season['term'],$current_season, 1)->where('user_quizes.type', 2)
                ->where('u.id', Auth::id())->first();
            $quiz_point = UserQuiz::SumPoint1($current_season['term'],$current_season, 1)->where('user_quizes.type', 1)->where('user_quizes.status', 1)
                ->where('u.id', Auth::id())->first();
            $book_point = UserQuiz::SumPoint1($current_season['term'],$current_season, 1)->where('user_quizes.type', 0)->where('user_quizes.status', 1)
                ->where('u.id', Auth::id())->first();
        }
        $total_point = UserQuiz::TotalPoint();
        $my_rank = 10;
        $my_addpoint = 0;
        $ranks = [29070, 14070, 6070, 2070, 870, 370, 220, 120, 60, 20, 0];
        for ($i = 0; $i < 11; $i++) {
            if ($total_point >= $ranks[$i] && $total_point < $ranks[$i - 1]) {
                $my_rank = $i;
                $my_addpoint = $ranks[$i - 1] - $total_point;
            }
        }
        
        $grade = isset(Auth::user()->PupilsClass) ? Auth::user()->PupilsClass->grade : 0;
        $myBooks = Books::MyBooks($current_season)->get()->take(8);
        $myAllowedBooks = UserQuiz::AllowedBooksRecord($current_season['term'],$current_season)->get()->take(6);
        $myAllowedQuizes = UserQuiz::AllowedQuizesRecord($current_season['term'],$current_season)->groupby('user_quizes.book_id')->get()->take(6);

        return view('mypage.personal.history.recent_print')
            ->with('cur_season', $cur_season)
            ->with('current_season', $current_season)
            ->with('array_season_obj', $array_season_obj)
            ->withUser($user)
            ->with('current_user', $current_user)
            ->with('passed_point', $passed_point)
            ->with('array_season', $array_season)
            ->with('quiz_point', $quiz_point)
            ->with('book_point', $book_point)
            ->with('total_point', $total_point)
            ->with('my_rank', $my_rank)
            ->with('my_addpoint', $my_addpoint)
            ->with('tagrgetpoint', $tagrgetpoint)
            ->with('grade', $grade)
            ->with('type',$type)
            ->with('myBooks', $myBooks)
            ->with('myAllowedBooks', $myAllowedBooks)
            ->with('myAllowedQuizes', $myAllowedQuizes)
            ->with('myrankPoints1', $myrankPoints1)
            ->with('myrankPoints2', $myrankPoints2)
            ->with('myrankPoints3', $myrankPoints3)
            ->with('myrankPoints4', $myrankPoints4)
            ->with('myrankPoints5', $myrankPoints5)
            ->with('threemonthrankPoints1', $threemonthrankPoints1)
            ->with('threemonthrankPoints2', $threemonthrankPoints2)
            ->with('threemonthrankPoints3', $threemonthrankPoints3)
            ->with('threemonthrankPoints4', $threemonthrankPoints4)
            ->with('threemonthrankPoints5', $threemonthrankPoints5)
            ->with('allrankPoints1', $allrankPoints1)
            ->with('allrankPoints2', $allrankPoints2)
            ->with('allrankPoints3', $allrankPoints3)
            ->with('allrankPoints4', $allrankPoints4)
            ->with('allrankPoints5', $allrankPoints5)
            ->with('myavgPoints',$myavgPoints)
            ->with('mybookPoints1', $mybookPoints1)
            ->with('mybookPoints2', $mybookPoints2)
            ->with('mybookPoints3', $mybookPoints3)
            ->with('mybookPoints4', $mybookPoints4)
            ->with('myquizPoints1', $myquizPoints1)
            ->with('myquizPoints2', $myquizPoints2)
            ->with('myquizPoints3', $myquizPoints3)
            ->with('myquizPoints4', $myquizPoints4)
            ->with('myquizPoints_before1', $myquizPoints_before1)
            ->with('myquizPoints_before2', $myquizPoints_before2)
            ->with('myquizPoints_before3', $myquizPoints_before3)
            ->with('myquizPoints_before4', $myquizPoints_before4)
            ->with('myquizPoints_this1', $myquizPoints_this1)
            ->with('myquizPoints_this2', $myquizPoints_this2)
            ->with('myquizPoints_this3', $myquizPoints_this3)
            ->with('myquizPoints_this4', $myquizPoints_this4)
            ->with('myquizPoints_last1', $myquizPoints_last1)
            ->with('myquizPoints_last2', $myquizPoints_last2)
            ->with('myquizPoints_last3', $myquizPoints_last3)
            ->with('myquizPoints_last4', $myquizPoints_last4)
            ->with('myquizPoints_all1', $myquizPoints_all1)
            ->with('myquizPoints_all2', $myquizPoints_all2)
            ->with('myquizPoints_all3', $myquizPoints_all3)
            ->with('myquizPoints_all4', $myquizPoints_all4)
            ->with('page_info', '');
    }

    public function CalcQuarterInfo($month){
        if ($month < 0) {$year = Date('Y') - 1; $month = 12 + $month;}

    }

    public function last_report(Request $request, $mode = 0, $id=null, $other_flag = false){
        $this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'last_report';

        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        if($id != Auth::id() || ($id != null && $other_flag)) 
            $otherview_flag = true;
        //$last5SeasonList = $this->getLast5SeasonList(now());
        $user = User::find($id);
        for($ii_month=0;$ii_month<5;$ii_month++){
            $last5_date=date_sub(now(), date_interval_create_from_date_string(3*($ii_month+1) . " months"));
            if($user->isPupil() && $user->active == 1)
                $last5_season[$ii_month]=$this->CurrentSeaon_Pupil($last5_date);
            else
                $last5_season[$ii_month]=$this->CurrentSeaon($last5_date);       
        }
    
        if($mode == 0){
            $date = date_sub(now(), date_interval_create_from_date_string(3 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(6 . " months"));
        }else if($mode == 1){
            $date = date_sub(now(), date_interval_create_from_date_string(6 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(9 . " months"));
        }else if($mode == 2){
            $date = date_sub(now(), date_interval_create_from_date_string(9 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(12 . " months"));
        }else if($mode == 3){
            $date = date_sub(now(), date_interval_create_from_date_string(12 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(15 . " months"));
        }else if($mode == 4){
            $date = date_sub(now(), date_interval_create_from_date_string(15 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(18 . " months"));
        }
        
        if($user->isPupil() && $user->active == 1){
            $current_season = $this->CurrentSeaon_Pupil($date);
            $before_season = $this->CurrentSeaon_Pupil($before_date);
        }
        else{
            $current_season = $this->CurrentSeaon($date);
            $before_season = $this->CurrentSeaon($before_date);
        }
        $current_user = ReportBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))->first();
        if(!is_null($current_user)){
            $myBooks = preg_split('/,/', $current_user->booktest_success) ;   
            $myAllowedBooks = preg_split('/,/', $current_user->bookconfirm_success) ;   
            $myAllowedQuizes = preg_split('/,/', $current_user->quizconfirm_success) ; 
        }
        else{
            $myBooks = [] ;   
            $myAllowedBooks = [] ;   
            $myAllowedQuizes = [] ; 
        }
        $myrankPoints1 = [];
        $myrankPoints2 = [];
        $myrankPoints3 = [];
        $myrankPoints4 = [];
        $myrankPoints5 = [];
        $threemonthrankPoints1 = [];
        $threemonthrankPoints2 = [];
        $threemonthrankPoints3 = [];
        $threemonthrankPoints4 = [];
        $threemonthrankPoints5 = [];
        $allrankPoints1 = [];
        $allrankPoints2 = [];
        $allrankPoints3 = [];
        $allrankPoints4 = [];
        $allrankPoints5 = [];
        $threemonthrankPoints1 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 0)
                         ->where('period', 0)->get();
        $threemonthrankPoints2 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 1)
                         ->where('period', 0)->get();
        $threemonthrankPoints3 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 2)
                         ->where('period', 0)->get();
        $threemonthrankPoints4 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 3)
                         ->where('period', 0)->get();
        $threemonthrankPoints5 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 4)
                         ->where('period', 0)->get();
        $myrankPoints1 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 0)
                         ->where('period', 1)->get();
        $myrankPoints2 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 1)
                         ->where('period', 1)->get();
        $myrankPoints3 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 2)
                         ->where('period', 1)->get();
        $myrankPoints4 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 3)
                         ->where('period', 1)->get();
        $myrankPoints5 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 4)
                         ->where('period', 1)->get();
        $allrankPoints1 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 0)
                         ->where('period', 2)->get();
        $allrankPoints2 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 1)
                         ->where('period', 2)->get();
        $allrankPoints3 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 2)
                         ->where('period', 2)->get();
        $allrankPoints4 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 3)
                         ->where('period', 2)->get();
        $allrankPoints5 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 4)
                         ->where('period', 2)->get();

        return view('mypage.personal.history.last_report')
            ->with('page_info', $this->page_info)
            ->with("last_5season", $last5_season)
            ->with('current_season', $current_season)
            ->with('before_season', $before_season)
            ->with('current_user', $current_user)
            ->with('myBooks', $myBooks)
            ->with('mode', $mode)
            ->with('myAllowedBooks', $myAllowedBooks)
            ->with('myAllowedQuizes', $myAllowedQuizes)
            ->with('threemonthrankPoints1', $threemonthrankPoints1)
            ->with('threemonthrankPoints2', $threemonthrankPoints2)
            ->with('threemonthrankPoints3', $threemonthrankPoints3)
            ->with('threemonthrankPoints4', $threemonthrankPoints4)
            ->with('threemonthrankPoints5', $threemonthrankPoints5)
            ->with('myrankPoints1', $myrankPoints1)
            ->with('myrankPoints2', $myrankPoints2)
            ->with('myrankPoints3', $myrankPoints3)
            ->with('myrankPoints4', $myrankPoints4)
            ->with('myrankPoints5', $myrankPoints5)
            ->with('allrankPoints1', $allrankPoints1)
            ->with('allrankPoints2', $allrankPoints2)
            ->with('allrankPoints3', $allrankPoints3)
            ->with('allrankPoints4', $allrankPoints4)
            ->with('allrankPoints5', $allrankPoints5)
            ->with('otherview_flag', $otherview_flag);

    }

    public function last_print(Request $request, $mode = 0, $id=null){
        $this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'last_report';
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }

        if($request->input('report_mode'))
            $mode = $request->input('report_mode');

        //$last5SeasonList = $this->getLast5SeasonList(now());
        $user = User::find($id);
        for($ii_month=0;$ii_month<5;$ii_month++){
            $last5_date=date_sub(now(), date_interval_create_from_date_string(3*($ii_month+1) . " months"));
            if($user->isPupil())
                $last5_season[$ii_month]=$this->CurrentSeaon_Pupil($last5_date);
            else
                $last5_season[$ii_month]=$this->CurrentSeaon($last5_date);       
        }
    
        if($mode == 0){
            $date = date_sub(now(), date_interval_create_from_date_string(3 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(6 . " months"));
        }else if($mode == 1){
            $date = date_sub(now(), date_interval_create_from_date_string(6 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(9 . " months"));
        }else if($mode == 2){
            $date = date_sub(now(), date_interval_create_from_date_string(9 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(12 . " months"));
        }else if($mode == 3){
            $date = date_sub(now(), date_interval_create_from_date_string(12 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(15 . " months"));
        }else if($mode == 4){
            $date = date_sub(now(), date_interval_create_from_date_string(15 . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(18 . " months"));
        }
        
        if($user->isPupil() && $user->active == 1){
            $current_season = $this->CurrentSeaon_Pupil($date);
            $before_season = $this->CurrentSeaon_Pupil($before_date);
        }
        else{
            $current_season = $this->CurrentSeaon($date);
            $before_season = $this->CurrentSeaon($before_date);
        }
        $current_user = ReportBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))->first();
        $myBooks = preg_split('/,/', $current_user->booktest_success) ;    
        $myAllowedBooks = preg_split('/,/', $current_user->bookconfirm_success) ;   
        $myAllowedQuizes = preg_split('/,/', $current_user->quizconfirm_success) ; 
        $myrankPoints1 = [];
        $myrankPoints2 = [];
        $myrankPoints3 = [];
        $myrankPoints4 = [];
        $myrankPoints5 = [];
        $threemonthrankPoints1 = [];
        $threemonthrankPoints2 = [];
        $threemonthrankPoints3 = [];
        $threemonthrankPoints4 = [];
        $threemonthrankPoints5 = [];
        $allrankPoints1 = [];
        $allrankPoints2 = [];
        $allrankPoints3 = [];
        $allrankPoints4 = [];
        $allrankPoints5 = [];
        $threemonthrankPoints1 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 0)
                         ->where('period', 0)->get();
        $threemonthrankPoints2 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 1)
                         ->where('period', 0)->get();
        $threemonthrankPoints3 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 2)
                         ->where('period', 0)->get();
        $threemonthrankPoints4 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 3)
                         ->where('period', 0)->get();
        $threemonthrankPoints5 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 4)
                         ->where('period', 0)->get();
        $myrankPoints1 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 0)
                         ->where('period', 1)->get();
        $myrankPoints2 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 1)
                         ->where('period', 1)->get();
        $myrankPoints3 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 2)
                         ->where('period', 1)->get();
        $myrankPoints4 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 3)
                         ->where('period', 1)->get();
        $myrankPoints5 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 4)
                         ->where('period', 1)->get();
        $allrankPoints1 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 0)
                         ->where('period', 2)->get();
        $allrankPoints2 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 1)
                         ->where('period', 2)->get();
        $allrankPoints3 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 2)
                         ->where('period', 2)->get();
        $allrankPoints4 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 3)
                         ->where('period', 2)->get();
        $allrankPoints5 = ReportGraphBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))
                         ->where('area', 4)
                         ->where('period', 2)->get();

        return view('mypage.personal.history.last_print')
            ->with('page_info', $this->page_info)
            ->with("last_5season", $last5_season)
            ->with('current_season', $current_season)
            ->with('before_season', $before_season)
            ->with('current_user', $current_user)
            ->with('myBooks', $myBooks)
            ->with('mode', $mode)
            ->with('myAllowedBooks', $myAllowedBooks)
            ->with('myAllowedQuizes', $myAllowedQuizes)
            ->with('threemonthrankPoints1', $threemonthrankPoints1)
            ->with('threemonthrankPoints2', $threemonthrankPoints2)
            ->with('threemonthrankPoints3', $threemonthrankPoints3)
            ->with('threemonthrankPoints4', $threemonthrankPoints4)
            ->with('threemonthrankPoints5', $threemonthrankPoints5)
            ->with('myrankPoints1', $myrankPoints1)
            ->with('myrankPoints2', $myrankPoints2)
            ->with('myrankPoints3', $myrankPoints3)
            ->with('myrankPoints4', $myrankPoints4)
            ->with('myrankPoints5', $myrankPoints5)
            ->with('allrankPoints1', $allrankPoints1)
            ->with('allrankPoints2', $allrankPoints2)
            ->with('allrankPoints3', $allrankPoints3)
            ->with('allrankPoints4', $allrankPoints4)
            ->with('allrankPoints5', $allrankPoints5);

    }

    public function article_history(Request $request, $id=null){
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        if($id != Auth::id()) 
            $otherview_flag = true;
        $idarray = $request->input('idarry');
        $words = explode(",", $idarray);
        $word_cnt = count($words);
        
        $del = DB::table("articles")
            ->select('articles.*')
            ->whereIn('articles.id',$words)
            ->update(['junior_visible'=> 1]);

        $articles = DB::table("articles")
            ->select('articles.id','articles.created_at','books.title', 'books.firstname_nick', 'books.lastname_nick', 'books.writer_id','articles.junior_visible','articles.content',DB::raw('COUNT(votes.id) AS cnt'))
            ->join('books', 'articles.book_id', DB::raw('books.id and books.active <> 7'))
            ->join('users','users.id','=','articles.register_id')
            ->leftjoin('votes','votes.article_id','=','articles.id')
            ->where('users.id','=',$id)
            ->where('articles.junior_visible', 0)
            ->whereIn('users.active', [1,2,3,4])
            ->groupby('articles.id')
            ->get();

        $this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'article_history';
        return view('mypage.personal.history.article_history')
            ->with('articles',$articles)
            ->with('otherview_flag',$otherview_flag)
            ->with('user',$user)
            ->with('page_info', $this->page_info);
    }
    public function article_history_ajax($id){
        $voter = Vote::select('votes.*', 'users.role','users.fullname_is_public','users.username', 'users.firstname', 'users.lastname', 'users.firstname_nick', 'users.lastname_nick')
            ->join('articles','votes.article_id','=','articles.id')
            ->join('books', 'articles.book_id', DB::raw('books.id and books.active <> 7'))
            ->join('users','users.id','=','votes.voter_id')
            //->where(DB::raw('(YEAR(NOW()) - YEAR(users.birthday))'),'>=',15)
            ->where('votes.article_id','=',$id)
            ->whereIn('users.active', [1,2,3,4])
            ->get();
        $this->page_info['side'] = 'site_history';
        $this->page_info['subside'] = 'article_history_ajax';
        return view('mypage.personal.history.article_history_ajax')
            ->with('voter',$voter)
            ->with('page_info', $this->page_info);
    }

    public function main_info(){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $user = Auth::user();
        
        if(!isset($user)){
            return response('Unauthorized.', 401);
        }
        if($user->verifyface_flag == 0){
            return Redirect::to('/mypage/top?bottom=1');
        }
        $user->verifyface_flag = 0;
        $user->save();
        
        $today = now();
        $birthday = date_create($user->birthday);
       
        $curage= $user->age();

        $this->page_info['side'] = 'main_info';
        $this->page_info['subside'] = 'main_info';
        $type = "view";

        $classes = "";
        $pupilflag = 0;
        $current_season = MypageController::CurrentSeaon_Pupil(now());
        if($user->role == config('consts')['USER']['ROLE']['PUPIL']){

            $classes = $user->PupilsClass;
            if($classes->count() == 0)  $classes = "";
            $pupilflag = 1;
        }elseif($user->isGroupSchoolMember()){
            $classes = $user->ClassesOfTeacher($current_season);
            if($classes->count() == 0)  $classes = "";
            $pupilflag = 2;
        }

        return view('mypage.personal.info.main_info')
            ->with('page_info', $this->page_info)
            ->with('type', $type)
            ->with('user',$user)
            ->with('age',$curage)
            ->with('classes',$classes)
            ->with('pupilflag',$pupilflag);
    }

    public function recognize(){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        return Redirect::to('/mypage/face_verify/2');
        /*    $this->page_info['side'] = 'main_info';
            $this->page_info['subside'] = 'recognize';
            return view('mypage.main_info')
                ->with('page_info', $this->page_info);*/
    }

    public function edit_info(Request $request){
       
        $user = Auth::user();
        
        if(!isset($user)){
            return response('Unauthorized.', 401);
        }
        /*if($user->verifyface_flag == 0){
            return Redirect::to('/mypage/top');
        }*/
        $user->verifyface_flag = 0;
        $user->save();

        $today = now();
        $birthday = date_create($user->birthday);
        
        $curage= $user->age();
        $this->page_info['side'] = 'main_info';
        $this->page_info['subside'] = 'edit_info';
        $type = "edit";

        $classes = "";
        $pupilflag = 0;
        $current_season = MypageController::CurrentSeaon_Pupil(now());
        if($user->role == config('consts')['USER']['ROLE']["PUPIL"]){
            $classes = $user->PupilsClass;
            if($classes->count() == 0)  $classes = "";
            $pupilflag = 1;
        }elseif($user->isGroupSchoolMember()){
            $classes = $user->ClassesOfTeacher($current_season);
            if($classes->count() == 0)  $classes = "";
            $pupilflag = 2;
        }
        $update = "";
        if ($request->session()->has("update")){
            $update = $request->session()->get("update");
            $request->session()->remove("update");
        }

        return view('mypage.personal.info.main_info')
            ->with('page_info', $this->page_info)
            ->with('type', $type)
            ->with('user',$user)
            ->with('age',$curage)
            ->with('classes',$classes)
            ->with('update',$update)
            ->with('pupilflag',$pupilflag);
    }
    
    public function update_info(Request $request){
        $data = $request->all();
        $user = Auth::user();
        $rule = array(
            'phone' => 'required',
            'address1' => 'required',
            'address2' => 'required',
            'address4' => 'required',
            'address5' => 'required',
            'birthday' => 'required|date',
            'r_password' => 'required|string|min:8',
            'email' => 'required:users|email',
            
        );
       
        if(count(User::where('username', '!=', $user->username)->where('email',$request->input('email'))->get()) > 0) {
            $rule['email']='required|unique:users';
        }
        $messages = array(
            'required' => config('consts')['MESSAGES']['REQUIRED'] ,
            'r_password.required' => config('consts')['MESSAGES']['PASSWORD_REQUIRED'],
            'r_password.max' => config('consts')['MESSAGES']['PASSWORD_MAXLENGTH'],
            'r_password.min' => config('consts')['MESSAGES']['PASSWORD_LENGTH'],
            'birthday.required' => config('consts')['MESSAGES']['DATE_REQUIRED'],
            'birthday.date' => config('consts')['MESSAGES']['DATE_ERROR'],
            'email.required' => config('consts')['MESSAGES']['EMAIL_REQUIRED'],
            'email.email' => config('consts')['MESSAGES']['EMAIL_EMAIL'],
            'email.unique' => config('consts')['MESSAGES']['EMAIL_UNIQUE'],
            'gender.required' => config('consts')['MESSAGES']['GENDER_REQUIRED'],
        );
        $validator = Validator::make($request->all(), $rule, $messages);
        if($validator->fails()){
            return Redirect::back()->withErrors($validator)
                                    ->withInput();
        }

         //alerdy password double
        $password_others = User::where('r_password', '=', $request->input('r_password'))->where('id', '<>', $user->id)->count();
        if($password_others != 0){
            $error = config('consts')['MESSAGES']['PASSWORD_EXIST'];
         
            return Redirect::back()
                   ->withErrors(["r_password" => $error])
                  ->withInput();
        }         
        
        $user->update($request->all());
        $user->password = md5($request->input('r_password')); 
        $user->save();

        $books = Books::where('writer_id', $user->id)->where('active', '>=', 3)->where('active', '<', 7)->get();
        foreach ($books as $key => $book) {
            if($book->fullname_nick() != $user->fullname_nick()){
                $book->writer_id = null;
                $book->author_overseer_flag = 0;
                $book->save();
            }
        }

        $personworkHistory = new PersonworkHistory();
        $personworkHistory->user_id = $user->id;
        $personworkHistory->username = $user->username;
        $personworkHistory->device = $this->get_device();
        $personworkHistory->item = 0;
        $personworkHistory->work_test = 6;
        if($user->isSchoolMember()){
            $personworkHistory->user_type = '教職員';
            if(!$user->isLibrarian())
                $personworkHistory->org_username = $user->School->username;
        }else if($user->isAuthor())
            $personworkHistory->user_type = '著者';
        else if($user->isOverseer())
            $personworkHistory->user_type = '監修者';
        else if($user->isPupil()){
            $personworkHistory->user_type = '生徒';
            $personworkHistory->org_username = $user->ClassOfPupil->school->username;
        }else
            $personworkHistory->user_type = '一般';
        $personworkHistory->age = $user->age();
        $personworkHistory->address1 = $user->address1;
        $personworkHistory->address2 = $user->address2;
        $personworkHistory->save(); 

        try{
            Mail::to($user)->send(new Userinfochange($user));
            //admin
            $admin = User::find(1);
            $personadminHistory = new PersonadminHistory();
            $personadminHistory->user_id = $admin->id;
            $personadminHistory->username = $admin->username;
            $personadminHistory->item = 0;
            $personadminHistory->work_test = 13;
            $personadminHistory->bookregister_name = $user->username;
            $personadminHistory->content = '個人情報変更';
            $personadminHistory->save();
        }catch(Swift_TransportException $e){
            return Redirect::back()
                        ->withErrors(["servererr" => config('consts')['MESSAGES']['EMAIL_SERVER_ERROR']]);
        }

        return Redirect::back()->with('update',"ok");
    }

    public function update_userinfo(Request $request){
        
        $data = $request->all();
        $rule = array(
            'recommend_content' => 'required',
        );
        $messages = array(
            'required' => '入力してください。',
            'recommend_content.required' => '自己推薦文を入力してください。',
            'authfile.required' => '資格証のファイルを入力してください。'
        );
        $beforefile = $request->input('beforefile');
        $beforefilename = $request->input('beforefilename');
       
        $file = $request->file('authfile');
        if($file) {
            
            $ext = $file->getClientOriginalExtension();
            $now = date('YmdHis');
            $filename = md5($now . $file->getClientOriginalName()) . '.' . $ext;
            //$filename = $file->getClientOriginalName();
            $authfilesize = $file->getClientSize();
            $maxfilesize =$file->getMaxFilesize();
            $maxfilesize1 = round($maxfilesize / 1024 / 1024, 0);

            if(isset($user->id))
                $url = '/uploads/files/'. $user->id. '/';
            else{
                $id = $filename;
                $url = '/uploads/files/'. $id. '/';
            }
            if($authfilesize == 0 || $authfilesize > $maxfilesize){
                                        
                return Redirect::back()
                ->withErrors(["authfile" => 'ファイル容量は'.$maxfilesize1.'MB以下でしてください。'])
                ->withInput()->with("beforefile", $beforefile)->with("beforefilename", $beforefilename);
               
            }else{
                //$authfiledir = "/uploads/files/";
                if(file_exists(public_path().'/uploads/files/'.$beforefilename.'/'.$beforefilename) && $beforefilename != '' && $beforefilename !== null){
                    
                    $filedh  = opendir(public_path()."/uploads/files/".$beforefilename); //remove now uploaded file && directory
                    while (false !== ($filename1 = readdir($filedh))) {
                        if ($filename1 != "." && $filename1 != "..") { 
                            unlink(public_path()."/uploads/files/".$beforefilename."/".$filename1);
                        }
                    }
                    rmdir(public_path()."/uploads/files/".$beforefilename);
                }  

                // if(file_exists(public_path().$user->file) && $user->file != '' && $user->file !== null)  unlink(public_path().$user->file); //remove before file
                //upload file
                $file->move(public_path().$url, $file->getClientOriginalName());
                

                $beforefile = $file->getClientOriginalName() ;
                $beforefilename = $filename;
            }
        }
        if(!isset($beforefile) || $beforefile == '' || $beforefile == null){
            $rule['authfile'] = 'required';
        }
        $validator = Validator::make($request->all(), $rule, $messages);
        if ($validator->fails()){
            return Redirect::back()->withErrors($validator)
                    ->with("beforefile", $beforefile)
                    ->with("beforefilename", $beforefilename)
                    ->with("success", 2)
                    ->withInput();
        }

        $user = Auth::user();
        $fail =  $request->file('fail');
        if(isset($file) || (!isset($file) && $fail == 1)) {

            if(file_exists(public_path().$user->file) && $user->file != '' && $user->file !== null){
                
                /*$filedh  = opendir(public_path()."/uploads/files/".$user->id);
                while (false !== ($filename1 = readdir($filedh))) {
                    if ($filename1 != "." && $filename1 != "..") { 
                        unlink(public_path()."/uploads/files/".$user->id."/".$filename1);
                    }
                }
                rmdir(public_path()."/uploads/files/".$user->id);*/
                if(file_exists(public_path()."/uploads/files/".$user->id)){
                    rename(public_path()."/uploads/files/".$user->id, public_path()."/uploads/files/doqfile");

                    $filedh  = opendir(public_path()."/uploads/files/doqfile");
                    while (false !== ($filename1 = readdir($filedh))) {
                        if ($filename1 != "." && $filename1 != "..") { 
                            unlink(public_path()."/uploads/files/doqfile/".$filename1);
                        }
                    }
                    rmdir(public_path()."/uploads/files/doqfile");
                }
            }
            
            rename(public_path()."/uploads/files/".$beforefilename, public_path()."/uploads/files/".$user->id);
            
            $user->authfile = $beforefile;
            $user->file = '/uploads/files/'. $user->id. '/'.$beforefile;
       }
        $user->replied_date1 = now();
        $user->replied_date2 = now();
        $user->recommend_flag = 1;
        $user->recommend_content = $request->input('recommend_content');
        $user->save();
        /*$role = config('consts')['USER']['ROLE']['OVERSEER'];
        $userType = config('consts')['USER']['TYPE'][$role];

        $title = '新規会員登録(' . $userType . ')';
        try{
            Mail::to($user)->send(new Restore($user));
            //admin
            $admin = User::find(1);
            $personadminHistory = new PersonadminHistory();
            $personadminHistory->user_id = $admin->id;
            $personadminHistory->username = $admin->username;
            $personadminHistory->item = 0;
            $personadminHistory->work_test = 13;
            $personadminHistory->bookregister_name = $user->username;
            $personadminHistory->content = '会員登録申請回答';
            $personadminHistory->save();
        } catch(Swift_TransportException $e) {

            $user->delete();
            return Redirect::back()
                 ->withErrors(["servererr" => config('consts')['MESSAGES']['EMAIL_SERVER_ERROR']])
                ->withInput()
                ->withTitle($title);
        }
        return Redirect::to("/logout");*/
        return Redirect::back()->with("success", 1)
                    ->with("beforefile", $beforefile)
                    ->with("beforefilename", $beforefilename)
                    ->withInput();
    }

    public function other_view_info(Request $request, $id=null){

        //if(!isset($id) || $id == null) {
        //    $id = Auth::id();
        //}
        //$otherviewid = $request->input("otherviewid");
        //        if(!Auth::user()->isGeneral()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = true;
        if(!isset($id) || $id == null) {
            //$id = Auth::id();
            $otherview_flag = false;
        }

        $edit = 0;
        $class = "";
        $pupilflag = 0;
        $classes = null;
        
        if(isset($id) && $id !== null){
            $user = User::find($id);
            if($user->role == config('consts')['USER']['ROLE']['PUPIL']){
                $classes = $user->PupilsClass;
                $pupilflag = 1;
                if(isset($classes)){
                    if(Auth::user()->isAdmin()){
                        $edit = 1;
                    }
                    elseif(Auth::user()->isTeacher()){
                        if($classes->teacher_id == Auth::id())
                            $edit = 1;
                    }
                    elseif(Auth::user()->isGroup()){
                        if($classes->group_id == Auth::user()->id) 
                            $edit = 1;
                    }elseif(Auth::user()->isRepresen() || Auth::user()->isItmanager()){
                        if($classes->group_id == Auth::user()->org_id) 
                            $edit = 1;
                    }elseif(Auth::user()->isLibrarian()){

                        $librarianclassses = Auth::user()->GroupOfLibrarian()->get();
                        foreach ($librarianclassses as $key => $librarianclasss) {
                            if($classes->group_id == $librarianclasss->group_id) 
                                $edit = 1;
                        }
                    }
                }
            }
        }else{
            $user = Auth::user();
            
            if($user->role == config('consts')['USER']['ROLE']["PUPIL"]){

                $classes = $user->PupilsClass;
                $pupilflag = 1;
            }else{
                $current_season = MypageController::CurrentSeaon_Pupil(now());
                $classes = $user->ClassesOfTeacher($current_season);
                $pupilflag = 2;
            }
        }

        $today = now();
        $birthday = date_create($user->birthday);
        $this->page_info['side'] = 'main_info';
        $this->page_info['subside'] = 'other_view_info';
        $type = "other_view";
        if(isset($id) && $id !== null){
            $curage = User::find($id)->age();
            return view('mypage.personal.info.main_info')
                ->with('page_info', $this->page_info)
                ->withNosidebar(true)
                ->with('type', $type)
                ->with('id', $id)
                ->with('user',$user)
                ->with('classes',$classes)
                ->with('pupilflag',$pupilflag)
                ->with('age',$curage)
                ->with('edit',$edit)
                ->with('otherview_flag',$otherview_flag);
        }else{
            $curage = Auth::user()->age();
            return view('mypage.personal.info.main_info')
                ->with('page_info', $this->page_info)                
                ->with('type', $type)
                ->with('id', $id)
                ->with('user',$user)
                ->with('classes',$classes)
                ->with('pupilflag',$pupilflag)
                ->with('age',$curage)
                ->with('edit',$edit)
                ->with('otherview_flag',$otherview_flag);
        }
    }

    public function become_overseer(Request $request){
        //        if(!Auth::user()->isGeneral()){
        //            return Redirect::to('/');
        //        }
        $this->page_info['side'] = 'main_info';
        $this->page_info['subside'] = 'become_overseer';
        $user = User::find(Auth::id());
        $view = view('mypage.personal.info.become_overseer')
            ->with('page_info', $this->page_info)
            ->with('user', $user);
        if ($request->session()->has("beforefile"))
            $view = $view->with('beforefile', $request->session()->get('beforefile'));
        else if($user->recommend_flag == 1)
            $view = $view->with('beforefile', $user->authfile);
        if ($request->session()->has("beforefilename"))
            $view = $view->with('beforefilename', $request->session()->get('beforefilename'));
        if ($request->session()->has("success")){
            if($request->session()->get('success') == 1)
                $request->session()->flash('status', config('consts')['MESSAGES']['SUCCEED']);
            else
                $view = $view->with('fail', 1);
        }
        else{
            $view = $view->with('fail', 1);
        }
        return $view;
    }

    public function escape_group(Request $request){
        // if(!Auth::user()->isGeneral()){
        //    return Redirect::to('/');
        // }
        $user = Auth::user();
        $mypassword = $user->r_password;
        
        $this->page_info['side'] = 'main_info';
        $this->page_info['subside'] = 'escape_group';
        return view('mypage.personal.info.escape_group')
            ->with('page_info', $this->page_info)
            ->with('user',$user)
            ->with('mypassword',$mypassword);
         
    }

    public function payment(Request $request){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $user = Auth::user();
        
        if(!isset($user)){
            return response('Unauthorized.', 401);
        }
        if($user->verifyface_flag == 0){
            // return Redirect::to('/mypage/top');
        }
        $user->verifyface_flag = 0;
        $user->save();
        if($user->pay_content !== null && $user->pay_content !== ''){
            $pay_content = config('consts')['PAY_LIST'][$user->pay_content].$user->pay_amount.'円';
        }
        else{
            $pay_content = '月額支払い（または年額支払い)';
        }
        $pay_period = $user->period;
        if($pay_period !== null && $pay_period !== ""){
            $pay_date_arr = explode("-", $pay_period);
            $pay_year = $pay_date_arr[0];
            $pay_month = $pay_date_arr[1];
            $pay_date = $pay_date_arr[2];
        }
        else{
            $pay_year = '〇〇〇〇';
            $pay_month = '〇';
            $pay_date = '〇';
        }

        $this->page_info['side'] = 'payment';
        $this->page_info['subside'] = 'payment';
        $request->session()->put('pay_path', 0);
        $request->session()->put('index', 100);

        return view('mypage.personal.payment')
            ->with('pay_year', $pay_year)
            ->with('pay_month', $pay_month)
            ->with('pay_date', $pay_date)
            ->with('pay_content', $pay_content)
            ->with('page_info', $this->page_info);
    }

    public function periodPayment(Request $request){

        $user = Auth::user();
        
        if(!isset($user)){
            return response('Unauthorized.', 401);
        }
       
        //$user->period = 0;
        $user->save();
        $current_date = date("Y-n-d");
        $current_date_time = date("Y-n-d H:i:s");
    
        $pay_state_row = PersonworkHistory::where('user_id', Auth::id())
                                    ->where('pay_point', '!=', '0')
                                    ->where('pay_point', '!=', null)
                                    ->where('period', '>=', $current_date)
                                    ->where('created_at', '<=', $current_date_time)
                                    ->orderby('id', 'desc')
                                    ->first();
        $pay_period = '0000-00-00';
        $pay_amount = 0;
        if(!is_null($pay_state_row) && count($pay_state_row)){
            $pay_period = $pay_state_row->period;
            $pay_amount = $pay_state_row->pay_point;
            $pay_state = 1;

        }
        else{
            $pay_state = 0;
        }

        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'create_certi';

        $this->page_index = 'period';
        $pay_path = $request->session()->get('pay_path');
        $index = 1;
        return view('mypage.personal.certi.settlement_certi')
            ->with('page_info', $this->page_info)
            ->with('index',$index)
            ->with('pay_period', $pay_period)
            ->with('pay_amount', $pay_amount)
            ->with('pay_path', $pay_path)
            ->with('pay_state', $pay_state)
            ->with('page_index', $this->page_index);
    }
    public function getPayment_result(Request $request){

            $user = Auth::user();
            $index = $request->session()->get('index');
            $certi_back = CertiBackup::where(['user_id' => $user->id, 'index' => $index])->first();
   
            if(!isset($user)){
                return response('Unauthorized.', 401);
            }
           
            //$user->period = 0;
    
            $this->page_info['side'] = 'create_certi';
            $this->page_info['subside'] = 'create_certi';
            $this->page_index = 'period';
            $this->pay_tx = $request->tx;
            $this->pay_amount = $request->amt;
            $this->pay_code = $request->cc;
            $this->pay_item = $request->item_number;
            $this->pay_content = $request->item_name;
            $this->pay_state = $request->st;
    
            $current_year = date("Y");
            $current_month = date("n");
            $current_date = date("d");
            if($certi_back === null || $certi_back->settlement_date === null || $certi_back->settlement_date == '')
                $period = date_format(date_add(now(), date_interval_create_from_date_string("6 months")), "Y-m-d");
            else
                $period = date_format(date_add(date_create($certi_back->settlement_date), date_interval_create_from_date_string("5 months")), "Y-m-d");


            if($this->pay_state == "Completed"){
                if($user->isAdmin()){
                
                }else if($user->isGroup()){
                    
                    $personworkHistory = new PersonworkHistory();
                    $personworkHistory->user_id = $user->id;
                    $personworkHistory->username = $user->username;
                    $personworkHistory->item = 0;
                    $personworkHistory->work_test = 10;
                    $personworkHistory->user_type = '団体';
                    $personworkHistory->address1 = $user->address1;
                    $personworkHistory->address2 = $user->address2;
                    $personworkHistory->pay_point = $this->pay_amount;
                    $personworkHistory->period = $period;
                    $personworkHistory->content = $this->pay_content;
    
    
                }else if($user->isSchoolMember()){
                    
                    $personworkHistory = new PersonworkHistory();
                    $personworkHistory->user_id = $user->id;
                    $personworkHistory->username = $user->username;
                    $personworkHistory->item = 0;
                    $personworkHistory->work_test = 10;
                    $personworkHistory->user_type = '教職員';
                    if(!$user->isLibrarian())
                        $personworkHistory->org_username = $user->School->username;
                    $personworkHistory->age = $user->age();
                    $personworkHistory->address1 = $user->address1;
                    $personworkHistory->address2 = $user->address2;
                    $personworkHistory->pay_point = $this->pay_amount;
                    $personworkHistory->period = $period;
                    $personworkHistory->content = $this->pay_content;
    
                }else{
                    $personworkHistory = new PersonworkHistory();
                    $personworkHistory->user_id = $user->id;
                    $personworkHistory->username = $user->username;
                    $personworkHistory->item = 0;
                    $personworkHistory->work_test = 10;
                    if($user->isAuthor())
                        $personworkHistory->user_type = '著者';
                    else if($user->isOverseer())
                        $personworkHistory->user_type = '監修者';
                    else if($user->isPupil()){
                        $personworkHistory->user_type = '生徒';
                        $personworkHistory->org_username = $user->ClassOfPupil->school->username;
                    }else
                        $personworkHistory->user_type = '一般';
                    $personworkHistory->age = $user->age();
                    $personworkHistory->address1 = $user->address1;
                    $personworkHistory->address2 = $user->address2;
                    $personworkHistory->pay_point = $this->pay_amount;
                    $personworkHistory->period = $period;
                    $personworkHistory->content = $this->pay_content;
                }
                $current_date = date("Y-n-d");
                // $pay_state_row = PersonworkHistory::where('user_id', Auth::id())
                // ->where('pay_point', '!=', '0')
                // ->where('pay_point', '!=', null)
                // ->where('period', '>=', $current_date)
                // ->where('created_at', '<=', $current_date)
                // ->orderby('id', 'desc')
                // ->get();
    
                // if(!is_null($pay_state_row) && count($pay_state_row) != 0){
                //     $pay_state_row->period = $period;
                //     $pay_state_row->pay_poing = $this->pay_amount;
                //     $pay_state_row->content = $this->pay_content;        
                //     $pay_state_row->save();
                // }
                // else{
                    $personworkHistory->device = $this->get_device();
                    $personworkHistory->certi_backup_id = $certi_back->id;
                    $personworkHistory->save();
                // }
                $message = new Messages;
                if(isset($index) && $index == 100){
                    $period_date = date_create($period);

                    $message->to_id = Auth::id();
                    $message->type = 0;
                    $message->name = "協会";
                    $message->content = "支払いが完了しました。決済額は".$this->pay_amount."円です。";                
                }
                elseif(isset($index) && $index < 100){
                    $passcode = $this->settlement_user($request, $index);
                    $period_date = date_create($period);
    
                    $message->to_id = Auth::id();
                    $message->type = 0;
                    $message->name = "協会";
                    if($certi_back->settlement_date === null || $certi_back->settlement_date == '') {
                        $message->content = "支払いが完了しました。読書認定書（パスコード".$passcode."）の有効期限は ".date_format($period_date, 'Y年n月j日')."です。";                
                    }
                    else{
                        $message->content = "支払いが完了しました。読書認定書（パスコード".$passcode."）の有効期限は ".date_format($period_date, 'Y年n月j日')."に延長されました。";                
                    }
                }
                $message->save();

            }
            return Redirect::to('/mypage/site_notify');        
    }

    public function settlement_user(Request $request, $index=null){
        $user = User::find(Auth::id());
        $certi_back = CertiBackup::where(['user_id' => $user->id, 'index' => $index])->first();
        if(!$certi_back){
            $certi_back = new CertiBackup();
        }
        //        if () { // if payment success 

        if($index == 5){
            if($certi_back->settlement_date === null || $certi_back->settlement_date == '')
                $certi_back->settlement_date = date_format(date_add(now(), date_interval_create_from_date_string("6 months")), "Y-m-d");
            else
                $certi_back->settlement_date = date_format(date_add(date_create($certi_back->settlement_date), date_interval_create_from_date_string("5 months")), "Y-m-d");
            $certi_back->save();
        }
        else{
            if($certi_back->passcode){
                $passcode = $certi_back->passcode;
            }
            else{
                $passcode = rand(100000, 999999);
            }
            if($certi_back->settlement_date === null || $certi_back->settlement_date == '')
                $certi_back->settlement_date = date_format(date_add(now(), date_interval_create_from_date_string("6 months")), "Y-m-d");
            else
                $certi_back->settlement_date = date_format(date_add(date_create($certi_back->settlement_date), date_interval_create_from_date_string("5 months")), "Y-m-d");

            $certi_back->passcode = $passcode;
            $certi_back->index = $index;
            $certi_back->save();
        }
        //        }
        // $message = new Messages;
        // $message->to_id = Auth::id();
        // $message->type = 0;
        // $message->name = "協会";
        // $message->content = sprintf(config('consts')['MESSAGES']['SETTLEMENT_SUCCESS'], $passcode); 
        // $message->save();

       if($user->isSchoolMember()){
            
            $personworkHistory = new PersonworkHistory();
            $personworkHistory->user_id = $user->id;
            $personworkHistory->username = $user->username;
            $personworkHistory->item = 0;
            $personworkHistory->work_test = 11;
            $personworkHistory->user_type = '教職員';
            if(!$user->isLibrarian())
                $personworkHistory->org_username = $user->School->username;
            $personworkHistory->age = $user->age();
            $personworkHistory->address1 = $user->address1;
            $personworkHistory->address2 = $user->address2;
        }else{
            $personworkHistory = new PersonworkHistory();
            $personworkHistory->user_id = $user->id;
            $personworkHistory->username = $user->username;
            $personworkHistory->item = 0;
            $personworkHistory->work_test = 11;
            if($user->isAuthor())
                $personworkHistory->user_type = '著者';
            else if($user->isOverseer())
                $personworkHistory->user_type = '監修者';
            else if($user->isPupil()){
                $personworkHistory->user_type = '生徒';
                $personworkHistory->org_username = $user->ClassOfPupil->school->username;
            }else
                $personworkHistory->user_type = '一般';
            $personworkHistory->age = $user->age();
            $personworkHistory->address1 = $user->address1;
            $personworkHistory->address2 = $user->address2;
            if(isset($passcode))
                $personworkHistory->content = $passcode;
            $personworkHistory->pay_point = '';
            $personworkHistory->period = $certi_back->settlement_date;
        }
        $personworkHistory->device = $this->get_device();
        $personworkHistory->save(); 

        return $passcode;
    }

    public function create_certi(){
        $firstname = DB::table('users')
            ->select('firstname')
            ->where('id','=',Auth::id())
            ->first();
        $username = DB::table('users')
            ->select('username')
            ->where('id','=',Auth::id())
            ->first();
        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'create_certi';
        return view('mypage.personal.certi.create_certi')
            ->with('firstname',$firstname)
            ->with('username',$username)
            ->with('page_info', $this->page_info);
    }

    public function certi_check(Request $request, $index = null){
        $user = Auth::user();
        $now = date_format(now(), "Y-m-d");
        if($index < 5){
            // if($user->settlement_date >= $now){
            //     return view('mypage.personal.certi.passcode_certi')
            //     ->with('page_info', $this->page_info)
            //     ->with('index',$index);
            // }
            // else{
                if($index == 1 || $index == 2){
                    return Redirect::to('/mypage/preview_certi/'.$index);    
                }
                elseif($index == 3 || $index == 4){
                    return Redirect::to('/mypage/search_certi/'.$index);           
                }
            // }
        }
        else{
            return view('mypage.personal.certi.passcode_certi')
            ->with('page_info', $this->page_info)
            ->with('index',$index);
        }
    }

    public function preview_certi(Request $request, $index=null){
        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'create_certi';
        
        $user = Auth::user();
        $total_point = UserQuiz::TotalPoint();
        $my_rank = 10;
        $request->session()->put('pay_path', 1);
        $ranks = [29070, 14070, 6070, 2070, 870, 370, 220, 120, 60, 20, 0];

        for ($i = 0; $i < 11; $i++) {
            if ($total_point >= $ranks[$i] && $total_point < $ranks[$i - 1]) {
                $my_rank = $i;
            }
        }

        if($request->input("sort_dir")){
            $request->session()->put('sort_dir', $request->input("sort_dir"));
        }

        if($index == 1){
            return Redirect::to('/mypage/settlement_certi/'.$index.'/a');
            // return Redirect::to('/mypage/certi_pay/'.$index);           
        }elseif($index == 2){
            return Redirect::to('/mypage/settlement_certi/'.$index.'/a');
        }elseif($index == 3 || $index == 4){
            return Redirect::to('/mypage/settlement_certi/'.$index.'/'.$request->input('items'));
        }
        else{
            return view('mypage.personal.certi.passcode_certi')
            ->with('page_info', $this->page_info)
            ->with('index',$index);
        }
    }
    public function sample_certi(Request $request){
        
        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'sample_certi';
        
        return view('mypage.personal.certi.sample_certi')
            ->with('page_info', $this->page_info);
        
    }
    public function search_certi(Request $request, $index=null){
        
        $books = [];
        if($request->input('search')){
            
            $books = Books::MyBooks(-1);

            if($request->input('title') !== null && $request->input('title') != ""){
                $books = $books->where('books.title', 'like', '%'.$request->input('title').'%');
            }
               
            
             
            if($request->input('firstname_nick') !== null && $request->input('firstname_nick') != ""){
                $books = $books->where('books.firstname_nick', 'like', '%'.$request->input('firstname_nick').'%');   
            }

            if($request->input('lastname_nick') !== null && $request->input('lastname_nick') != ""){
                $books = $books->where('books.lastname_nick', 'like', '%'.$request->input('lastname_nick').'%');   
            }
            if($request->input('book_id') !== null && $request->input('book_id') != ""){
                $book_id = $request->input('book_id');
                $book_id = substr($book_id, 2);
                $books = $books->where('books.id',$book_id);
            }
            if($request->input('key_s_date')){
                $date1  = $request->input('key_s_date');
                $books4 = $books->where('user_quizes.finished_date', '>=', Carbon::create(date_format(date_create($date1),"Y"), date_format(date_create($date1),"m"),date_format(date_create($date1),"d"),0,0,0));
            }
            if($request->input('key_e_date')){
                $date2  = $request->input('key_e_date');
                $books = $books->where('user_quizes.finished_date', '<=', Carbon::create(date_format(date_create($date2),"Y"), date_format(date_create($date2),"m"),date_format(date_create($date2),"d"),23,59,59));
            }
            if($request->input('key_type')){
                $books = $books->where('key_type', '<=', $request->input('key_type'));
            }

            if($request->input('categories')){
                
                $search_categories = $request->input('categories');
                
                /* select books.* from books
                inner join book_category as t1 on t1.category_id = 3 
                inner join book_category as t2 on t2.category_id = 5
                where books.id = t1.book_id and t1.book_id = t2.book_id  */
                foreach($search_categories as $key => $category_id){
                    $books = $books->join(DB::raw('book_category as t'.$key), 't'.$key.'.category_id','=', DB::raw($category_id));
                    if($key == 0)
                        $books = $books->where('books.id', '=', DB::raw('t0.book_id')); 
                    else{
                        $i = $key - 1;
                        $books = $books->where(DB::raw('t'.$i.'.book_id'), DB::raw('t'.$key.'.book_id'));
                    }
                }
            }

            // orderBy(DB::raw("books.firstname_yomi asc, books.lastname_yomi"), 'asc')->
            $books = $books->orderBy('user_quizes.finished_date', 'desc')->groupBy('books.id')->limit(10)->get();      
        }


            
        $categories = Categories::all();
        // $s_date = date("Y").'/'.date('m').'/01';
        // $e_date = date("Y").'/'.date('m').'/30';
        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'search_certi';
        return view('mypage.personal.certi.search_certi')
            ->with('page_info', $this->page_info)
            ->with('index',$index)
            ->with('books',$books)
            ->with('categories',$categories);
    }

    public function settlement_certi(Request $request, $index=null, $bookitems=''){
        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'create_certi';
        $sort_dir = 'asc';
        if($request->session()->has('sort_dir')) {
            $sort_dir = $request->session()->pull('sort_dir');
        }

        $user = Auth::user();

        $total_point = UserQuiz::TotalPoint();
        $my_rank = 10;

        $ranks = [29070, 14070, 6070, 2070, 870, 370, 220, 120, 60, 20, 0];

        for ($i = 0; $i < 11; $i++) {
            if ($total_point >= $ranks[$i] && $total_point < $ranks[$i - 1]) {
                $my_rank = $i;
            }
        }

        $certibackup = CertiBackup::where(['user_id' => $user->id, 'index' => $index])
                                // ->where('passcode', '!=', " ")
                                // ->whereNotNull('passcode')
                                ->first();
        if(!isset($certibackup)){
            $certibackup = new CertiBackup();
            $certibackup->user_id = $user->id;
            $certibackup->username = $user->username;
            $certibackup->index = $index;
            $certibackup->backup_date = date_format(now(), "Y-m-d");
            $certibackup->level = $my_rank;
            $certibackup->sum_point = $total_point;
        }
        if($certibackup->passcode == null || $certibackup->passcode == ""){
            $certibackup->backup_date = date_format(now(), "Y-m-d");
        }


        if($index == 1){

            $certibackup->booktest_success = '';
            
        }elseif($index == 2){
            //$myAllHistories = UserQuiz::where("user_id", Auth::id())->where("type", 2)->where("status", 3)->get();
            $myAllHistories = Books::MyBooks(-1)->where('user_quizes.is_public', 1)->orderBy(DB::raw("books.firstname_nick asc, books.lastname_nick"), 'asc')->get();
            $bookcount = count($myAllHistories);

            $book_temp = "";
            foreach ($myAllHistories as $key => $history) {
                $book_temp .= $history->title.":".$history->firstname_nick.''.$history->lastname_nick;
                if($key < count($myAllHistories)-1)
                    $book_temp .= ",";
            }
            $certibackup->booktest_success = $book_temp;
        }elseif($index == 3){

            $items = preg_split('/,/', $bookitems);
            $myAllHistories = [];
            foreach($items as $item){
                $myAllHistories_temp = UserQuiz::where("user_quizes.user_id", Auth::id())
                                ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                                ->where("user_quizes.type", 2)->where("user_quizes.status", 3)->where('user_quizes.book_id', $item)->first();
                array_push($myAllHistories, $myAllHistories_temp);
            }
            
            $book_temp = ""; 
            foreach ($myAllHistories as $key => $history) {
                $book_temp .= date_format(date_create($history->finished_date), "Y年m月d日").":".$history->Book->title.":".$history->Book->fullname_nick().":".$history->Book->publish.":dq".$history->book_id;
                if($key < count($myAllHistories)-1)
                    $book_temp .= ",";
            }             
            $certibackup->booktest_success = $book_temp;
        }elseif($index == 4){

            $items = preg_split('/,/', $bookitems);
            $myAllHistories = [];
            foreach($items as $item){
                $myAllHistories_temp = UserQuiz::where("user_quizes.user_id", Auth::id())
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where("user_quizes.type", 2)->where("user_quizes.status", 3)->where('user_quizes.book_id', $item)->first();
                array_push($myAllHistories, $myAllHistories_temp);
            }
            
            $book_temp = "";
            foreach ($myAllHistories as $key => $history) {
                $book_temp .= date_format(date_create($history->finished_date), "Y年m月d日").":".$history->Book->title.":".$history->Book->fullname_nick().":".$history->Book->publish.":dq".$history->book_id;
                if($key < count($myAllHistories)-1)
                    $book_temp .= ",";
            }             
            $certibackup->booktest_success = $book_temp;         
        }

        $certibackup->save();
        $certi_preview = CertiBackup::where(['user_id' => $user->id, 'index' => $index])
                                    ->first();

        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'create_certi';

        return view('mypage.personal.certi.certi_view')
                    ->with('certi_preview',$certi_preview)
                    ->with('user',$user)
                    ->with('index',$index)
                    ->with('page_info', $this->page_info);
    }

    public function settlement_certi_view(Request $request, $user_id=null, $index=null){
        if($user_id != null){
            $user = User::where('id', $user_id)->first();
        }
        else{
            $invalid_errors = "error";
            return Redirect::back()->withInput()->withErrors(array('passcode_error' => $invalid_errors));
        }
        $certi_preview = CertiBackup::where(['user_id' => $user->id, 'index' => $index])
                                    ->first();
        if(!isset($certi_preview)){
            $invalid_errors = "error";
            return Redirect::back()->withInput()->withErrors(array('passcode_error' => $invalid_errors));
        }


        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'create_certi';

        return view('mypage.personal.certi.certi_view')
                    ->with('certi_preview',$certi_preview)
                    ->with('user',$user)
                    ->with('index',$index)
                    ->with('page_info', $this->page_info);
    }

    public function certi_pay(Request $request, $index = null){
        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'create_certi';
        $user = Auth::user();
        $now = date_format(now(), "Y-m-d");
        $current_date = date("Y-n-d");
        $current_date_time = date("Y-n-d H:i:s");
        $pay_path = $request->session()->get('pay_path');
        $pay_state_row = PersonworkHistory::where('user_id', Auth::id())
                                    ->where('pay_point', '!=', '0')
                                    ->where('pay_point', '!=', null)
                                    ->where('period', '>=', $current_date)
                                    ->where('created_at', '<=', $current_date_time)
                                    ->orderby('id', 'desc')
                                    ->first();
        if(!is_null($pay_state_row)){
            $pay_state = 1;

        }
        else{
            $pay_state = 0;
        }
        $request->session()->put('index', $index);
        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'create_certi';
        return view('mypage.personal.certi.settlement_certi')
                ->with('page_info', $this->page_info)
                ->with('pay_state', $pay_state)
                ->with('pay_path', $pay_path)
                ->with('index',$index);
    }

    public function passcode(Request $request, $index = null){
        $password = $request->input('pwd'); 
        
        $rule = array(
            'pwd' => 'required'
        );
        $message = array(
            'pwd.required' => config('consts')['MESSAGES']['PASSWORD_REQUIRED']
        );

        $validator = Validator::make($request->all(), $rule, $message);
        if($validator->fails()){
            return Redirect::back()->withErrors($validator)->withInput();
        }
        
        $user = CertiBackup::where('passcode', $password)->first();
        if(!isset($user)) {
            $invalid_errors = "error";
            return Redirect::back()->withInput()->withErrors(array('invalid_pwd' => $invalid_errors));
        }
        $settlement_check = CertiBackup::where('id', $user->id)
                            ->where('passcode', '!=', '')
                            ->whereNotNull('passcode')
                            ->whereNotNull('settlement_date')
                            ->where('settlement_date', '!=', '')
                            ->where('settlement_date' ,'>=', now())
                            ->count();

        if(!is_null($settlement_check) && $settlement_check > 0) {
            if($index == null){
                // Auth::login($user);
                return Redirect::to('/mypage/settlement_certi_view/'.$user->user_id.'/'.$user->index);     
            }
            elseif($index == 1 || $index == 2){
                return Redirect::to('/mypage/preview_certi/'.$index);           
            }
            elseif($index == 3 || $index == 4){
                return Redirect::to('/mypage/search_certi/'.$index);           
            }
            else{
                return Redirect::to('/mypage/certi_pay/'.$user->index);           
            }
        }
        else{
            $invalid_errors = "error";
            return Redirect::back()->withInput()->withErrors(array('passcode_error' => $invalid_errors));
        }

    }

    public function certi_print(Request $request){
        $user_id = $request->input("id");
        $index = $request->input("index");
        $user = User::find($user_id);
        $certi_preview = CertiBackup::where(['user_id' => $user->id, 'index' => $index])
                                    ->first();

        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'create_certi';

        return view('mypage.personal.certi.certi_print')
                    ->with('certi_preview',$certi_preview)
                    ->with('user',$user)
                    ->with('page_info', $this->page_info);
    }
    public function search_list(Request $request){
        /*$author = $request->input('key_author');
        $title = $request->input('key_title');
        $qid = $request->input('key_qid');
        $s_date = $request->input('key_s_date');
        $e_date = $request->input('key_e_date');
        $type = $request->input('key_type');
        if($s_date == "" && $e_date != ""){
            $books = DB::table('user_quizes')
                ->select('books.title','books.id','books.firstname_nick','books.lastname_nick','books.writer_id','books.type','user_quizes.published_date','user_quizes.point','book_category.category_id')
                ->join('books','user_quizes.book_id','=','books.id')
                ->join('book_category','book_category.book_id','=','books.id')
                ->where('user_quizes.user_id', Auth::id())
                ->where('user_quizes.type',2)
                ->where('user_quizes.status', 3)
                ->where('books.title','like','%'.$title.'%')
                ->where('books.writer','like','%'.$title.'%')
                ->where('books.writer_id','like','%'.$qid.'%')
                //->where('user_quizes.published_date','>', $s_date)
                ->where('user_quizes.published_date','<', $e_date)
                ->where('book_category.category_id','=',$type)
                ->groupby('books.title')
                ->get();
        }elseif($s_date != "" && $e_date == ""){
            $books = DB::table('user_quizes')
                ->select('books.title','books.id','books.writer','books.writer_id','books.type','user_quizes.published_date','user_quizes.point','book_category.category_id')
                ->join('books','user_quizes.book_id','=','books.id')
                ->join('book_category','book_category.book_id','=','books.id')
                ->where('user_quizes.user_id', Auth::id())
                ->where('user_quizes.type',2)
                ->where('user_quizes.status', 3)
                ->where('books.title','like','%'.$author.'%')
                ->where('books.writer','like','%'.$title.'%')
                ->where('books.writer_id','like','%'.$qid.'%')
                ->where('user_quizes.published_date','>', $s_date)
                //->where('user_quizes.published_date','<', $e_date)
                ->where('book_category.category_id','=',$type)
                ->groupby('books.title')
                ->get();
        }elseif($s_date == "" && $e_date == ""){
            $books = DB::table('user_quizes')
                ->select('books.title','books.id','books.writer','books.writer_id','books.type','user_quizes.published_date','user_quizes.point','book_category.category_id')
                ->join('books','user_quizes.book_id','=','books.id')
                ->join('book_category','book_category.book_id','=','books.id')
                ->where('user_quizes.user_id', Auth::id())
                ->where('user_quizes.type',2)
                ->where('user_quizes.status', 3)
                ->where('books.title','like','%'.$author.'%')
                ->where('books.writer','like','%'.$title.'%')
                ->where('books.writer_id','like','%'.$qid.'%')
                //->where('user_quizes.published_date','>', $s_date)
                //->where('user_quizes.published_date','<', $e_date)
                ->where('book_category.category_id','=',$type)
                ->groupby('books.title')
                ->get();
        }else{
            $books = DB::table('user_quizes')
                ->select('books.title','books.id','books.writer','books.writer_id','books.type','user_quizes.published_date','user_quizes.point','book_category.category_id')
                ->join('books','user_quizes.book_id','=','books.id')
                ->join('book_category','book_category.book_id','=','books.id')
                ->where('user_quizes.user_id', Auth::id())
                ->where('user_quizes.type',2)
                ->where('user_quizes.status', 3)
                ->where('books.title','like','%'.$author.'%')
                ->where('books.writer','like','%'.$title.'%')
                ->where('books.writer_id','like','%'.$qid.'%')
                ->where('user_quizes.published_date','>', $s_date)
                ->where('user_quizes.published_date','<', $e_date)
                ->where('book_category.category_id','=',$type)
                ->groupby('books.title')
                ->get();
        }
        $count_books = count($books);
        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'search_certi';
        return view('mypage.personal.certi.search_certi')
            ->with('page_info', $this->page_info)
            ->with('books',$books)
            ->with('count_books',$count_books);*/
    }

    public function ok_certi(){
        //        if(!Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $this->page_info['side'] = 'create_certi';
        $this->page_info['subside'] = 'ok_certi';
        return view('mypage.overseer.ok_certi')
            ->with('page_info', $this->page_info);
    }

    public function oversee_test(){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $this->page_info['side'] = 'oversee_test';
        $this->page_info['subside'] = 'oversee_test';
        return view('mypage.personal.oversee.oversee_test')
            ->with('page_info', $this->page_info);
    }

    public function overseerTestStart(Request $request){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        //$pupilId = $request->input("tester_name");
        return Redirect::to('/mypage/history_oversee');
    }

    public function test_overseer(){
        //        if(!Auth::user()->isGeneral()){
        //            return Redirect::to('/');
        //        }
        $this->page_info['side'] = 'oversee_test';
        $this->page_info['subside'] = 'test_overseer';
        if(Auth::id()){
            $user = User::find(Auth::id());
            if($user){
                $aptitude = $user->aptitude;
            }
            else{
                $aptitude = 0;
            }
        }
        else{
            $aptitude = 0;
        }

        return view('mypage.personal.oversee.test_overseer')
            ->with('page_info', $this->page_info)
            ->with('aptitude', $aptitude);
    }

    public function history_oversee($id = null){
        //        if(!Auth::user()->isGeneral() && !Auth::user()->isOverseer()){
        //            return Redirect::to('/');
        //        }
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        if($id != Auth::id()) 
            $otherview_flag = true;
        $this->page_info['side'] = 'oversee_test';
        $this->page_info['subside'] = 'history_oversee';
        /*================== For getting test counts =======================*/
        $histories = UserQuizesHistory::where("userquizes_history.examinemethod", 0)
                                        ->where( function ($q) {
                                            $q->Where(function ($q1) {
                                                $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 4);                    
                                            })->orWhere(function ($q1) {
                                                $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 3);
                                            });
                                        })
                                       ->join('books', 'userquizes_history.book_id', DB::raw('books.id and books.active <> 7'))
                                       ->where("userquizes_history.org_id", $id)
                                       ->orderBy('created_date', 'desc')
                                       ->get();

        /*================== For getting test members amount =======================*/
        $user_histories = UserQuizesHistory::where("userquizes_history.type", 2)->where("userquizes_history.examinemethod", 0)
                                            ->join('books', 'userquizes_history.book_id', DB::raw('books.id and books.active <> 7'))
                                            ->where("userquizes_history.org_id", $id)->groupby("userquizes_history.user_id")->get();
        
        $aptitudes = UserQuizesHistory::selectRaw("count(distinct userquizes_history.user_id) as test_members, count(userquizes_history.org_id) as test_count")
                                            ->join('books', 'userquizes_history.book_id', DB::raw('books.id and books.active <> 7'))
                                            ->where( function ($q) {
                                                $q->Where(function ($q1) {
                                                    $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 4);                    
                                                })->orWhere(function ($q1) {
                                                    $q1->where('userquizes_history.type', '=', 2)->where('userquizes_history.status', '=', 3);
                                                });
                                            }) 
                                            ->where("userquizes_history.examinemethod", 0)
                                            ->whereNotNull('userquizes_history.org_id')
                                            ->groupby("userquizes_history.org_id")
                                            ->orderBy('userquizes_history.org_id', 'desc')->get();
        /*================= 監督人数順位 ====================*/
        $userrank = 1;                                    
        foreach($aptitudes as $userhistory){
            if($userhistory->test_members > count($user_histories))
                $userrank++;
        }
        /*================= 監督回数順位 ====================*/

        $rank = 1;
        foreach ($aptitudes as $allhistory) {
            if($allhistory->test_count > count($histories))
                $rank++;
        }
        return view('mypage.personal.oversee.history_oversee')
            ->with('page_info', $this->page_info)
            ->with('histories', $histories)
            ->with('userrank', $userrank)
            ->with('user_histories', $user_histories)
            ->with('aptitudes', $aptitudes)
            ->with('otherview_flag', $otherview_flag)
            ->with('user', $user)
            ->with('rank', $rank);
    }
    public function acceptable_quiz_list(Request $request, $book_id){
        $book = Books::find($book_id);
        $this->page_info['subside'] = 'overseer_books';
        $view = view('mypage.overseer.acceptable_quiz_list')
            ->with('page_info', $this->page_info)
            ->withBook($book);

        return $view;
    }

    public function accept_quiz_list(Request $request){
        $book_id = $request->input("book_id");
        $book = Books::find($book_id);
        $this->page_info['subside'] = 'overseer_books';
        $title = "自作認定クイズ一覧";
        if(Auth::user()->isAdmin() || Auth::user()->isOverseerOfBook($book->id)){
            $quizes = $book->ActiveQuizes;
            $title = "クイズの認定審査リスト";
        }
        else if(Auth::user()->isQuizMaker($book->id)){
            $quizes = $book->ActiveQuizesForUser(Auth::user()->id);
            $quizes = $quizes->get();
        }
        else
            $quizes = "";
        
        $view = view('mypage.overseer.accept_quiz_list')
            ->with('page_info', $this->page_info)
            ->withBook($book)
            ->withTitle($title)
            ->withQuizes($quizes);

        return $view;
    }

    public function quiz_store(Request $request, $type, $book_id){
        $book = Books::find($book_id);
        $this->page_info['subside'] = 'overseer_books';
        
        $view = view('mypage.overseer.quiz_store')
            ->with('page_info', $this->page_info)
            ->withBook($book)->withBookid($book_id)->withType($type);

        return $view;
    }

    public function demandList(Request $request, $id=null) {
        $otherview_flag = false;
        if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        
        if($id != Auth::id()) 
            $otherview_flag = true;
        
        $books = Books::where('active', 3)->orderby('replied_date1', 'desc')->get();
        $book_id = $request->input("book_id");
        if(isset($book_id)){
            $sel_book = Books::where('id', $book_id)->first();
            $title = $sel_book->title;
            $demand = Demand::where('book_id', $book_id)->where('overseer_id', $id)->first();
            $demand_reason = '';
            if(isset($demand))
                $demand_reason = $demand->reason;

            $personbooksearchHistory = new PersonbooksearchHistory();
            if(Auth::check()){
                $personbooksearchHistory->user_id = Auth::id();
                $personbooksearchHistory->username = Auth::user()->username;
                $personbooksearchHistory->age = Auth::user()->age();
                $personbooksearchHistory->address1 = Auth::user()->address1;
                $personbooksearchHistory->address2 = Auth::user()->address2;
            }else
                $personbooksearchHistory->username = '非会員';
            
            $personbooksearchHistory->item = 0;
            if($request->has('work_test') && $request->input('work_test') != '' && $request->input('work_test') !== null)
                $personbooksearchHistory->work_test = $request->input('work_test');
            else
                $personbooksearchHistory->work_test = 8;
            if($personbooksearchHistory->work_test == 3){
                if($request->has('content') && $request->input('content') != '' && $request->input('content') !== null)
                    $personbooksearchHistory->jangru = $request->input('content');
            }
            else{
                if($request->has('content') && $request->input('content') != '' && $request->input('content') !== null)
                    $personbooksearchHistory->content = $request->input('content');
            }
        
            $personbooksearchHistory->book_id = $sel_book->id;
            $personbooksearchHistory->title = $sel_book->title;
            $personbooksearchHistory->writer = $sel_book->fullname_nick();
            $personbooksearchHistory->action = '監修者応募';
            
            $personbooksearchHistory->save();
        }
        
        //$books = $books->paginate(5);



        $view = view('mypage.overseer.demand')
            ->with('page_info', $this->page_info)
            ->withBooks($books)
            ->with('otherview_flag', $otherview_flag)
            ->with('user', $user);

        if(isset($book_id)){
            $view = $view->with('book_id', $book_id)
                        ->with('title', $title)
                        ->with('reason', $demand_reason);
        }
                
        return $view;
            
    }

    public function demand(Request $request) {
        $bookId = $request->input("bookId");
        $book  = Books::find($bookId);
        $demand = Demand::searchOne($bookId, Auth::id())->first();
        if($demand) {
            $demand->update();
        } else {
            $demand = Demand::create();
        }
        $demand->book_id = $bookId;
        $demand->overseer_id = Auth::id();
        $demand->reason = $request->input("reason");
        $demand->status = 0;
        $demand->save();
        //overseer
        $personoverseerHistory = new PersonoverseerHistory();
        $personoverseerHistory->user_id = Auth::id();
        $personoverseerHistory->username = Auth::user()->username;
        $personoverseerHistory->item = 0;
        $personoverseerHistory->work_test = 3;
        $personoverseerHistory->age = Auth::user()->age();
        $personoverseerHistory->book_id = $bookId;
        //$personoverseerHistory->quiz_id = $quiz->id;
        //if($book->register_id != 0 && $book->register_id !== null)
        //$personoverseerHistory->bookregister_name = User::find($book->register_id)->username;
        $personoverseerHistory->title = $book->title;
        $personoverseerHistory->writer = $book->fullname_nick();
        $personoverseerHistory->content = $demand->reason;
        //$personoverseerHistory->overseer_num = UserQuizesHistory::testOverseer(Auth::id())->get()->count();
        //$personoverseerHistory->overseer_real = UserQuizesHistory::testOverseers(Auth::id())->get()->count();
        $personoverseerHistory->save();

        return redirect('/mypage/top');
    }
    public function select_demand(Request $request) {
        $book_id = $request->input("book_id");
        $demand =  Demand::where('book_id', $book_id)->where('overseer_id', Auth::id())->first();
        if(isset($demand)) {
            $book_id = $demand->book_id;
            $reason = $demand->reason;
            $response = array(
                'status' => 'success',
                'book_id' => $book_id,
                'reason' => $reason,
            );
        }else{
            $response = array(
               'status' => 'no',
               'id' => $book_id,
            );
        }
        
       return response()->json($response);
       
    }

    public function viewFaceVerify(Request $request, $index) {
        $user = Auth::user();
        $oneYearDate = date_format(date_sub(now(), date_interval_create_from_date_string("1 years")), "Y-m-d");
        
        if(isset($user->image_path) && strlen($user->image_path) > 0 && file_exists(public_path().$user->image_path) && $user->imagepath_date > $oneYearDate) {
            return view('mypage.verify_face')
                ->withTitle('顔認証')
                ->with('userId',$user->id)
                ->with('user',$user)
                ->with('index',$index)
                ->with('page_info', $this->page_info)
                ->withNosidebar(true);
        } else {
            return view('mypage.signin')
                ->with('page_info', $this->page_info)
                ->with('index',$index)
                ->withNosidebar(true);
        }
    }
   
    public function signin(Request $request){
        $password = $request->input('password'); 
        $index = $request->input('index');
        $rule = array(
            'password' => 'required'
        );
        $message = array(
            'password.required' => config('consts')['MESSAGES']['PASSWORD_REQUIRED']
        );

        $validator = Validator::make($request->all(), $rule, $message);
        if($validator->fails()){
            return Redirect::back()->withErrors($validator)->withInput();
        }

        $user = User::where('r_password','=',$password)->count();
        if($user == 0) {
            $invalid_errors = "error";
            return Redirect::back()->withInput()->withErrors(array('invalid_pwd' => $invalid_errors));
        }

        return view('mypage.register_face')
            ->with('page_info', $this->page_info)
            ->with('index', $index)
            ->withPassword($password)
            ->withNosidebar(true);
    }

    public function signinTeacher(Request $request){
        $index = $request->input('index');
        if ($request->session()->has("errors")){
            $index = $request->session()->get("index");
        }
       
        return view('mypage.signin_teacher')
            ->with('page_info', $this->page_info)
            ->with('index', $index)
            ->withNosidebar(true);
    }

    public function passwordTeacherVerify(Request $request){
        $password = $request->input('password');
        $index = $request->input('index');
        if ($request->session()->has("errors")){
            $index = $request->session()->get("index");
        }
        $rule = array(
            'password' => 'required'
        );
        $message = array(
            'password.required' => config('consts')['MESSAGES']['PASSWORD_REQUIRED']
        );

        if (!$request->session()->has("errors")){
            $validator = Validator::make($request->all(), $rule, $message);
            if($validator->fails()) {
                return Redirect::to('/mypage/signin_teacher')
                            ->with('index', $index)
                           ->withErrors($validator);
            }
        }

        $pupilclass = Auth::user()->PupilsClass;
       
        $user = User::where('r_password','=',$password)->first();
        if(isset($user) && $user !== null) {
            if($pupilclass->teacher_id == $user->id){

                 return view('mypage.register_face')
                        ->with('page_info', $this->page_info)
                        ->with('index', $index)
                        ->withNosidebar(true);
            }
        }

        return Redirect::to('/mypage/signin_teacher')
                            ->with('page_info', $this->page_info)
                            ->with('index', $index)
                            ->withErrors(array('invalid_pwd' => 'true'));
    }

    public function pupil_history(Request $request){
        $this->page_info['side'] = 'mypage';
        $this->page_info['subside'] = 'pupil_history';
        $pupil_id = Auth::id();
        $pupilhistories = PupilHistory::GetPupilHistories($pupil_id);

        return view('mypage.personal.history.pupil_history')
            ->with('pupilhistories', $pupilhistories)
            ->with('page_info', $this->page_info);
    }

    public function ViewGroupRank($group_id, Request $request){
        /*$result = DB::table('users')
            ->where('id', Auth::id())
            ->update(array('reload_flag' => 8));*/
        $this->page_info['side'] = 'rank';
        $this->page_info['top'] = 'rank';
        $year = Date("Y");
        
            ///////////////school rank
            $school_avg_point['year'] = MypageController::Calc_school_avg($group_id, 'year');
            $school_avg_point['spring'] = MypageController::Calc_school_avg($group_id, 'spring');
            $school_avg_point['summer'] = MypageController::Calc_school_avg($group_id, 'summer');
            $school_avg_point['autumn'] = MypageController::Calc_school_avg($group_id, 'autumn');
            $school_avg_point['winter'] = MypageController::Calc_school_avg($group_id, 'winter');
            $school_avg_point['year-1'] = MypageController::Calc_school_avg($group_id, 'year-1');
            $school_avg_point['year-2'] = MypageController::Calc_school_avg($group_id, 'year-2');
            $school_avg_point['all'] = MypageController::Calc_school_avg($group_id, 'all');

            $school_rank_city['year'] = MypageController::School_rank($group_id, 'year', 'city');
            $school_rank_city['spring'] = MypageController::School_rank($group_id, 'spring', 'city');
            $school_rank_city['summer'] = MypageController::School_rank($group_id, 'summer', 'city');
            $school_rank_city['autumn'] = MypageController::School_rank($group_id, 'autumn', 'city');
            $school_rank_city['winter'] = MypageController::School_rank($group_id, 'winter', 'city');
            $school_rank_city['year-1'] = MypageController::School_rank($group_id, 'year-1', 'city');
            $school_rank_city['year-2'] = MypageController::School_rank($group_id, 'year-2', 'city');
            $school_rank_city['all'] = MypageController::School_rank($group_id, 'all', 'city');

            $school_rank_province['year'] = MypageController::School_rank($group_id, 'year', 'province');
            $school_rank_province['spring'] = MypageController::School_rank($group_id, 'spring', 'province');
            $school_rank_province['summer'] = MypageController::School_rank($group_id, 'summer', 'province');
            $school_rank_province['autumn'] = MypageController::School_rank($group_id, 'autumn', 'province');
            $school_rank_province['winter'] = MypageController::School_rank($group_id, 'winter', 'province');
            $school_rank_province['year-1'] = MypageController::School_rank($group_id, 'year-1', 'province');
            $school_rank_province['year-2'] = MypageController::School_rank($group_id, 'year-2', 'province');
            $school_rank_province['all'] = MypageController::School_rank($group_id, 'all', 'province');

            $school_rank_overall['year'] = MypageController::School_rank($group_id, 'year', 'overall');
            $school_rank_overall['spring'] = MypageController::School_rank($group_id, 'spring', 'overall');
            $school_rank_overall['summer'] = MypageController::School_rank($group_id, 'summer', 'overall');
            $school_rank_overall['autumn'] = MypageController::School_rank($group_id, 'autumn', 'overall');
            $school_rank_overall['winter'] = MypageController::School_rank($group_id, 'winter', 'overall');
            $school_rank_overall['year-1'] = MypageController::School_rank($group_id, 'year-1', 'overall');
            $school_rank_overall['year-2'] = MypageController::School_rank($group_id, 'year-2', 'overall');
            $school_rank_overall['all'] = MypageController::School_rank($group_id, 'all', 'overall');

           // $this->page_info['subside'] = 'country_rank';
           // $this->page_info['subtop'] = 'country_rank';
            return view('mypage.personal.top.school_rank')
                ->with('page_info', $this->page_info)
                ->with('school_avg_point', $school_avg_point)
                ->with('school_rank_city', $school_rank_city)
                ->with('school_rank_province', $school_rank_province)
                ->with('school_rank_overall', $school_rank_overall);

        
    }

    public function book_ranking(Request $request){
        $this->page_info['side'] = 'data_work';
        $this->page_info['subside'] = 'book_ranking';
        $rankperiod = $request->input('rankperiod');
        $rankyear = $request->input('rankyear');
        $current_season = MypageController::CurrentSeaon(now());
        $ranks = UserQuiz::selectRaw("users.id, users.firstname, users.lastname, users.username, users.birthday, users.address1, users.fullname_is_public, SUM(user_quizes.point) as cur_point")
             ->leftJoin('users','users.id','=','user_quizes.user_id')
             ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
            ->where( function ($q) {
                $q->Where(function ($q1) {
                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                })->orWhere(function ($q1) {
                    $q1->where('user_quizes.type', '=', 2)->where('user_quizes.status', '=', 3);
                });
            })
            ->groupby("user_quizes.user_id")
            ->orderby("cur_point", "desc");

        if(isset($rankperiod)){
            if($rankperiod == 1){
            }
            else if($rankperiod == 2){
                $ranks = $ranks->whereBetween("user_quizes.created_date", array(Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0), Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)));
            }
            else if($rankperiod == 3){
                $ranks = $ranks->whereBetween("user_quizes.created_date", array(Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0), Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)));
            }
            
        }
        if(isset($rankyear)){
            $today = now();
            if($rankyear == 1){
                if($today <= Carbon::create((Date("Y")), 3, 31,23,59,59))
                    $ranks = $ranks->whereBetween("users.birthday", array(date_format(Carbon::createFromDate((Date("Y")-20), 4, 1), "Y-m-d"),date_format(Carbon::createFromDate((Date("Y")-10), 3, 31), "Y-m-d")));
                else
                    $ranks = $ranks->whereBetween("users.birthday", array(date_format(Carbon::createFromDate((Date("Y")-19), 4, 1), "Y-m-d"),date_format(Carbon::createFromDate((Date("Y")-9), 3, 31), "Y-m-d")));
            }
            else if($rankyear == 2){
                if($today <= Carbon::create((Date("Y")), 3, 31,23,59,59))
                    $ranks = $ranks->whereBetween("users.birthday", array(date_format(Carbon::createFromDate((Date("Y")-29), 4, 1), "Y-m-d"), date_format(Carbon::createFromDate((Date("Y")-20), 3, 31), "Y-m-d")));
                else
                    $ranks = $ranks->whereBetween("users.birthday", array(date_format(Carbon::createFromDate((Date("Y")-29), 4, 1), "Y-m-d"), date_format(Carbon::createFromDate((Date("Y")-19), 3, 31), "Y-m-d")));
            }
            else if($rankyear == 3){
                $ranks = $ranks->whereBetween("users.birthday", array(date_format(Carbon::createFromDate((Date("Y")-39), 4, 1), "Y-m-d"), date_format(Carbon::createFromDate((Date("Y")-30), 4, 31), "Y-m-d")));
            }
            else if($rankyear == 4){
                $ranks = $ranks->whereBetween("users.birthday", array(date_format(Carbon::createFromDate((Date("Y")-49), 1, 1), "Y-m-d"), date_format(Carbon::createFromDate((Date("Y")-40), 12, 31), "Y-m-d")));
            }
            else if($rankyear == 5){
                $ranks = $ranks->whereBetween("users.birthday", array(date_format(Carbon::createFromDate((Date("Y")-59), 1, 1), "Y-m-d"), date_format(Carbon::createFromDate((Date("Y")-50), 12, 31), "Y-m-d")));
            }
            else if($rankyear == 6){
                $ranks = $ranks->whereBetween("users.birthday", array(date_format(Carbon::createFromDate((Date("Y")-69), 1, 1), "Y-m-d"), date_format(Carbon::createFromDate((Date("Y")-60), 12, 31), "Y-m-d")));
            }
            else if($rankyear == 7){
                $ranks = $ranks->whereBetween("users.birthday", array(date_format(Carbon::createFromDate((Date("Y")-79), 1, 1), "Y-m-d"), date_format(Carbon::createFromDate((Date("Y")-70), 12, 31), "Y-m-d")));
            }
            else if($rankyear == 8){
                $ranks = $ranks->where("users.birthday", '<=', date_format(Carbon::createFromDate((Date("Y")-80), 12, 31), "Y-m-d"));
               
            }
            
        }
        $ranks = $ranks->take(100)->get(); 
        $view =  view('admin.book_ranking')
            ->with('page_info', $this->page_info)
            ->with('rankperiod', $rankperiod)
            ->with('rankyear', $rankyear)
            ->withRanks($ranks);
        if(!Auth::user() || (Auth::user() && !Auth::user()->isAdmin())) $view = $view->withNosidebar(true);
        return $view;

    }

    static function reportbackup($id = null){
       if(!isset($id) || $id == null) {
            $id = Auth::id();
        }
        $user = User::find($id);
        $month5_date = date_sub(now(), date_interval_create_from_date_string(3*6 . " months"));
        if($user->isPupil() && $user->active == 1)
            $month5_season = MypageController::CurrentSeaon1_Pupil($month5_date);
        else
            $month5_season = MypageController::CurrentSeaon1($month5_date);
         DB::table("report_backup")
            ->select('report_backup.*')
            ->where('user_id',$id)
            ->whereBetween('backup_date',  array(date_format($month5_season['begin_season'], 'Y-m-d'),date_format($month5_season['end_season'], 'Y-m-d')))
            ->delete();
         DB::table("reportgraph_backup")
            ->select('reportgraph_backup.*')
            ->where('user_id',$id)
            ->whereBetween('backup_date',  array(date_format($month5_season['begin_season'], 'Y-m-d'),date_format($month5_season['end_season'], 'Y-m-d')))
            ->delete();
        
        $array_season = [];

        for($ii_month=0;$ii_month<5;$ii_month++){
            $last5_date = date_sub(now(), date_interval_create_from_date_string(3*($ii_month+1) . " months"));
            $before_date = date_sub(now(), date_interval_create_from_date_string(3*($ii_month+2) . " months"));
            if($user->isPupil() && $user->active == 1){
                $current_season = MypageController::CurrentSeaon1_Pupil($last5_date);
                $before_season = MypageController::CurrentSeaon1_Pupil($before_date);
            }else{
                $current_season = MypageController::CurrentSeaon1($last5_date);
                $before_season = MypageController::CurrentSeaon1($before_date);
            }
            
            $reportbackup = ReportBackup::where('user_id',$id)
                         ->whereBetween('backup_date',  array(date_format($current_season['begin_season'], 'Y-m-d'),date_format($current_season['end_season'], 'Y-m-d')))->first();
            
            if(!isset($reportbackup) || $reportbackup === null || count(get_object_vars($reportbackup)) == 0){
                          
                $current_user = UserQuiz::SumPoint1($current_season['term'],$current_season, $user->role)->where('u.id', $id)->first();
                
                $role = $user->role;
                $mode = $ii_month;

                $myrankPoints1 = [];
                $myrankPoints2 = [];
                $myrankPoints3 = [];
                $myrankPoints4 = [];
                $myrankPoints5 = [];
                $threemonthrankPoints1 = [];
                $threemonthrankPoints2 = [];
                $threemonthrankPoints3 = [];
                $threemonthrankPoints4 = [];
                $threemonthrankPoints5 = [];
                $allrankPoints1 = [];
                $allrankPoints2 = [];
                $allrankPoints3 = [];
                $allrankPoints4 = [];
                $allrankPoints5 = [];

                $today = now();
                $rankingage = 1;
                $curage = $user->age();
                if($user->isPupil() && $user->active == 1){
                    $groupbyuser = $user->ClassOfPupil->School()->first();
                    if($groupbyuser != null){
                        if($groupbyuser->group_type == 0)
                            $rankingage = 1; //小学生
                        elseif($groupbyuser->group_type == 1)
                            $rankingage = 2; //中学生
                        elseif($groupbyuser->group_type == 2 || $groupbyuser->group_type == 3)
                            $rankingage = 3; //高校生
                        else
                            $rankingage = 4; //大学生
                    }
                }else{
                    
                    if($curage <= 11){
                        $rankingage = 1;
                    }
                    elseif($curage > 11 && $curage <= 14){
                        $rankingage = 2;
                    }
                    else{
                        $rankingage = floor($curage / 10);
                        $rankingage = $rankingage + 4; 
                    }
                }
                $search_birthday = []; 
                $search_birthday = MypageController::search_birthday($rankingage); 

                 
                $type = 1;$tagrgetpoint = 1;
                if($user->isPupil() && $user->active == 1){ //学生
                    
                    $class = DB::table("users")
                    ->select('org.group_type', 'classes.grade')
                    ->join('classes','classes.id','=','users.org_id')
                    ->join('users as org', 'classes.group_id',DB::raw('org.id'))
                    ->where('users.role','=', config('consts')['USER']['ROLE']["PUPIL"]) 
                    ->where('users.id','=',$id)
                    ->first();

                    if($class != null){
                        $type = $class->group_type;
                        $grade = $class->grade;

                        if($type ==0){  //小学生
                            if($grade == 1) $tagrgetpoint = 7;
                            elseif($grade == 2) $tagrgetpoint = 13;
                            elseif($grade == 3) $tagrgetpoint = 20;
                            elseif($grade == 4) $tagrgetpoint = 35;   
                            elseif($grade == 5) $tagrgetpoint = 50;
                            elseif($grade == 6) $tagrgetpoint = 70;
                            else $tagrgetpoint = 7; 
                        }
                    } 

                    $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
                            
                    $sql_average_end="'group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ".
                            "users.org_id in ".
                                "(select classes.id
                                from classes  inner join
                                    (select users.id,table2.*
                                     from users,
                                        (select users.address1,users.address2,users.group_type,table1.*
                                            from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                    where classes.id=(select users.org_id from users where users.id='".
                                                                        $id."')) as table1
                                            where users.id=table1.group_id) as table2
                                     where  users.group_type=table2.group_type and ".
                                     "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                            ") as table1";
                      
                    for ($k = 1; $k < 5; $k++) {
                        $date1 = date_sub(now(), date_interval_create_from_date_string(($k+$mode+1) * 3 . " months"));
                        $cur_season[4-$k] = MypageController::CurrentSeaon1_Pupil($date1); 
                        $sql_term1[4-$k]=$sql_average_front."created_date between '".$cur_season[4-$k]['begin_season']."' and '". $cur_season[4-$k]['end_season'].$sql_average_end;
                    }
                   
                    for($i=0;$i<4;$i++){
                       $sum=0; 
                       $schoolpercent = 0;
                       $myavgPoints[$i][1] = 0;
                       $temp_avg=MypageController::Get_AvgPoint1($sql_term1[$i]);
                       if(sizeof($temp_avg) > 0){
            
                            foreach ($temp_avg as $ii => $avg) {
                                $sum = $sum+($avg->sum);
                                if($avg->flag=='1'){
                                    $mypercent  = floor($avg->sum * 100 / $tagrgetpoint * 100) / 100;
                                    $myavgPoints[$i][1] = $mypercent;                        
                                }
                            }
                            $schoolpercent = floor($sum/sizeof($temp_avg) * 100 / $tagrgetpoint * 100) / 100;
                        }
                        $myavgPoints[$i][0] = $schoolpercent;

                    }
               
                        $sql[1]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                            "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ".
                            "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
                        $myrankPoints1 = MypageController::Get_RankPoint1($sql[1]);

                        $threemonthsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                            "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ".
                            "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
                        $threemonthrankPoints1 = MypageController::Get_RankPoint1($threemonthsql[1]);

                        $allpointsql[1] = "(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                        from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                            "created_date <= '". $current_season['end_season'].
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ".
                            "users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";
                        $allrankPoints1 = MypageController::Get_RankPoint1($allpointsql[1]);

                        $sql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                            "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                            "'group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ".
                            "users.org_id in (select classes.id as org_id
                                    from classes
                                    inner join
                                    (select classes.year,classes.grade,classes.group_id
                                    from classes
                                    where classes.id=(select users.org_id
                                    from users
                                    where users.id='".
                                    $id."')) as table2
                                    on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                        $myrankPoints2 = MypageController::Get_RankPoint1($sql[2]);

                        $threemonthsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                            "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                            "'group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ".
                            "users.org_id in (select classes.id as org_id
                                    from classes
                                    inner join
                                    (select classes.year,classes.grade,classes.group_id
                                    from classes
                                    where classes.id=(select users.org_id
                                    from users
                                    where users.id='".
                                    $id."')) as table2
                                    on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                        $threemonthrankPoints2 = MypageController::Get_RankPoint1($threemonthsql[2]);

                        $allpointsql[2]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                            "created_date <= '". $current_season['end_season'].
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ".
                            "users.org_id in (select classes.id as org_id
                                    from classes
                                    inner join
                                    (select classes.year,classes.grade,classes.group_id
                                    from classes
                                    where classes.id=(select users.org_id
                                    from users
                                    where users.id='".
                                    $id."')) as table2
                                    on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                        $allrankPoints2 = MypageController::Get_RankPoint1($allpointsql[2]);

                        $grade = $user->ClassOfPupil->grade;
                        $grade_odds = $grade % 2;
                       
                        //if($grade == 0){ //学年 0
                            $sql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                                from users left join 
                                (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                                "'group by user_id) as table1
                                on users.id=table1.user_id
                                where  ".
                                "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                                "users.org_id in ".
                                    "(select classes.id
                                    from classes  inner join
                                        (select users.id,table2.*
                                         from users,
                                            (select users.address1,users.address2,users.group_type,table1.*
                                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                        where classes.id=(select users.org_id from users where users.id='".
                                                                            $id."')) as table1
                                                where users.id=table1.group_id) as table2
                                         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                                ") as table1";
                            $threemonthsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                                from users left join 
                                (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                                "'group by user_id) as table1
                                on users.id=table1.user_id
                                where  ".
                                "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                                "users.org_id in ".
                                    "(select classes.id
                                    from classes  inner join
                                        (select users.id,table2.*
                                         from users,
                                            (select users.address1,users.address2,users.group_type,table1.*
                                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                        where classes.id=(select users.org_id from users where users.id='".
                                                                            $id."')) as table1
                                                where users.id=table1.group_id) as table2
                                         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                                ") as table1";
                            $allpointsql[3]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                                from users left join 
                                (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                                "created_date <= '". $current_season['end_season'].
                                "' group by user_id) as table1
                                on users.id=table1.user_id
                                where  ".
                                "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".
                                "users.org_id in ".
                                    "(select classes.id
                                    from classes  inner join
                                        (select users.id,table2.*
                                         from users,
                                            (select users.address1,users.address2,users.group_type,table1.*
                                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                        where classes.id=(select users.org_id from users where users.id='".
                                                                            $id."')) as table1
                                                where users.id=table1.group_id) as table2
                                         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                                ") as table1";
                        
                        $myrankPoints3 = MypageController::Get_RankPoint1($sql[3]);
                        $threemonthrankPoints3 = MypageController::Get_RankPoint1($threemonthsql[3]);
                        $allrankPoints3 = MypageController::Get_RankPoint1($allpointsql[3]);
                        
                        //if($grade == 0){ //学年 0       
                            $sql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                            "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                            "'group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                            "users.org_id in ".
                                "(select classes.id
                                from classes  inner join
                                    (select users.id,table2.*
                                     from users,
                                        (select users.address1,users.address2,users.group_type,table1.*
                                            from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                    where classes.id=(select users.org_id from users where users.id='".
                                                                        $id."')) as table1
                                            where users.id=table1.group_id) as table2
                                     where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                                     "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                            ") as table1";
                            $threemonthsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                            "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                            "'group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                            "users.org_id in ".
                                "(select classes.id
                                from classes  inner join
                                    (select users.id,table2.*
                                     from users,
                                        (select users.address1,users.address2,users.group_type,table1.*
                                            from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                    where classes.id=(select users.org_id from users where users.id='".
                                                                        $id."')) as table1
                                            where users.id=table1.group_id) as table2
                                     where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                                     "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                            ") as table1";
                            $allpointsql[4]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                            "created_date <= '". $current_season['end_season'].
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and users.address1= '".$user->address1."' and ".
                            "users.org_id in ".
                                "(select classes.id
                                from classes  inner join
                                    (select users.id,table2.*
                                     from users,
                                        (select users.address1,users.address2,users.group_type,table1.*
                                            from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                    where classes.id=(select users.org_id from users where users.id='".
                                                                        $id."')) as table1
                                            where users.id=table1.group_id) as table2
                                     where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                                     "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                            ") as table1";
                        
                        $myrankPoints4 = MypageController::Get_RankPoint1($sql[4]);
                        $threemonthrankPoints4 = MypageController::Get_RankPoint1($threemonthsql[4]);
                        $allrankPoints4 = MypageController::Get_RankPoint1($allpointsql[4]);

                        //if($grade == 0){ //学年 0  
                            $sql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                                from users left join 
                                (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                                "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                                "'group by user_id) as table1
                                on users.id=table1.user_id
                                where  ".
                                "users.role=".$role." and users.active=1 and ".
                                "users.org_id in ".
                                    "(select classes.id
                                    from classes  inner join
                                        (select users.id,table2.*
                                         from users,
                                            (select users.address1,users.address2,users.group_type,table1.*
                                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                        where classes.id=(select users.org_id from users where users.id='".
                                                                            $id."')) as table1
                                                where users.id=table1.group_id) as table2
                                         where  users.group_type=table2.group_type and ".
                                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                                ") as table1";
                            $threemonthsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                                from users left join 
                                (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                                "created_date between '".$current_season['begin_season']."' and '".$current_season['end_season'].
                                "'group by user_id) as table1
                                on users.id=table1.user_id
                                where  ".
                                "users.role=".$role." and users.active=1 and ".
                                "users.org_id in ".
                                    "(select classes.id
                                    from classes  inner join
                                        (select users.id,table2.*
                                         from users,
                                            (select users.address1,users.address2,users.group_type,table1.*
                                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                        where classes.id=(select users.org_id from users where users.id='".
                                                                            $id."')) as table1
                                                where users.id=table1.group_id) as table2
                                         where  users.group_type=table2.group_type and ".
                                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                                ") as table1";
                            $allpointsql[5]="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                                from users left join 
                                (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ".
                                "created_date <= '". $current_season['end_season'].
                                "' group by user_id) as table1
                                on users.id=table1.user_id
                                where  ".
                                "users.role=".$role." and users.active=1 and ".
                                "users.org_id in ".
                                    "(select classes.id
                                    from classes  inner join
                                        (select users.id,table2.*
                                         from users,
                                            (select users.address1,users.address2,users.group_type,table1.*
                                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                        where classes.id=(select users.org_id from users where users.id='".
                                                                            $id."')) as table1
                                                where users.id=table1.group_id) as table2
                                         where  users.group_type=table2.group_type and ".
                                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year and class_number is not NULL)".
                                ") as table1";
                        
                        $myrankPoints5 = MypageController::Get_RankPoint1($sql[5]);
                        $threemonthrankPoints5 = MypageController::Get_RankPoint1($threemonthsql[5]);
                        $allrankPoints5 = MypageController::Get_RankPoint1($allpointsql[5]);

                        $mybookPoints1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where('user_quizes.type','=',2)
                            ->where('user_quizes.status','=',3)
                            ->where('created_date','>=',$current_season['begin_season'])
                            ->where('created_date','<=',$current_season['end_season'])
                            ->where('user_quizes.user_id','=',$id)
                            ->get();
                             
                       $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where (user_quizes.type = 2 and user_quizes.status = 3) and ".
                            "created_date between '".$current_season['begin_season']."' and '". $current_season['end_season'].
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ";
                        $sql[1]="users.org_id=(select org_id from users where users.id='".$id."')) as table1 ";

                        $sql[2]="users.org_id in (select classes.id as org_id
                                    from classes
                                    inner join
                                    (select classes.year,classes.grade,classes.group_id
                                    from classes
                                    where classes.id=(select users.org_id
                                    from users
                                    where users.id='".
                                    $id."')) as table2
                                    on (classes.year=table2.year and classes.grade=table2.grade and classes.group_id=table2.group_id))) as table1";
                        $sql[3]=  "users.org_id in ".
                                    "(select classes.id
                                    from classes  inner join
                                        (select users.id,table2.*
                                         from users,
                                            (select users.address1,users.address2,users.group_type,table1.*
                                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                        where classes.id=(select users.org_id from users where users.id='".
                                                                            $id."')) as table1
                                                where users.id=table1.group_id) as table2
                                         where users.address1=table2.address1 and users.address2=table2.address2 and users.group_type=table2.group_type and ".
                                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                        on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                                    ") as table1";
                           
                        $sql[4]=  "users.org_id in ".
                                    "(select classes.id
                                    from classes  inner join
                                        (select users.id,table2.*
                                         from users,
                                            (select users.address1,users.address2,users.group_type,table1.*
                                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                        where classes.id=(select users.org_id from users where users.id='".
                                                                            $id."')) as table1
                                                where users.id=table1.group_id) as table2
                                         where users.address1=table2.address1 and users.group_type=table2.group_type and ".
                                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                                ") as table1";
                        
                        $sql[5]= "users.org_id in ".
                                    "(select classes.id
                                    from classes  inner join
                                        (select users.id,table2.*
                                         from users,
                                            (select users.address1,users.address2,users.group_type,table1.*
                                                from users,(select classes.year,classes.grade,classes.group_id from classes 
                                                                        where classes.id=(select users.org_id from users where users.id='".
                                                                           $id."')) as table1
                                                where users.id=table1.group_id) as table2
                                         where  users.group_type=table2.group_type and ".
                                         "users.role=".config('consts')['USER']['ROLE']['GROUP']." and users.active='1') as table3
                                    on classes.group_id=table3.id and classes.grade=table3.grade and classes.year=table3.year)".
                                ") as table1";

                    
                        $mybookPoints2 = MypageController::Get_RankPoint($sql_temp." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
                        $mybookPoints3 = MypageController::Get_RankPoint($sql_temp." users.address1= '".$user->address1."' and ".$sql[4]);
                        $mybookPoints4 =  MypageController::Get_RankPoint($sql_temp.$sql[5]);
                            
                        $myquizPoints1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where( function ($q) {
                                $q->Where(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                                })->orWhere(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                                });
                            })
                            ->where('created_date','>=',$current_season['begin_season'])
                            ->where('created_date','<=',$current_season['end_season'])
                            ->where('user_quizes.user_id','=',$id)
                            ->get();
                         
                        $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                            "created_date between '".$current_season['begin_season']."' and '". $current_season['end_season'].
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ";

                        
                        $myquizPoints2 = MypageController::Get_RankPoint1($sql_temp." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
                        $myquizPoints3 = MypageController::Get_RankPoint1($sql_temp." users.address1= '".$user->address1."' and ".$sql[4]);
                        $myquizPoints4 = MypageController::Get_RankPoint1($sql_temp.$sql[5]);

                        $myquizPoints_before1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where( function ($q) {
                                $q->Where(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                                })->orWhere(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                                });
                            })
                            ->where('created_date','>=',$before_season['begin_season'])
                            ->where('created_date','<=',$before_season['end_season'])
                            ->where('user_quizes.user_id','=',$id)
                            ->get();

                        $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                            "created_date between '".$before_season['begin_season']."' and '". $before_season['end_season'].
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ";

                        $myquizPoints_before2 = MypageController::Get_RankPoint1($sql_temp1." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
                        $myquizPoints_before3 = MypageController::Get_RankPoint1($sql_temp1." users.address1= '".$user->address1."' and ".$sql[4]);
                        $myquizPoints_before4 = MypageController::Get_RankPoint1($sql_temp1.$sql[5]);

                        $myquizPoints_this1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where( function ($q) {
                                $q->Where(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                                })->orWhere(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                                });
                            })
                            ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                            ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                            ->where('user_quizes.user_id','=',$id)
                            ->get();
                       
                        $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                            "created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59).
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ";

                        $myquizPoints_this2 = MypageController::Get_RankPoint1($sql_temp2." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
                        $myquizPoints_this3 = MypageController::Get_RankPoint1($sql_temp2." users.address1= '".$user->address1."' and ".$sql[4]);
                        $myquizPoints_this4 = MypageController::Get_RankPoint1($sql_temp2.$sql[5]);

                        $myquizPoints_last1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where( function ($q) {
                                $q->Where(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                                })->orWhere(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                                });
                            })
                            ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                            ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                            ->where('user_quizes.user_id','=',$id)
                            ->get();
                       
                        $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) and ".
                            "created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59).
                            "' group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ";

                        $myquizPoints_last2 = MypageController::Get_RankPoint1($sql_temp3." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
                        $myquizPoints_last3 = MypageController::Get_RankPoint1($sql_temp3." users.address1= '".$user->address1."' and ".$sql[4]);
                        $myquizPoints_last4 = MypageController::Get_RankPoint1($sql_temp3.$sql[5]);

                        $myquizPoints_all1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where( function ($q) {
                                $q->Where(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                                })->orWhere(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                                });
                            })
                            ->where('user_quizes.user_id','=',$id)
                            ->get()
                            ->take(10);
                       
                        $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag 
                            from users left join 
                            (select user_id, SUM(user_quizes.point) AS sum 
                            from user_quizes 
                            inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                            where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1)) ".
                            " group by user_id) as table1
                            on users.id=table1.user_id
                            where  ".
                            "users.role=".$role." and users.active=1 and ";

                        $myquizPoints_all2 = MypageController::Get_RankPoint1($sql_temp4." users.address1= '".$user->address1."' and users.address2= '".$user->address2."' and ".$sql[3]);
                        $myquizPoints_all3 = MypageController::Get_RankPoint1($sql_temp4." users.address1= '".$user->address1."' and ".$sql[4]);
                        $myquizPoints_all4 = MypageController::Get_RankPoint1($sql_temp4.$sql[5]);
                }
                else{

                    $sql_average_front="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                    left join (select user_id, SUM(user_quizes.point) AS sum 
                        from user_quizes 
                        inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                        where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and ";
                    $sql_average_end="' group by user_id) as table1 on users.id=table1.user_id where users.id='".$id."' or ( users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1))) order by flag desc) as table1"; 

                    for ($k = 1; $k < 9; $k++) {
                        $date1 = date_sub(now(), date_interval_create_from_date_string(($k+$mode+1) * 3 . " months"));
                        $cur_season[8-$k] = MypageController::CurrentSeaon1($date1);
                        $sql_term1[8-$k]=$sql_average_front."created_date between '".$cur_season[8-$k]['begin_season']."' and '". $cur_season[8-$k]['end_season'].$sql_average_end;               
                    
                    }
                   
                    for($i=0;$i<8;$i++){
                       $sum=0; 
                       $myavgPoints[$i][0] = 0;
                       $myavgPoints[$i][1] = 0;
                       $temp_avg=MypageController::Get_AvgPoint1($sql_term1[$i]);
                        if(sizeof($temp_avg) > 0){
                            foreach ($temp_avg as $ii => $avg) {
                                $sum = $sum+($avg->sum);
                                if($avg->flag=='1'){
                                    $myavgPoints[$i][1]=$avg->sum;                        
                                }
                            }

                            $myavgPoints[$i][0]=$sum/sizeof($temp_avg);
                        }
                    }

                    $sql[1]="(select 0 as id,0 as sum,0 as flag) as table1";
                    $sql[2]="(select 0 as id,0 as sum,0 as flag) as table1";

                    $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                        and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".$id."' or (";
                    $threesql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) 
                                        and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".$id."' or (";
                    $allsql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                            left join (select user_id, SUM(user_quizes.point) AS sum 
                                from user_quizes 
                                inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1) or (user_quizes.type = 2 and user_quizes.status = 3)) and created_date <= '". $current_season['end_season']."' group by user_id) as table1 
                                on users.id=table1.user_id where users.id='".$id."' or (";                
                               
                    $sql[3]=$sql_temp." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".$id."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    $threemonth_sql[3]= $threesql_temp." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".$id."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    $all_sql[3]= $allsql_temp." users.id in (select users.id from users,
                                    (select users.address1,users.address2
                                    from users
                                    where users.id='".$id."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
                    $sql[4]=$sql_temp." users.id in (select users.id from users,
                                    (select users.address1
                                    from users
                                    where users.id='".$id."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    $threemonth_sql[4]= $threesql_temp." users.id in (select users.id from users,
                                    (select users.address1
                                    from users
                                    where users.id='".$id."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    $all_sql[4]= $allsql_temp." users.id in (select users.id from users,
                                    (select users.address1
                                    from users
                                    where users.id='".$id."') as table1
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                  
                    $sql[5]=$sql_temp." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    $threemonth_sql[5]= $threesql_temp." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    $all_sql[5]= $allsql_temp." users.id in (select users.id from users
                                    where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                                   
                    $myrankPoints3 = MypageController::Get_RankPoint1($sql[3]);
                    $myrankPoints4 = MypageController::Get_RankPoint1($sql[4]);
                    $myrankPoints5 = MypageController::Get_RankPoint1($sql[5]);   
                    $threemonthrankPoints3 = MypageController::Get_RankPoint1($threemonth_sql[3]);
                    $threemonthrankPoints4 = MypageController::Get_RankPoint1($threemonth_sql[4]);
                    $threemonthrankPoints5 = MypageController::Get_RankPoint1($threemonth_sql[5]); 
                    $allrankPoints3 = MypageController::Get_RankPoint1($all_sql[3]);
                    $allrankPoints4 = MypageController::Get_RankPoint1($all_sql[4]);
                    $allrankPoints5 = MypageController::Get_RankPoint1($all_sql[5]); 
    
                    $mybookPoints1 = DB::table('user_quizes')
                        ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                        ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                        ->where('user_quizes.type','=',2)
                        ->where('user_quizes.status','=',3)
                        ->where('created_date','>',$current_season['begin_season'])
                        ->where('created_date','<',$current_season['end_season'])
                        ->where('user_quizes.user_id','=',$id)
                        ->get()
                        ->take(10);
            
                    $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                                left join (select user_id, SUM(user_quizes.point) AS sum 
                                    from user_quizes 
                                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                    where (user_quizes.type = 2 and user_quizes.status = 3)
                                            and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                                    on users.id=table1.user_id where users.id='".$id."' or (";

                    
                    $sql[2]=$sql_temp." users.id in (select users.id from users,
                                        (select users.address1,users.address2
                                        from users
                                        where users.id='".$id."') as table1
                                        where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                            
                    $sql[3]=$sql_temp." users.id in (select users.id from users,
                                        (select users.address1,users.address2
                                        from users
                                        where users.id='".$id."') as table1
                                        where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
                    $sql[4]=$sql_temp." users.id in (select users.id from users
                                        where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
                    $mybookPoints2 = MypageController::Get_RankPoint1($sql[2]);
                    $mybookPoints3 = MypageController::Get_RankPoint1($sql[3]);
                    $mybookPoints4 = MypageController::Get_RankPoint1($sql[4]);
                        
                    $myquizPoints1 = DB::table('user_quizes')
                        ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                        ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                        ->where( function ($q) {
                            $q->Where(function ($q1) {
                                $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                            })->orWhere(function ($q1) {
                                $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                            });
                        })
                        ->where('created_date','>=',$current_season['begin_season'])
                        ->where('created_date','<=',$current_season['end_season'])
                        ->where('user_quizes.user_id','=',$id)
                        ->get();
                     
                    $sql_temp="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                                left join (select user_id, SUM(user_quizes.point) AS sum 
                                    from user_quizes 
                                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1))
                                            and created_date between '".$current_season['begin_season']."' and '". $current_season['end_season']."' group by user_id) as table1 
                                    on users.id=table1.user_id where users.id='".$id."' or (";

                    $sql[2]= "  users.id in (select users.id from users,
                                        (select users.address1,users.address2
                                        from users
                                        where users.id='".$id."') as table1
                                        where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.address2=table1.address2 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                            
                    $sql[3]= "  users.id in (select users.id from users,
                                        (select users.address1,users.address2
                                        from users
                                        where users.id='".$id."') as table1
                                        where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.address1=table1.address1 and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
                    $sql[4]= "  users.id in (select users.id from users
                                        where users.birthday between '".$search_birthday['start_day']."' and '".$search_birthday['end_day']."' and users.role!='".config('consts')['USER']['ROLE']['GROUP']."' and users.role not in (4,5,6,7) and (users.active >= 1)))) as table1";
                    
                    $myquizPoints2 = MypageController::Get_RankPoint1($sql_temp.$sql[2]);
                    $myquizPoints3 = MypageController::Get_RankPoint1($sql_temp.$sql[3]);
                    $myquizPoints4 = MypageController::Get_RankPoint1($sql_temp.$sql[4]);

                    $myquizPoints_before1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where( function ($q) {
                                $q->Where(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                                })->orWhere(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                                });
                            })
                            ->where('created_date','>=',$before_season['begin_season'])
                            ->where('created_date','<=',$before_season['end_season'])
                            ->where('user_quizes.user_id','=',$id)
                            ->get();

                    $sql_temp1="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                                left join (select user_id, SUM(user_quizes.point) AS sum 
                                    from user_quizes 
                                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1))
                                            and created_date between '".$before_season['begin_season']."' and '". $before_season['end_season']."' group by user_id) as table1 
                                    on users.id=table1.user_id where users.id='".$id."' or (";

                        $myquizPoints_before2 = MypageController::Get_RankPoint1($sql_temp1.$sql[2]);
                        $myquizPoints_before3 = MypageController::Get_RankPoint1($sql_temp1.$sql[3]);
                        $myquizPoints_before4 = MypageController::Get_RankPoint1($sql_temp1.$sql[4]);

                        $myquizPoints_this1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where( function ($q) {
                                $q->Where(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                                })->orWhere(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                                });
                            })
                            ->where('created_date','>=',Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0))
                            ->where('created_date','<=',Carbon::create($current_season['end_thisyear'],3, 31,23,59,59))
                            ->where('user_quizes.user_id','=',$id)
                            ->get();
                       
                        $sql_temp2="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                                left join (select user_id, SUM(user_quizes.point) AS sum 
                                    from user_quizes 
                                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1))
                                            and created_date between '".Carbon::create($current_season['begin_thisyear'],4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear'],3, 31,23,59,59)."' group by user_id) as table1 
                                    on users.id=table1.user_id where users.id='".$id."' or (";

                        $myquizPoints_this2 = MypageController::Get_RankPoint1($sql_temp2.$sql[2]);
                        $myquizPoints_this3 = MypageController::Get_RankPoint1($sql_temp2.$sql[3]);
                        $myquizPoints_this4 = MypageController::Get_RankPoint1($sql_temp2.$sql[4]);

                        $myquizPoints_last1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where( function ($q) {
                                $q->Where(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                                })->orWhere(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                                });
                            })
                            ->where('created_date','>=',Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0))
                            ->where('created_date','<=',Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59))
                            ->where('user_quizes.user_id','=',$id)
                            ->get();
                       
                        $sql_temp3="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                                left join (select user_id, SUM(user_quizes.point) AS sum 
                                    from user_quizes 
                                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1))
                                            and created_date between '".Carbon::create($current_season['begin_thisyear']-1,4, 1,0,0,0)."' and '". Carbon::create($current_season['end_thisyear']-1,3, 31,23,59,59)."' group by user_id) as table1 
                                    on users.id=table1.user_id where users.id='".$id."' or (";

                        $myquizPoints_last2 = MypageController::Get_RankPoint1($sql_temp3.$sql[2]);
                        $myquizPoints_last3 = MypageController::Get_RankPoint1($sql_temp3.$sql[3]);
                        $myquizPoints_last4 = MypageController::Get_RankPoint1($sql_temp3.$sql[4]);

                        $myquizPoints_all1 = DB::table('user_quizes')
                            ->select('user_id',DB::raw('SUM(user_quizes.point) AS sum'))
                            ->join('books', 'user_quizes.book_id', DB::raw('books.id and books.active <> 7'))
                            ->where( function ($q) {
                                $q->Where(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 0)->where('user_quizes.status', '=', 1);                    
                                })->orWhere(function ($q1) {
                                    $q1->where('user_quizes.type', '=', 1)->where('user_quizes.status', '=', 1);
                                });
                            })
                            ->where('user_quizes.user_id','=',$id)
                            ->get()
                            ->take(10);
                       
                        $sql_temp4="(select users.id,IFNULL(table1.sum,0) as sum,If(id='".$id."',1,0) as flag from users 
                                left join (select user_id, SUM(user_quizes.point) AS sum 
                                    from user_quizes 
                                    inner join `books` on `user_quizes`.`book_id` = books.id and books.active <> 7  
                                    where ((user_quizes.type = 0 and user_quizes.status = 1) or (user_quizes.type = 1 and user_quizes.status = 1))
                                             group by user_id) as table1 
                                    on users.id=table1.user_id where users.id='".$id."' or ( ";

                        $myquizPoints_all2 = MypageController::Get_RankPoint1($sql_temp4.$sql[2]);
                        $myquizPoints_all3 = MypageController::Get_RankPoint1($sql_temp4.$sql[3]);
                        $myquizPoints_all4 = MypageController::Get_RankPoint1($sql_temp4.$sql[4]);
                }

                $passed_point = UserQuiz::SumPoint1($current_season['term'],$current_season, $user->role)->where('user_quizes.type', 2)->where('user_quizes.status', 3)
                    ->where('u.id', $id)->first();
                $quiz_point = UserQuiz::SumPoint1($current_season['term'],$current_season, $user->role)->where('user_quizes.type', 1)->where('user_quizes.status', 1)
                    ->where('u.id', $id)->first();
                $book_point = UserQuiz::SumPoint1($current_season['term'],$current_season, $user->role)->where('user_quizes.type', 0)->where('user_quizes.status', 1)
                    ->where('u.id', $id)->first();
                $total_point = UserQuiz::TotalPointToDate($current_season['end_season'], $id);
                $my_rank = 10;
                $my_addpoint = 0;
                $ranks = [29070, 14070, 6070, 2070, 870, 370, 220, 120, 60, 20, 0];
                for ($i = 0; $i < 11; $i++) {
                    if ($total_point >= $ranks[$i] && $total_point < $ranks[$i - 1]) {
                        $my_rank = $i;
                        $my_addpoint = $ranks[$i - 1] - $total_point;
                    }
                }

               
                $grade = isset(User::find($id)->PupilsClass) ? $user->PupilsClass->grade : 0;
                                
                $myBooks = Books::MyBooks($current_season)->get()->take(6);
                $myAllowedBooks = UserQuiz::AllowedBooksRecord($current_season['term'],$current_season)->get()->take(6);
                $myAllowedQuizes = UserQuiz::AllowedQuizesRecord($current_season['term'],$current_season)->groupby('user_quizes.book_id')->get()->take(6);

                $reportbackup = new ReportBackup;
                $reportbackup->user_id = $id;
                $reportbackup->role = $role;
                $reportbackup->type = $type;
                $reportbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                $reportbackup->degree = $my_rank."級";
                if($user->isPupil() && $user->active == 1 && $type == 0){
                    if(isset($current_user)) $reportbackup->target_percent = floor($current_user->sumpoint*100/$tagrgetpoint);

                }
                if(isset($current_user)) $reportbackup->threemonth_point = floor($current_user->sumpoint*100)/100;
                if(isset($passed_point))  $reportbackup->success_point = floor($passed_point->sumpoint*100)/100;
                if(isset($book_point)) $reportbackup->bookregister_point = floor($book_point->sumpoint*100)/100;
                if(isset($quiz_point)) $reportbackup->quizregister_point = floor($quiz_point->sumpoint*100)/100;
                if(isset($total_point) && $total_point != 0) $reportbackup->all_point = floor($total_point*100)/100;
                if(isset($my_addpoint)) $reportbackup->remain_point = floor($my_addpoint*100)/100;
                $mybook_Points = 0;
                if(isset($mybookPoints1)){
                    $reportbackup->test_point = floor($mybookPoints1[0]->sum*100)/100;
                    $mybook_Points = $reportbackup->test_point;
                }
                $rank_temp = 0;
                
               for($total_people=0,$i = 0; $i < count($mybookPoints2); $i++){
                    if($mybookPoints2[$i]->sum == $mybook_Points)
                       $rank_temp = $i + 1;
                    $total_people += $mybookPoints2[$i]->pupil_numbers;
                }
                $reportbackup->testcity_rank = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($mybookPoints3); $i++){
                    if($mybookPoints3[$i]->sum == $mybook_Points)
                       $rank_temp = $i + 1;
                    $total_people += $mybookPoints3[$i]->pupil_numbers;
                }
                $reportbackup->testprovince_rank = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($mybookPoints4); $i++){
                    if($mybookPoints4[$i]->sum == $mybook_Points)
                       $rank_temp = $i + 1;
                    $total_people += $mybookPoints4[$i]->pupil_numbers;
                }
                $reportbackup->testcountry_rank = $rank_temp."/".$total_people;
 
                $myquiz_Points = 0;
                if(isset($myquizPoints1)){
                    $reportbackup->quiz_point = floor($myquizPoints1[0]->sum*100)/100;
                    $myquiz_Points = $reportbackup->quiz_point;
                }
                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints2); $i++){
                    if($myquizPoints2[$i]->sum == $myquiz_Points)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints2[$i]->pupil_numbers;
                }
                $reportbackup->quizcity_rank = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints3); $i++){
                    if($myquizPoints3[$i]->sum == $myquiz_Points)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints3[$i]->pupil_numbers;
                }
                $reportbackup->quizprovince_rank = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints4); $i++){
                    if($myquizPoints4[$i]->sum == $myquiz_Points)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints4[$i]->pupil_numbers;
                }
                $reportbackup->quizcountry_rank = $rank_temp."/".$total_people;

                $myquiz_Points_before = 0;
                if(isset($myquizPoints_before1)){
                    $reportbackup->quiz_point_before = floor($myquizPoints_before1[0]->sum*100)/100;
                    $myquiz_Points_before = $reportbackup->quiz_point_before;
                }
                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_before2); $i++){
                    if($myquizPoints_before2[$i]->sum == $myquiz_Points_before)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_before2[$i]->pupil_numbers;
                }
                $reportbackup->quizcity_rank_before = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_before3); $i++){
                    if($myquizPoints_before3[$i]->sum == $myquiz_Points_before)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_before3[$i]->pupil_numbers;
                }
                $reportbackup->quizprovince_rank_before = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_before4); $i++){
                    if($myquizPoints_before4[$i]->sum == $myquiz_Points_before)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_before4[$i]->pupil_numbers;
                }
                $reportbackup->quizcountry_rank_before = $rank_temp."/".$total_people;

                $myquiz_Points_this = 0;
                if(isset($myquizPoints_this1)){
                    $reportbackup->quiz_point_this = floor($myquizPoints_this1[0]->sum*100)/100;
                    $myquiz_Points_this = $reportbackup->quiz_point_this;
                }
                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_this2); $i++){
                    if($myquizPoints_this2[$i]->sum == $myquiz_Points_this)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_this2[$i]->pupil_numbers;
                }
                $reportbackup->quizcity_rank_this = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_this3); $i++){
                    if($myquizPoints_this3[$i]->sum == $myquiz_Points_this)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_this3[$i]->pupil_numbers;
                }
                $reportbackup->quizprovince_rank_this = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_this4); $i++){
                    if($myquizPoints_this4[$i]->sum == $myquiz_Points_this)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_this4[$i]->pupil_numbers;
                }
                $reportbackup->quizcountry_rank_this = $rank_temp."/".$total_people;

                $myquiz_Points_last = 0;
                if(isset($myquizPoints_last1)){
                    $reportbackup->quiz_point_last = floor($myquizPoints_last1[0]->sum*100)/100;
                    $myquiz_Points_last = $reportbackup->quiz_point_last;
                }
                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_last2); $i++){
                    if($myquizPoints_last2[$i]->sum == $myquiz_Points_last)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_last2[$i]->pupil_numbers;
                }
                $reportbackup->quizcity_rank_last = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_last3); $i++){
                    if($myquizPoints_last3[$i]->sum == $myquiz_Points_last)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_last3[$i]->pupil_numbers;
                }
                $reportbackup->quizprovince_rank_last = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_last4); $i++){
                    if($myquizPoints_last4[$i]->sum == $myquiz_Points_last)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_last4[$i]->pupil_numbers;
                }
                $reportbackup->quizcountry_rank_last = $rank_temp."/".$total_people;

                $myquiz_Points_all = 0;
                if(isset($myquizPoints_all1)){
                    $reportbackup->quiz_point_all = floor($myquizPoints_all1[0]->sum*100)/100;
                    $myquiz_Points_all = $reportbackup->quiz_point_all;
                }
                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_all2); $i++){
                    if($myquizPoints_all2[$i]->sum == $myquiz_Points_all)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_all2[$i]->pupil_numbers;
                }
                $reportbackup->quizcity_rank_all = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_all3); $i++){
                    if($myquizPoints_all3[$i]->sum == $myquiz_Points_all)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_all3[$i]->pupil_numbers;
                }
                $reportbackup->quizprovince_rank_all = $rank_temp."/".$total_people;

                $rank_temp = 0;
                for($total_people=0,$i = 0; $i < count($myquizPoints_all4); $i++){
                    if($myquizPoints_all4[$i]->sum == $myquiz_Points_all)
                       $rank_temp = $i + 1;
                    $total_people += $myquizPoints_all4[$i]->pupil_numbers;
                }
                $reportbackup->quizcountry_rank_all = $rank_temp."/".$total_people;

                $book_temp = "";
                foreach($myBooks as  $key => $book){
                    $book_temp .= $book->title.":".$book->firstname_nick." ".$book->lastname_nick.":".$book->point;
                    if($key < count($myBooks)-1)
                         $book_temp .= ",";
                }
                $reportbackup->booktest_success = $book_temp;

                $book_temp = "";
                foreach($myAllowedBooks as  $key => $book){
                    $book_temp .= $book->title." ".$book->firstname_nick." ".$book->lastname_nick;
                    if($key < count($myAllowedBooks)-1)
                         $book_temp .= ",";
                }
                $reportbackup->bookconfirm_success = $book_temp;

                $book_temp = "";
                foreach($myAllowedQuizes as  $key => $book){
                    $book_temp .= $book->title." ".$book->firstname_nick." ".$book->lastname_nick;
                    if($key < count($myAllowedQuizes)-1)
                         $book_temp .= ",";
                }
                $reportbackup->quizconfirm_success = $book_temp;

                $reportbackup->threemonth_name1 = $cur_season[0]['year']."年度".$cur_season[0]['season'];
                $reportbackup->threemonth_name2 = $cur_season[1]['year']."年度".$cur_season[1]['season'];
                $reportbackup->threemonth_name3 = $cur_season[2]['year']."年度".$cur_season[2]['season'];
                $reportbackup->threemonth_name4 = $cur_season[3]['year']."年度".$cur_season[3]['season'];
                $reportbackup->threemonth_point1 = $myavgPoints[0][0];
                $reportbackup->threemonth_point2 = $myavgPoints[1][0];
                $reportbackup->threemonth_point3 = $myavgPoints[2][0];
                $reportbackup->threemonth_point4 = $myavgPoints[3][0];
                $reportbackup->mythreemonth_point1 = $myavgPoints[0][1];
                $reportbackup->mythreemonth_point2 = $myavgPoints[1][1];
                $reportbackup->mythreemonth_point3 = $myavgPoints[2][1];
                $reportbackup->mythreemonth_point4 = $myavgPoints[3][1];
                if($user->isPupil() && $user->active == 1){
                    
                }else{
                    $reportbackup->threemonth_name5 = $cur_season[4]['year']."年度".$cur_season[4]['season'];
                    $reportbackup->threemonth_name6 = $cur_season[5]['year']."年度".$cur_season[5]['season'];
                    $reportbackup->threemonth_name7 = $cur_season[6]['year']."年度".$cur_season[6]['season'];
                    $reportbackup->threemonth_name8 = $cur_season[7]['year']."年度".$cur_season[7]['season'];
                    $reportbackup->threemonth_point5 = $myavgPoints[4][0];
                    $reportbackup->threemonth_point6 = $myavgPoints[5][0];
                    $reportbackup->threemonth_point7 = $myavgPoints[6][0];
                    $reportbackup->threemonth_point8 = $myavgPoints[7][0];
                    $reportbackup->mythreemonth_point5 = $myavgPoints[4][1];
                    $reportbackup->mythreemonth_point6 = $myavgPoints[5][1];
                    $reportbackup->mythreemonth_point7 = $myavgPoints[6][1];
                    $reportbackup->mythreemonth_point8 = $myavgPoints[7][1];
                }
                                
                if($user->isPupil() && $user->active == 1){
                    $persons_temp = 0;
                    $ranks_temp = 0;
                    foreach ($threemonthrankPoints1 as $key => $rank) {
                        $reportgraphbackup = new ReportGraphBackup;
                        $reportgraphbackup->user_id = $id;
                        $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                        $reportgraphbackup->flag = $rank->flag;
                        $reportgraphbackup->area = 0;
                        $reportgraphbackup->period = 0;
                        if($rank->flag == 1)
                            $ranks_temp = $key + 1;
                        $persons_temp = $persons_temp + $rank->pupil_numbers;
                        $reportgraphbackup->persons = $rank->pupil_numbers;
                        $reportgraphbackup->dq_point = $rank->sum;
                        $reportgraphbackup->save();
                    }
                    $reportbackup->threemonth_rank1 = $ranks_temp."位/".$persons_temp."人";

                    $persons_temp = 0;
                    $ranks_temp = 0;
                    foreach ($threemonthrankPoints2 as $key => $rank) {
                        $reportgraphbackup = new ReportGraphBackup;
                        $reportgraphbackup->user_id = $id;
                        $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                        $reportgraphbackup->flag = $rank->flag;
                        $reportgraphbackup->area = 1;
                        $reportgraphbackup->period = 0;
                        if($rank->flag == 1)
                            $ranks_temp = $key + 1;
                        $persons_temp = $persons_temp + $rank->pupil_numbers;
                        $reportgraphbackup->persons = $rank->pupil_numbers;
                        $reportgraphbackup->dq_point = $rank->sum;
                        $reportgraphbackup->save();
                    }
                    $reportbackup->threemonth_rank2 = $ranks_temp."位/".$persons_temp."人";

                    $persons_temp = 0;
                    $ranks_temp = 0;
                    foreach ($myrankPoints1 as $key => $rank) {
                        $reportgraphbackup = new ReportGraphBackup;
                        $reportgraphbackup->user_id = $id;
                        $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                        $reportgraphbackup->flag = $rank->flag;
                        $reportgraphbackup->area = 0;
                        $reportgraphbackup->period = 1;
                        if($rank->flag == 1)
                            $ranks_temp = $key + 1;
                        $persons_temp = $persons_temp + $rank->pupil_numbers;
                        $reportgraphbackup->persons = $rank->pupil_numbers;
                        $reportgraphbackup->dq_point = $rank->sum;
                        $reportgraphbackup->save();
                    }
                    $reportbackup->oneyear_rank1 = $ranks_temp."位/".$persons_temp."人";

                    $persons_temp = 0;
                    $ranks_temp = 0;
                    foreach ($myrankPoints2 as $key => $rank) {
                        $reportgraphbackup = new ReportGraphBackup;
                        $reportgraphbackup->user_id = $id;
                        $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                        $reportgraphbackup->flag = $rank->flag;
                        $reportgraphbackup->area = 1;
                        $reportgraphbackup->period = 1;
                        if($rank->flag == 1)
                            $ranks_temp = $key + 1;
                        $persons_temp = $persons_temp + $rank->pupil_numbers;
                        $reportgraphbackup->persons = $rank->pupil_numbers;
                        $reportgraphbackup->dq_point = $rank->sum;
                        $reportgraphbackup->save();
                    }
                    $reportbackup->oneyear_rank2 = $ranks_temp."位/".$persons_temp."人";

                    $persons_temp = 0;
                    $ranks_temp = 0;
                    foreach ($allrankPoints1 as $key => $rank) {
                        $reportgraphbackup = new ReportGraphBackup;
                        $reportgraphbackup->user_id = $id;
                        $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                        $reportgraphbackup->flag = $rank->flag;
                        $reportgraphbackup->area = 0;
                        $reportgraphbackup->period = 2;
                        if($rank->flag == 1)
                            $ranks_temp = $key + 1;
                        $persons_temp = $persons_temp + $rank->pupil_numbers;
                        $reportgraphbackup->persons = $rank->pupil_numbers;
                        $reportgraphbackup->dq_point = $rank->sum;
                        $reportgraphbackup->save();
                    }
                    $reportbackup->all_rank1 = $ranks_temp."位/".$persons_temp."人";

                    $persons_temp = 0;
                    $ranks_temp = 0;
                    foreach ($allrankPoints2 as $key => $rank) {
                        $reportgraphbackup = new ReportGraphBackup;
                        $reportgraphbackup->user_id = $id;
                        $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                        $reportgraphbackup->flag = $rank->flag;
                        $reportgraphbackup->area = 1;
                        $reportgraphbackup->period = 2;
                        if($rank->flag == 1)
                            $ranks_temp = $key + 1;
                        $persons_temp = $persons_temp + $rank->pupil_numbers;
                        $reportgraphbackup->persons = $rank->pupil_numbers;
                        $reportgraphbackup->dq_point = $rank->sum;
                        $reportgraphbackup->save();
                    }
                    $reportbackup->all_rank2 = $ranks_temp."位/".$persons_temp."人";
                }

                $persons_temp = 0;
                $ranks_temp = 0;
                foreach ($threemonthrankPoints3 as $key => $rank) {
                    $reportgraphbackup = new ReportGraphBackup;
                    $reportgraphbackup->user_id = $id;
                    $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                    $reportgraphbackup->flag = $rank->flag;
                    $reportgraphbackup->area = 2;
                    $reportgraphbackup->period = 0;
                    if($rank->flag == 1)
                        $ranks_temp = $key + 1;
                    $persons_temp = $persons_temp + $rank->pupil_numbers;
                    $reportgraphbackup->persons = $rank->pupil_numbers;
                    $reportgraphbackup->dq_point = $rank->sum;
                    $reportgraphbackup->save();
                }
                $reportbackup->threemonth_rank3 = $ranks_temp."位/".$persons_temp."人";

                $persons_temp = 0;
                $ranks_temp = 0;
                foreach ($threemonthrankPoints4 as $key => $rank) {
                    $reportgraphbackup = new ReportGraphBackup;
                    $reportgraphbackup->user_id = $id;
                    $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                    $reportgraphbackup->flag = $rank->flag;
                    $reportgraphbackup->area = 3;
                    $reportgraphbackup->period = 0;
                    if($rank->flag == 1)
                        $ranks_temp = $key + 1;
                    $persons_temp = $persons_temp + $rank->pupil_numbers;
                    $reportgraphbackup->persons = $rank->pupil_numbers;
                    $reportgraphbackup->dq_point = $rank->sum;
                    $reportgraphbackup->save();
                }
                $reportbackup->threemonth_rank4 = $ranks_temp."位/".$persons_temp."人";

                $persons_temp = 0;
                $ranks_temp = 0;
                foreach ($threemonthrankPoints5 as $key => $rank) {
                    $reportgraphbackup = new ReportGraphBackup;
                    $reportgraphbackup->user_id = $id;
                    $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                    $reportgraphbackup->flag = $rank->flag;
                    $reportgraphbackup->area = 4;
                    $reportgraphbackup->period = 0;
                    if($rank->flag == 1)
                        $ranks_temp = $key + 1;
                    $persons_temp = $persons_temp + $rank->pupil_numbers;
                    $reportgraphbackup->persons = $rank->pupil_numbers;
                    $reportgraphbackup->dq_point = $rank->sum;
                    $reportgraphbackup->save();
                }
                $reportbackup->threemonth_rank5 = $ranks_temp."位/".$persons_temp."人";

                $persons_temp = 0;
                $ranks_temp = 0;
                foreach ($myrankPoints3 as $key => $rank) {
                    $reportgraphbackup = new ReportGraphBackup;
                    $reportgraphbackup->user_id = $id;
                    $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                    $reportgraphbackup->flag = $rank->flag;
                    $reportgraphbackup->area = 2;
                    $reportgraphbackup->period = 1;
                    if($rank->flag == 1)
                        $ranks_temp = $key + 1;
                    $persons_temp = $persons_temp + $rank->pupil_numbers;
                    $reportgraphbackup->persons = $rank->pupil_numbers;
                    $reportgraphbackup->dq_point = $rank->sum;
                    $reportgraphbackup->save();
                }
                $reportbackup->oneyear_rank3 = $ranks_temp."位/".$persons_temp."人";

                $persons_temp = 0;
                $ranks_temp = 0;
                foreach ($myrankPoints4 as $key => $rank) {
                    $reportgraphbackup = new ReportGraphBackup;
                    $reportgraphbackup->user_id = $id;
                    $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                    $reportgraphbackup->flag = $rank->flag;
                    $reportgraphbackup->area = 3;
                    $reportgraphbackup->period = 1;
                    if($rank->flag == 1)
                        $ranks_temp = $key + 1;
                    $persons_temp = $persons_temp + $rank->pupil_numbers;
                    $reportgraphbackup->persons = $rank->pupil_numbers;
                    $reportgraphbackup->dq_point = $rank->sum;
                    $reportgraphbackup->save();
                }
                $reportbackup->oneyear_rank4 = $ranks_temp."位/".$persons_temp."人";

                $persons_temp = 0;
                $ranks_temp = 0;
                foreach ($myrankPoints5 as $key => $rank) {
                    $reportgraphbackup = new ReportGraphBackup;
                    $reportgraphbackup->user_id = $id;
                    $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                    $reportgraphbackup->flag = $rank->flag;
                    $reportgraphbackup->area = 4;
                    $reportgraphbackup->period = 1;
                    if($rank->flag == 1)
                        $ranks_temp = $key + 1;
                    $persons_temp = $persons_temp + $rank->pupil_numbers;
                    $reportgraphbackup->persons = $rank->pupil_numbers;
                    $reportgraphbackup->dq_point = $rank->sum;
                    $reportgraphbackup->save();
                }
                $reportbackup->oneyear_rank5 = $ranks_temp."位/".$persons_temp."人";

                $persons_temp = 0;
                $ranks_temp = 0;
                foreach ($allrankPoints3 as $key => $rank) {
                    $reportgraphbackup = new ReportGraphBackup;
                    $reportgraphbackup->user_id = $id;
                    $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                    $reportgraphbackup->flag = $rank->flag;
                    $reportgraphbackup->area = 2;
                    $reportgraphbackup->period = 2;
                    if($rank->flag == 1)
                        $ranks_temp = $key + 1;
                    $persons_temp = $persons_temp + $rank->pupil_numbers;
                    $reportgraphbackup->persons = $rank->pupil_numbers;
                    $reportgraphbackup->dq_point = $rank->sum;
                    $reportgraphbackup->save();
                }
                $reportbackup->all_rank3 = $ranks_temp."位/".$persons_temp."人";

                $persons_temp = 0;
                $ranks_temp = 0;
                foreach ($allrankPoints4 as $key => $rank) {
                    $reportgraphbackup = new ReportGraphBackup;
                    $reportgraphbackup->user_id = $id;
                    $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                    $reportgraphbackup->flag = $rank->flag;
                    $reportgraphbackup->area = 3;
                    $reportgraphbackup->period = 2;
                    if($rank->flag == 1)
                        $ranks_temp = $key + 1;
                    $persons_temp = $persons_temp + $rank->pupil_numbers;
                    $reportgraphbackup->persons = $rank->pupil_numbers;
                    $reportgraphbackup->dq_point = $rank->sum;
                    $reportgraphbackup->save();
                }
                $reportbackup->all_rank4 = $ranks_temp."位/".$persons_temp."人";

                $persons_temp = 0;
                $ranks_temp = 0;
                foreach ($allrankPoints5 as $key => $rank) {
                    $reportgraphbackup = new ReportGraphBackup;
                    $reportgraphbackup->user_id = $id;
                    $reportgraphbackup->backup_date  = date_format($current_season['end_season'], 'Y-m-d');
                    $reportgraphbackup->flag = $rank->flag;
                    $reportgraphbackup->area = 4;
                    $reportgraphbackup->period = 2;
                    if($rank->flag == 1)
                        $ranks_temp = $key + 1;
                    $persons_temp = $persons_temp + $rank->pupil_numbers;
                    $reportgraphbackup->persons = $rank->pupil_numbers;
                    $reportgraphbackup->dq_point = $rank->sum;
                    $reportgraphbackup->save();
                }
                $reportbackup->all_rank5 = $ranks_temp."位/".$persons_temp."人";
                $reportbackup->save();
            }
        }
    }

    static function search_birthday($rankingage){
        $today = now();

        switch ($rankingage) {
            case 1:
                if($today <= Carbon::create((Date("Y")), 3, 31,23,59,59)){
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-13), 4, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")), 3, 31), "Y-m-d");
                }
                else{
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-12), 4, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")), 3, 31), "Y-m-d");
                }
                break;
            case 2:
                if($today <= Carbon::create((Date("Y")), 3, 31,23,59,59)){
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-16), 4, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-13), 3, 31), "Y-m-d");
                }
                else{
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-15), 4, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-12), 3, 31), "Y-m-d");
                }
                break;
            case 3:
                if($today <= Carbon::create((Date("Y")), 3, 31,23,59,59)){
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-17), 4, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")), 3, 31), "Y-m-d");
                }
                else{
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-16), 4, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")), 3, 31), "Y-m-d");
                }
                break;
            case 4:
                if($today <= Carbon::create((Date("Y")), 3, 31,23,59,59)){
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-18), 4, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")), 3, 31), "Y-m-d");
                }
                else{
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-17), 4, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")), 3, 31), "Y-m-d");
                }
                break;
            case 5:
                if($today <= Carbon::create((Date("Y")), 3, 31,23,59,59)){
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-19), 1, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-16), 3, 31), "Y-m-d");
                }
                else{
                    $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-19), 1, 1), "Y-m-d");
                    $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-15), 3, 31), "Y-m-d");
                }
                break;
            case 6:
                $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-29), 1, 1), "Y-m-d");
                $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-20), 12, 31), "Y-m-d");
                break;
            case 7:
                $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-39), 1, 1), "Y-m-d");
                $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-30), 12, 31), "Y-m-d");
                break;
            case 8:
                $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-49), 1, 1), "Y-m-d");
                $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-40), 12, 31), "Y-m-d");
                break;
            case 9:
                $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-59), 1, 1), "Y-m-d");
                $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-50), 12, 31), "Y-m-d");
                break;
            case 10:
                $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-69), 1, 1), "Y-m-d");
                $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-60), 12, 31), "Y-m-d");
                break;
            case 11:
                $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-79), 1, 1), "Y-m-d");
                $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-70), 12, 31), "Y-m-d");
                break;
            case 12:
                $search_birthday['start_day'] = date_format(Carbon::createFromDate((Date("Y")-89), 1, 1), "Y-m-d");
                $search_birthday['end_day'] = date_format(Carbon::createFromDate((Date("Y")-80), 12, 31), "Y-m-d");
                break;
        }

        return $search_birthday; 
    }
}
